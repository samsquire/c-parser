token 
JIT Compiler by Samuel Squire (https://github.com/samsquire/compiler)
with JIT code from Jacob Martin (https://gist.github.com/martinjacobd)

This C program executes a language that is superficially similar to Javascript.
It is barebones and a toy.

Copyright (c) 2023 Samuel Michael Squire
https://samsquire.com/

It is under MIT licence.
You can email me at sam@samsquire.com


token divide
token 
 * Copyright (c) 2023 Jacob Martin
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
token divide
token  Takes hexadecimal bytes from stdin and executes them as machine code,

token  assuming they implement a function that takes no arguments

token  and returns an int

token  prints out the returned value as a hex number

token  Sample input on x86_64: echo b8ff000000c3 | ./jit

token  makes a function that returns 0xff

token hash
include lessthan
stdio
Found import #include <stdio.h>
token hash
include lessthan
stdlib
Found import #include <stdlib.h>
token hash
include lessthan
string
Found import #include <string.h>
token hash
include lessthan
error
Found import #include <error.h>
token hash
include lessthan
errno
Found import #include <errno.h>
token hash
include lessthan
unistd
Found import #include <unistd.h>
token hash
include lessthan
sys/mman
Found import #include <sys/mman.h>
token hash
include lessthan
ctype
Found import #include <ctype.h>
token hash
Found define PCRE2_CODE_UNIT_WIDTH = 8
token hash
include lessthan
pcre2
Found import #include <pcre2.h>
token hash
Found define MAX_SIZE = 1024
token hash
include lessthan
fcntl
Found import #include <fcntl.h>
token hash
include lessthan
sys/stat
Found import #include <sys/stat.h>
token hash
include quote
common
Found import #include "common.h"
token long
token compile_stub
token openbracket
token closebracket
token semicolon
token struct
Found struct definition
determiner opensquare
closedigit closesquare
end of array
type declaration: [type {'name': 'char'}, name {'name': 'key'}, array {'size': '1024'}]
peeked token semicolon
EXPECTED WAS  semicolon
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'len'}]
peeked token closecurly
'end of struct'
struct {}
 type {'name': 'char'}
 name {'name': 'key'}
 array {'size': '1024'}
 type {'name': 'int'}
 name {'name': 'len'}
peeked token closecurly
[type {'name': 'int'}, name {'name': 'len'}]
token closecurly
token semicolon
token struct
Found struct definition
determiner semicolon
end of declaration
type declaration: [name {'name': 'value'}]
peeked token int
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'nested'}]
peeked token int
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'set'}]
peeked token closecurly
'end of struct'
struct {}
 name {'name': 'value'}
 type {'name': 'int'}
 name {'name': 'nested'}
 type {'name': 'int'}
 name {'name': 'set'}
peeked token closecurly
[type {'name': 'int'}, name {'name': 'set'}]
token closecurly
token semicolon
token struct
Found struct definition
determiner asterisk
type declaration: [struct {}, name {'name': 'Range'}, pointer {}]
determiner asterisk
type declaration: [struct {}, name {'name': 'Range'}, pointer {}, pointer {}]
determiner ranges
type declaration: [struct {}, type {'name': 'Range'}, pointer {}, pointer {}, name {'name': 'ranges'}]
peeked token semicolon
EXPECTED WAS  semicolon
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'range_length'}]
peeked token closecurly
'end of struct'
struct {}
 struct {}
 type {'name': 'Range'}
 pointer {}
 pointer {}
 name {'name': 'ranges'}
 type {'name': 'int'}
 name {'name': 'range_length'}
peeked token closecurly
[type {'name': 'int'}, name {'name': 'range_length'}]
token closecurly
token semicolon
token struct
Found struct definition
determiner asterisk
type declaration: [struct {}, name {'name': 'Expression'}, pointer {}]
determiner expression
type declaration: [struct {}, type {'name': 'Expression'}, pointer {}, name {'name': 'expression'}]
peeked token semicolon
EXPECTED WAS  semicolon
determiner asterisk
type declaration: [struct {}, name {'name': 'ExpressionSource'}, pointer {}]
determiner exps
type declaration: [struct {}, type {'name': 'ExpressionSource'}, pointer {}, name {'name': 'exps'}]
peeked token semicolon
EXPECTED WAS  semicolon
determiner semicolon
end of declaration
type declaration: [type {'name': 'char'}, pointer {}, name {'name': 'variable'}]
peeked token char
determiner semicolon
end of declaration
type declaration: [type {'name': 'char'}, pointer {}, name {'name': 'variable_key'}]
peeked token int
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'variable_length'}]
peeked token int
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'variable_key_length'}]
peeked token int
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'type'}]
peeked token char
determiner semicolon
end of declaration
type declaration: [type {'name': 'char'}, pointer {}, name {'name': 'symbol'}]
peeked token char
determiner semicolon
end of declaration
type declaration: [type {'name': 'char'}, pointer {}, name {'name': 'left'}]
peeked token char
determiner semicolon
end of declaration
type declaration: [type {'name': 'char'}, pointer {}, name {'name': 'right'}]
peeked token char
determiner semicolon
end of declaration
type declaration: [type {'name': 'char'}, pointer {}, name {'name': 'text'}]
peeked token char
determiner references
type declaration: [type {'name': 'char'}, pointer {}, type {'name': 'asterisk'}, name {'name': 'references'}]
peeked token semicolon
EXPECTED WAS  semicolon
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'reference_length'}]
peeked token int
determiner reference_variable_length
type declaration: [type {'name': 'int'}, pointer {}, type {'name': 'asterisk'}, name {'name': 'reference_variable_length'}]
peeked token semicolon
EXPECTED WAS  semicolon
determiner semicolon
end of declaration
type declaration: [type {'name': 'char'}, pointer {}, name {'name': 'chosen_register'}]
peeked token struct
determiner asterisk
type declaration: [struct {}, name {'name': 'Expression'}, pointer {}]
determiner asterisk
type declaration: [struct {}, name {'name': 'Expression'}, pointer {}, pointer {}]
determiner reference_expressions
type declaration: [struct {}, type {'name': 'Expression'}, pointer {}, pointer {}, name {'name': 'reference_expressions'}]
peeked token semicolon
EXPECTED WAS  semicolon
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'reference_expressions_length'}]
peeked token closecurly
'end of struct'
struct {}
 struct {}
 type {'name': 'Expression'}
 pointer {}
 name {'name': 'expression'}
 struct {}
 type {'name': 'ExpressionSource'}
 pointer {}
 name {'name': 'exps'}
 type {'name': 'char'}
 pointer {}
 name {'name': 'variable'}
 type {'name': 'char'}
 pointer {}
 name {'name': 'variable_key'}
 type {'name': 'int'}
 name {'name': 'variable_length'}
 type {'name': 'int'}
 name {'name': 'variable_key_length'}
 type {'name': 'int'}
 name {'name': 'type'}
 type {'name': 'char'}
 pointer {}
 name {'name': 'symbol'}
 type {'name': 'char'}
 pointer {}
 name {'name': 'left'}
 type {'name': 'char'}
 pointer {}
 name {'name': 'right'}
 type {'name': 'char'}
 pointer {}
 name {'name': 'text'}
 type {'name': 'char'}
 pointer {}
 type {'name': 'asterisk'}
 name {'name': 'references'}
 type {'name': 'int'}
 name {'name': 'reference_length'}
 type {'name': 'int'}
 pointer {}
 type {'name': 'asterisk'}
 name {'name': 'reference_variable_length'}
 type {'name': 'char'}
 pointer {}
 name {'name': 'chosen_register'}
 struct {}
 type {'name': 'Expression'}
 pointer {}
 pointer {}
 name {'name': 'reference_expressions'}
 type {'name': 'int'}
 name {'name': 'reference_expressions_length'}
peeked token closecurly
[type {'name': 'int'}, name {'name': 'reference_expressions_length'}]
token closecurly
token semicolon
token struct
Found struct definition
determiner asterisk
type declaration: [struct {}, name {'name': 'Edge'}, pointer {}]
determiner asterisk
type declaration: [struct {}, name {'name': 'Edge'}, pointer {}, pointer {}]
determiner edges
type declaration: [struct {}, type {'name': 'Edge'}, pointer {}, pointer {}, name {'name': 'edges'}]
peeked token semicolon
EXPECTED WAS  semicolon
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'edge_count'}]
peeked token struct
determiner asterisk
type declaration: [struct {}, name {'name': 'Assignment'}, pointer {}]
determiner from
type declaration: [struct {}, type {'name': 'Assignment'}, pointer {}, name {'name': 'from'}]
peeked token semicolon
EXPECTED WAS  semicolon
'end of struct'
struct {}
 struct {}
 type {'name': 'Edge'}
 pointer {}
 pointer {}
 name {'name': 'edges'}
 type {'name': 'int'}
 name {'name': 'edge_count'}
 struct {}
 type {'name': 'Assignment'}
 pointer {}
 name {'name': 'from'}
peeked token closecurly
[struct {}, type {'name': 'Assignment'}, pointer {}, name {'name': 'from'}]
token closecurly
token semicolon
token struct
Found struct definition
determiner asterisk
type declaration: [struct {}, name {'name': 'Assignment'}, pointer {}]
determiner assignment
type declaration: [struct {}, type {'name': 'Assignment'}, pointer {}, name {'name': 'assignment'}]
peeked token semicolon
EXPECTED WAS  semicolon
determiner semicolon
end of declaration
type declaration: [type {'name': 'char'}, pointer {}, name {'name': 'destination'}]
peeked token closecurly
'end of struct'
struct {}
 struct {}
 type {'name': 'Assignment'}
 pointer {}
 name {'name': 'assignment'}
 type {'name': 'char'}
 pointer {}
 name {'name': 'destination'}
peeked token closecurly
[type {'name': 'char'}, pointer {}, name {'name': 'destination'}]
token closecurly
token semicolon
token struct
Found struct definition
determiner asterisk
type declaration: [struct {}, name {'name': 'Expression'}, pointer {}]
determiner expression
type declaration: [struct {}, type {'name': 'Expression'}, pointer {}, name {'name': 'expression'}]
peeked token semicolon
EXPECTED WAS  semicolon
determiner asterisk
type declaration: [struct {}, name {'name': 'Assignment'}, pointer {}]
determiner start_assignment
type declaration: [struct {}, type {'name': 'Assignment'}, pointer {}, name {'name': 'start_assignment'}]
peeked token semicolon
EXPECTED WAS  semicolon
determiner asterisk
type declaration: [struct {}, name {'name': 'Assignment'}, pointer {}]
determiner end_assignment
type declaration: [struct {}, type {'name': 'Assignment'}, pointer {}, name {'name': 'end_assignment'}]
peeked token semicolon
EXPECTED WAS  semicolon
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'start_position'}]
peeked token int
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'end_position'}]
peeked token char
determiner semicolon
end of declaration
type declaration: [type {'name': 'char'}, pointer {}, name {'name': 'variable'}]
peeked token int
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'variable_length'}]
peeked token char
determiner semicolon
end of declaration
type declaration: [type {'name': 'char'}, pointer {}, name {'name': 'chosen_register'}]
peeked token closecurly
'end of struct'
struct {}
 struct {}
 type {'name': 'Expression'}
 pointer {}
 name {'name': 'expression'}
 struct {}
 type {'name': 'Assignment'}
 pointer {}
 name {'name': 'start_assignment'}
 struct {}
 type {'name': 'Assignment'}
 pointer {}
 name {'name': 'end_assignment'}
 type {'name': 'int'}
 name {'name': 'start_position'}
 type {'name': 'int'}
 name {'name': 'end_position'}
 type {'name': 'char'}
 pointer {}
 name {'name': 'variable'}
 type {'name': 'int'}
 name {'name': 'variable_length'}
 type {'name': 'char'}
 pointer {}
 name {'name': 'chosen_register'}
peeked token closecurly
[type {'name': 'char'}, pointer {}, name {'name': 'chosen_register'}]
token closecurly
token semicolon
token struct
Found struct definition
determiner asterisk
type declaration: [struct {}, name {'name': 'Assignment'}, pointer {}]
determiner assignments
type declaration: [struct {}, type {'name': 'Assignment'}, pointer {}, name {'name': 'assignments'}]
peeked token semicolon
EXPECTED WAS  semicolon
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'assignment_length'}]
peeked token closecurly
'end of struct'
struct {}
 struct {}
 type {'name': 'Assignment'}
 pointer {}
 name {'name': 'assignments'}
 type {'name': 'int'}
 name {'name': 'assignment_length'}
peeked token closecurly
[type {'name': 'int'}, name {'name': 'assignment_length'}]
token closecurly
token semicolon
token struct
Found struct definition
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'id'}]
peeked token struct
determiner key
type declaration: [struct {}, type {'name': 'hashmap_key'}, name {'name': 'key'}]
peeked token opensquare
determiner closesquare
type declaration: [type {'name': 'MAX_SIZE'}, name {'name': 'closesquare'}]
peeked token semicolon
EXPECTED WAS  semicolon
determiner value
type declaration: [struct {}, type {'name': 'hashmap_value'}, name {'name': 'value'}]
peeked token opensquare
determiner closesquare
type declaration: [type {'name': 'MAX_SIZE'}, name {'name': 'closesquare'}]
peeked token semicolon
EXPECTED WAS  semicolon
'end of struct'
struct {}
 type {'name': 'int'}
 name {'name': 'id'}
 struct {}
 type {'name': 'hashmap_key'}
 name {'name': 'key'}
 type {'name': 'MAX_SIZE'}
 name {'name': 'closesquare'}
 struct {}
 type {'name': 'hashmap_value'}
 name {'name': 'value'}
 type {'name': 'MAX_SIZE'}
 name {'name': 'closesquare'}
peeked token closecurly
[type {'name': 'MAX_SIZE'}, name {'name': 'closesquare'}]
token closecurly
token semicolon
token struct
Found struct definition
determiner asterisk
type declaration: [struct {}, name {'name': 'hashmap'}, pointer {}]
determiner hashmap
type declaration: [struct {}, type {'name': 'hashmap'}, pointer {}, name {'name': 'hashmap'}]
peeked token semicolon
EXPECTED WAS  semicolon
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'running'}]
peeked token int
determiner semicolon
end of declaration
type declaration: [type {'name': 'int'}, name {'name': 'count'}]
peeked token closecurly
'end of struct'
struct {}
 struct {}
 type {'name': 'hashmap'}
 pointer {}
 name {'name': 'hashmap'}
 type {'name': 'int'}
 name {'name': 'running'}
 type {'name': 'int'}
 name {'name': 'count'}
peeked token closecurly
[type {'name': 'int'}, name {'name': 'count'}]
token closecurly
token semicolon
token int
Found function, return type: [type {'name': 'int'}, name {'name': 'set_hashmap'}]
paramlist token struct
determiner asterisk
type declaration: [struct {}, name {'name': 'hashmap'}, pointer {}]
determiner hashmap
type declaration: [struct {}, type {'name': 'hashmap'}, pointer {}, name {'name': 'hashmap'}]
peeked token comma
paramlist token comma
paramlist token char
determiner opensquare
end of array
type declaration: [type {'name': 'char'}, name {'name': 'key'}, array-empty {}]
peeked token comma
paramlist token comma
paramlist token uintptr_t
determiner comma
paramlist token comma
paramlist token int
determiner closebracket
paramlist token closebracket
param list
function {}
 type {'name': 'int'}
 name {'name': 'set_hashmap'}
 param-list {}
  parameter {}
   struct {}
   type {'name': 'hashmap'}
   pointer {}
   name {'name': 'hashmap'}
  parameter {}
   type {'name': 'char'}
   name {'name': 'key'}
   array-empty {}
  parameter {}
   type {'name': 'uintptr_t'}
   name {'name': 'value'}
  parameter {}
   type {'name': 'int'}
   name {'name': 'key_length'}
[[type {'name': 'int'}, name {'name': 'set_hashmap'}]]
peeked token opencurly
need to parse function body
opencurly
expression body
