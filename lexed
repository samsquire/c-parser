../compiler/jitcompiler.c
found slash
*
token 
JIT Compiler by Samuel Squire (https://github.com/samsquire/compiler)
with JIT code from Jacob Martin (https://gist.github.com/martinjacobd)

This C program executes a language that is superficially similar to Javascript.
It is barebones and a toy.

Copyright (c) 2023 Samuel Michael Squire
https://samsquire.com/

It is under MIT licence.
You can email me at sam@samsquire.com


found slash


token divide
found slash
*
token 
 * Copyright (c) 2023 Jacob Martin
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
found slash


token divide
found slash
/
token  Takes hexadecimal bytes from stdin and executes them as machine code,

found slash
/
token  assuming they implement a function that takes no arguments

found slash
/
token  and returns an int

found slash
/
token  prints out the returned value as a hex number

found slash
/
token  Sample input on x86_64: echo b8ff000000c3 | ./jit

found slash
/
token  makes a function that returns 0xff

token hash
include lessthan
stdio
Found import #include <stdio.h>
token hash
include lessthan
stdlib
Found import #include <stdlib.h>
token hash
include lessthan
string
Found import #include <string.h>
token hash
include lessthan
error
Found import #include <error.h>
token hash
include lessthan
errno
Found import #include <errno.h>
token hash
include lessthan
unistd
Found import #include <unistd.h>
token hash
include lessthan
found slash
m
sys/mman
Found import #include <sys/mman.h>
token hash
include lessthan
ctype
Found import #include <ctype.h>
token hash
Found define PCRE2_CODE_UNIT_WIDTH = 8
token hash
include lessthan
pcre2
Found import #include <pcre2.h>
token hash
Found define MAX_SIZE = 1024
token hash
include lessthan
fcntl
Found import #include <fcntl.h>
token hash
include lessthan
found slash
s
sys/stat
Found import #include <sys/stat.h>
token hash
include quote
common
Found import #include "common.h"
token long
token compile_stub
token openbracket
token closebracket
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'hashmap_key', name {'name': 'opencurly'}]
[struct {}, 'hashmap_key', name {'name': 'opencurly'}]
token char
determiner opensquare
close closesquare
end of array
type declaration: ['char', 'key', array {'size': '1024'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'len']
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'hashmap_value', name {'name': 'opencurly'}]
[struct {}, 'hashmap_value', name {'name': 'opencurly'}]
token uintptr_t
token value
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'nested']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'set']
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'RangePair', name {'name': 'opencurly'}]
[struct {}, 'RangePair', name {'name': 'opencurly'}]
token struct
determiner asterisk
type declaration: [struct {}, 'Range', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Range', pointer {}, pointer {}]
determiner ranges
type declaration: [struct {}, 'Range', pointer {}, pointer {}, name {'name': 'ranges'}]
[struct {}, 'Range', pointer {}, pointer {}, name {'name': 'ranges'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'range_length']
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'Assignment', name {'name': 'opencurly'}]
[struct {}, 'Assignment', name {'name': 'opencurly'}]
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner expression
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'expression'}]
[struct {}, 'Expression', pointer {}, name {'name': 'expression'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner exps
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'exps'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'exps'}]
token semicolon
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'variable']
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'variable_key']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'variable_length']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'variable_key_length']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'type']
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'symbol']
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'left']
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'right']
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'text']
token char
is a pointer ['char', '*']
determiner references
type declaration: ['char', '*', 'asterisk', name {'name': 'references'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'reference_length']
token int
is a pointer ['int', '*']
determiner reference_variable_length
type declaration: ['int', '*', 'asterisk', name {'name': 'reference_variable_length'}]
token semicolon
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'chosen_register']
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner reference_expressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'reference_expressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'reference_expressions'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'reference_expressions_length']
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'Edges', name {'name': 'opencurly'}]
[struct {}, 'Edges', name {'name': 'opencurly'}]
token struct
determiner asterisk
type declaration: [struct {}, 'Edge', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Edge', pointer {}, pointer {}]
determiner edges
type declaration: [struct {}, 'Edge', pointer {}, pointer {}, name {'name': 'edges'}]
[struct {}, 'Edge', pointer {}, pointer {}, name {'name': 'edges'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'edge_count']
token struct
determiner asterisk
type declaration: [struct {}, 'Assignment', pointer {}]
determiner from
type declaration: [struct {}, 'Assignment', pointer {}, name {'name': 'from'}]
[struct {}, 'Assignment', pointer {}, name {'name': 'from'}]
token semicolon
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'Edge', name {'name': 'opencurly'}]
[struct {}, 'Edge', name {'name': 'opencurly'}]
token struct
determiner asterisk
type declaration: [struct {}, 'Assignment', pointer {}]
determiner assignment
type declaration: [struct {}, 'Assignment', pointer {}, name {'name': 'assignment'}]
[struct {}, 'Assignment', pointer {}, name {'name': 'assignment'}]
token semicolon
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'destination']
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'Range', name {'name': 'opencurly'}]
[struct {}, 'Range', name {'name': 'opencurly'}]
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner expression
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'expression'}]
[struct {}, 'Expression', pointer {}, name {'name': 'expression'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Assignment', pointer {}]
determiner start_assignment
type declaration: [struct {}, 'Assignment', pointer {}, name {'name': 'start_assignment'}]
[struct {}, 'Assignment', pointer {}, name {'name': 'start_assignment'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Assignment', pointer {}]
determiner end_assignment
type declaration: [struct {}, 'Assignment', pointer {}, name {'name': 'end_assignment'}]
[struct {}, 'Assignment', pointer {}, name {'name': 'end_assignment'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'start_position']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'end_position']
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'variable']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'variable_length']
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'chosen_register']
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'AssignmentPair', name {'name': 'opencurly'}]
[struct {}, 'AssignmentPair', name {'name': 'opencurly'}]
token struct
determiner asterisk
type declaration: [struct {}, 'Assignment', pointer {}]
determiner assignments
type declaration: [struct {}, 'Assignment', pointer {}, name {'name': 'assignments'}]
[struct {}, 'Assignment', pointer {}, name {'name': 'assignments'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'assignment_length']
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'hashmap', name {'name': 'opencurly'}]
[struct {}, 'hashmap', name {'name': 'opencurly'}]
token int
determiner semicolon
end of declaration
type declaration: ['int', 'id']
token struct
determiner key
type declaration: [struct {}, 'hashmap_key', name {'name': 'key'}]
[struct {}, 'hashmap_key', name {'name': 'key'}]
token opensquare
token MAX_SIZE
token closesquare
token semicolon
token struct
determiner value
type declaration: [struct {}, 'hashmap_value', name {'name': 'value'}]
[struct {}, 'hashmap_value', name {'name': 'value'}]
token opensquare
token MAX_SIZE
token closesquare
token semicolon
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'work_def', name {'name': 'opencurly'}]
[struct {}, 'work_def', name {'name': 'opencurly'}]
token struct
determiner asterisk
type declaration: [struct {}, 'hashmap', pointer {}]
determiner hashmap
type declaration: [struct {}, 'hashmap', pointer {}, name {'name': 'hashmap'}]
[struct {}, 'hashmap', pointer {}, name {'name': 'hashmap'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'running']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'count']
token closecurly
token semicolon
token int
Found function, return type: ['int', 'set_hashmap']
token struct
determiner asterisk
type declaration: [struct {}, 'hashmap', pointer {}]
determiner hashmap
type declaration: [struct {}, 'hashmap', pointer {}, name {'name': 'hashmap'}]
[struct {}, 'hashmap', pointer {}, name {'name': 'hashmap'}]
token comma
token char
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'uintptr_t'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'uintptr_t'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'uintptr_t'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'key_length'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'uintptr_t'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'key_length'}, array-constant {'constant': 'opencurly'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'uintptr_t'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'key_length'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'uintptr_t'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'key_length'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'uintptr_t'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'key_length'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'uintptr_t'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'key_length'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'uintptr_t'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'key_length'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'uintptr_t'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'key_length'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'memcpy'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'uintptr_t'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'key_length'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'memcpy'}, array-constant {'constant': 'amper'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'uintptr_t'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'key_length'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'memcpy'}, array-constant {'constant': 'amper'}, array-constant {'constant': 'asterisk'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'uintptr_t'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'key_length'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'memcpy'}, array-constant {'constant': 'amper'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'uintptr_t'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'key_length'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'memcpy'}, array-constant {'constant': 'amper'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'key'}]
determiner opensquare
end of array
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'uintptr_t'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'key_length'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'memcpy'}, array-constant {'constant': 'amper'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'key'}, array-constant {'constant': 'hsh'}]
token comma
token key
token comma
token MAX_SIZE
token closebracket
token semicolon
token hashmap
token minus
token greaterthan
token key
token opensquare
token hsh
token closesquare
token stop
token len
token equals
token key_length
token semicolon
token hashmap
token minus
token greaterthan
token value
token opensquare
token hsh
token closesquare
token stop
token value
token equals
token value
token semicolon
token hashmap
token minus
token greaterthan
token value
token opensquare
token hsh
token closesquare
token stop
token set
token equals
token 1
token semicolon
token closecurly
token int
Found function, return type: ['int', 'set_hashmap_nested']
token struct
determiner asterisk
type declaration: [struct {}, 'hashmap', pointer {}]
determiner hashmap
type declaration: [struct {}, 'hashmap', pointer {}, name {'name': 'hashmap'}]
[struct {}, 'hashmap', pointer {}, name {'name': 'hashmap'}]
token comma
token char
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}, array-constant {'constant': 'hash'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'key'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'key'}, array-constant {'constant': 'percent'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'key'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'key'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'key'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'key'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hashmap'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'key'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'stop'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'key'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'stop'}, array-constant {'constant': 'opensquare'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'key'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'stop'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'key'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'stop'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'key'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'key'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'stop'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'key'}, array-constant {'constant': 'MAX_SIZE'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'key'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'stop'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'key'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'key'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'stop'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'key'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'key'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'stop'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'key'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'value'}]
determiner opensquare
end of array
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'unsigned'}, array-constant {'constant': 'hsh'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'key'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'stop'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'key'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'value'}, array-constant {'constant': 'hsh'}]
token stop
token nested
token equals
token nested
token minus
token greaterthan
token id
token semicolon
token closecurly
token struct
determiner asterisk
type declaration: [struct {}, 'hashmap_value', pointer {}]
determiner get_hashmap
type declaration: [struct {}, 'hashmap_value', pointer {}, name {'name': 'get_hashmap'}]
[struct {}, 'hashmap_value', pointer {}, name {'name': 'get_hashmap'}]
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'hashmap', pointer {}]
determiner hashmap
type declaration: [struct {}, 'hashmap', pointer {}, name {'name': 'hashmap'}]
[struct {}, 'hashmap', pointer {}, name {'name': 'hashmap'}]
token comma
token char
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'return'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'return'}, array-constant {'constant': 'hashmap'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'return'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'return'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'return'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'return'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'closecurly'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'return'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'hashmap_value'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'return'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'hashmap_value'}, array-constant {'constant': 'get_hashmap_nested'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'return'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'hashmap_value'}, array-constant {'constant': 'get_hashmap_nested'}, array-constant {'constant': 'struct'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'return'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'hashmap_value'}, array-constant {'constant': 'get_hashmap_nested'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'return'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'hashmap_value'}, array-constant {'constant': 'get_hashmap_nested'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'return'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'hashmap_value'}, array-constant {'constant': 'get_hashmap_nested'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'hashmap'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'return'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'hashmap_value'}, array-constant {'constant': 'get_hashmap_nested'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'hashmap'}]
determiner opensquare
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'return'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'hashmap_value'}, array-constant {'constant': 'get_hashmap_nested'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'char'}]
determiner opensquare
end of array
type declaration: ['char', 'key', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'return'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'hashmap_value'}, array-constant {'constant': 'get_hashmap_nested'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'hashmap'}, array-constant {'constant': 'char'}, array-constant {'constant': 'opensquare'}]
token comma
token char
determiner opensquare
type declaration: ['char', 'subkey', array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', 'subkey', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}]
determiner opensquare
type declaration: ['char', 'subkey', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}]
determiner opensquare
type declaration: ['char', 'subkey', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}]
determiner opensquare
type declaration: ['char', 'subkey', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', 'subkey', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', 'subkey', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}]
determiner opensquare
type declaration: ['char', 'subkey', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'int'}]
determiner opensquare
type declaration: ['char', 'subkey', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'int'}, array-constant {'constant': 'equals'}]
determiner opensquare
type declaration: ['char', 'subkey', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'int'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'asterisk'}]
determiner opensquare
type declaration: ['char', 'subkey', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'int'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', 'subkey', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'int'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'value'}]
determiner opensquare
end of array
type declaration: ['char', 'subkey', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'long'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'MAX_SIZE'}, array-constant {'constant': 'int'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'value'}, array-constant {'constant': 'hsh'}]
token stop
token nested
token semicolon
token return
token get_hashmap
token openbracket
token amper
token hashmaps
token opensquare
token nested
token closesquare
token comma
token subkey
token closebracket
token semicolon
token closecurly
token void
is a pointer ['void', '*']
Found function, return type: ['void', '*', 'clone_benchmark']
token void
is a pointer ['void', '*']
determiner closebracket
type declaration: ['void', '*', 'args', name {'name': 'closebracket'}]
token opencurly
token struct
determiner asterisk
type declaration: [struct {}, 'work_def', pointer {}]
determiner work
type declaration: [struct {}, 'work_def', pointer {}, name {'name': 'work'}]
[struct {}, 'work_def', pointer {}, name {'name': 'work'}]
token equals
token args
token semicolon
token int
determiner equals
type declaration: ['int', 'current', name {'name': 'equals'}]
token 0
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'hashmap', pointer {}]
determiner hashmaps
type declaration: [struct {}, 'hashmap', pointer {}, name {'name': 'hashmaps'}]
[struct {}, 'hashmap', pointer {}, name {'name': 'hashmaps'}]
token equals
token calloc
token openbracket
token MAX_SIZE
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'hashmap', name {'name': 'closebracket'}]
[struct {}, 'hashmap', name {'name': 'closebracket'}]
token closebracket
token semicolon
token printf
token openbracket
token quote
token Using
token percent
token luGB
token for
token test
token stop
token backslash
token n
token quote
token comma
token MAX_SIZE
token asterisk
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'hashmap', name {'name': 'closebracket'}]
[struct {}, 'hashmap', name {'name': 'closebracket'}]
found slash
 
token divide
token 1024
found slash
 
token divide
token 1024
found slash
 
token divide
token 1024
token closebracket
token semicolon
token while
token openbracket
token work
token minus
token greaterthan
token running
token equals
token equals
token 1
token closebracket
token opencurly
token memcpy
token openbracket
token amper
token hashmaps
token opensquare
token current
token plus
token plus
token closesquare
token comma
token work
token minus
token greaterthan
token hashmap
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'hashmap', name {'name': 'closebracket'}]
[struct {}, 'hashmap', name {'name': 'closebracket'}]
token closebracket
token semicolon
token current
token equals
token current
token percent
token MAX_SIZE
token semicolon
token work
token minus
token greaterthan
token count
token plus
token plus
token semicolon
token closecurly
token closecurly
token int
Found function, return type: ['int', 'convert_to_hex']
token char
determiner closebracket
type declaration: ['char', 'c', name {'name': 'closebracket'}]
token opencurly
token if
token openbracket
token c
token greaterthan
token equals
token singlequote
token 0
token singlequote
token amper
token amper
token c
token lessthan
token equals
token singlequote
token 9
token singlequote
token closebracket
token opencurly
token return
token c
token minus
token singlequote
token 0
token singlequote
token semicolon
token closecurly
token else
token if
token openbracket
token c
token greaterthan
token equals
token singlequote
token A
token singlequote
token amper
token amper
token c
token lessthan
token equals
token singlequote
token F
token singlequote
token closebracket
token opencurly
token return
token c
token minus
token singlequote
token A
token singlequote
token plus
token 10
token semicolon
token closecurly
token else
token if
token openbracket
token c
token greaterthan
token equals
token singlequote
token a
token singlequote
token amper
token amper
token c
token lessthan
token equals
token singlequote
token f
token singlequote
token closebracket
token opencurly
token return
token c
token minus
token singlequote
token a
token singlequote
token plus
token 10
token semicolon
token closecurly
token else
token opencurly
token error_at_line
token openbracket
token minus
token 1
token comma
token 0
token comma
token __FILE__
token comma
token __LINE__
token comma
token quote
token illegal
token char
determiner n
type declaration: ['char', 'backslash', name {'name': 'n'}]
token quote
token closebracket
token semicolon
token return
token minus
token 1
token semicolon
token closecurly
token closecurly
found slash
/
token  types

token hash
Found define NUMBER = 1
token hash
Found define STRING = 2
found slash
/
token  ast nodes

token hash
Found define ASSIGNMENT = 0
token hash
Found define REFERENCE = 1
token hash
Found define IF = 2
token hash
Found define METHOD_CALL = 3
token hash
Found define MEMBER_ACCESS = 4
token hash
Found define IDENTIFIER = 5
token hash
Found define ADD = 6
token hash
Found define SUBTRACT = 7
token hash
Found define MULTIPLY = 8
token hash
Found define RETURN = 9
found slash
/
token  assignment nodes

token hash
Found define VARIABLE = 0
token hash
Found define REFERENCE = 1
found slash
/
token  tags

token hash
Found define IS_AST_METADATA = 1
token struct
determiner opencurly
type declaration: [struct {}, 'Parameter', name {'name': 'opencurly'}]
[struct {}, 'Parameter', name {'name': 'opencurly'}]
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'name']
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'type']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'namelength']
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'ANF', name {'name': 'opencurly'}]
[struct {}, 'ANF', name {'name': 'opencurly'}]
token struct
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}, pointer {}]
determiner functions
type declaration: [struct {}, 'Function', pointer {}, pointer {}, name {'name': 'functions'}]
[struct {}, 'Function', pointer {}, pointer {}, name {'name': 'functions'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'NormalForm', pointer {}]
determiner anf
type declaration: [struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
[struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'function_length']
token struct
determiner asterisk
type declaration: [struct {}, 'CodeGenContext', pointer {}]
determiner codegen_context
type declaration: [struct {}, 'CodeGenContext', pointer {}, name {'name': 'codegen_context'}]
[struct {}, 'CodeGenContext', pointer {}, name {'name': 'codegen_context'}]
token semicolon
token long
token long
token heap_start
token semicolon
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'Function', name {'name': 'opencurly'}]
[struct {}, 'Function', name {'name': 'opencurly'}]
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'name']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'id']
token struct
determiner asterisk
type declaration: [struct {}, 'Parameter', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Parameter', pointer {}, pointer {}]
determiner parameters
type declaration: [struct {}, 'Parameter', pointer {}, pointer {}, name {'name': 'parameters'}]
[struct {}, 'Parameter', pointer {}, pointer {}, name {'name': 'parameters'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'parameter_length']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'expression_length']
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner expressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'expressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'expressions'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner exps
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'exps'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'exps'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'StatementSource', pointer {}]
determiner statements
type declaration: [struct {}, 'StatementSource', pointer {}, name {'name': 'statements'}]
[struct {}, 'StatementSource', pointer {}, name {'name': 'statements'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'NormalForm', pointer {}]
determiner anf
type declaration: [struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
[struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
token semicolon
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'code']
token struct
determiner asterisk
type declaration: [struct {}, 'FunctionContext', pointer {}]
determiner context
type declaration: [struct {}, 'FunctionContext', pointer {}, name {'name': 'context'}]
[struct {}, 'FunctionContext', pointer {}, name {'name': 'context'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'compiled']
token struct
determiner asterisk
type declaration: [struct {}, 'Callsite', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Callsite', pointer {}, pointer {}]
determiner callsites
type declaration: [struct {}, 'Callsite', pointer {}, pointer {}, name {'name': 'callsites'}]
[struct {}, 'Callsite', pointer {}, pointer {}, name {'name': 'callsites'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'callsite_length']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'global']
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'Callsite', name {'name': 'opencurly'}]
[struct {}, 'Callsite', name {'name': 'opencurly'}]
token struct
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}]
determiner function
type declaration: [struct {}, 'Function', pointer {}, name {'name': 'function'}]
[struct {}, 'Function', pointer {}, name {'name': 'function'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'FunctionContext', pointer {}]
determiner function_context
type declaration: [struct {}, 'FunctionContext', pointer {}, name {'name': 'function_context'}]
[struct {}, 'FunctionContext', pointer {}, name {'name': 'function_context'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'pc']
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'Expression', name {'name': 'opencurly'}]
[struct {}, 'Expression', name {'name': 'opencurly'}]
token int
determiner semicolon
end of declaration
type declaration: ['int', 'id']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'type']
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner exps
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'exps'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'exps'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'StatementSource', pointer {}]
determiner statements
type declaration: [struct {}, 'StatementSource', pointer {}, name {'name': 'statements'}]
[struct {}, 'StatementSource', pointer {}, name {'name': 'statements'}]
token semicolon
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'stringvalue']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'stringlength']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'numbervalue']
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'symbol']
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'variable']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'variable_length']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'assigned']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'tag']
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'chosen_register']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'token_type']
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'ExpressionSource', name {'name': 'opencurly'}]
[struct {}, 'ExpressionSource', name {'name': 'opencurly'}]
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner expressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'expressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'expressions'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, pointer {}]
determiner current_into
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, pointer {}, name {'name': 'current_into'}]
[struct {}, 'Expression', pointer {}, pointer {}, pointer {}, name {'name': 'current_into'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'expression_length']
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'StatementSource', name {'name': 'opencurly'}]
[struct {}, 'StatementSource', name {'name': 'opencurly'}]
token int
determiner semicolon
end of declaration
type declaration: ['int', 'statements']
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'ParseResult', name {'name': 'opencurly'}]
[struct {}, 'ParseResult', name {'name': 'opencurly'}]
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'last_char']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'pos']
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'program_body']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'end']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'length']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'start']
token struct
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}, pointer {}]
determiner functions
type declaration: [struct {}, 'Function', pointer {}, pointer {}, name {'name': 'functions'}]
[struct {}, 'Function', pointer {}, pointer {}, name {'name': 'functions'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'function_length']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'precedence']
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner exps
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'exps'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'exps'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'StatementSource', pointer {}]
determiner statements
type declaration: [struct {}, 'StatementSource', pointer {}, name {'name': 'statements'}]
[struct {}, 'StatementSource', pointer {}, name {'name': 'statements'}]
token semicolon
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'last_token']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'current_id']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'token_type']
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'NormalForm', name {'name': 'opencurly'}]
[struct {}, 'NormalForm', name {'name': 'opencurly'}]
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner expressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'expressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'expressions'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'count']
token struct
determiner asterisk
type declaration: [struct {}, 'AssignmentPair', pointer {}]
determiner assignment_pair
type declaration: [struct {}, 'AssignmentPair', pointer {}, name {'name': 'assignment_pair'}]
[struct {}, 'AssignmentPair', pointer {}, name {'name': 'assignment_pair'}]
token semicolon
token closecurly
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'CodeGenContext', name {'name': 'opencurly'}]
[struct {}, 'CodeGenContext', name {'name': 'opencurly'}]
token struct
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}, pointer {}]
determiner global_functions
type declaration: [struct {}, 'Function', pointer {}, pointer {}, name {'name': 'global_functions'}]
[struct {}, 'Function', pointer {}, pointer {}, name {'name': 'global_functions'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}, pointer {}]
determiner user_functions
type declaration: [struct {}, 'Function', pointer {}, pointer {}, name {'name': 'user_functions'}]
[struct {}, 'Function', pointer {}, pointer {}, name {'name': 'user_functions'}]
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'function_length']
token int
determiner semicolon
end of declaration
type declaration: ['int', 'global_function_length']
token struct
determiner asterisk
type declaration: [struct {}, 'FunctionContext', pointer {}]
determiner main_function_context
type declaration: [struct {}, 'FunctionContext', pointer {}, name {'name': 'main_function_context'}]
[struct {}, 'FunctionContext', pointer {}, name {'name': 'main_function_context'}]
token semicolon
token long
token long
token heap_start
token semicolon
token closecurly
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'CodeGenContext', pointer {}]
determiner CODEGEN_CONTEXT
type declaration: [struct {}, 'CodeGenContext', pointer {}, name {'name': 'CODEGEN_CONTEXT'}]
[struct {}, 'CodeGenContext', pointer {}, name {'name': 'CODEGEN_CONTEXT'}]
token semicolon
token struct
determiner opencurly
type declaration: [struct {}, 'FunctionContext', name {'name': 'opencurly'}]
[struct {}, 'FunctionContext', name {'name': 'opencurly'}]
token int
determiner semicolon
end of declaration
type declaration: ['int', 'pc']
token struct
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}]
determiner function
type declaration: [struct {}, 'Function', pointer {}, name {'name': 'function'}]
[struct {}, 'Function', pointer {}, name {'name': 'function'}]
token semicolon
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'code']
token closecurly
token semicolon
token hash
Found define BUF_SIZE = 1024
token int
Found function, return type: ['int', 'dump_expressions']
token int
determiner comma
type declaration: ['int', 'count', name {'name': 'comma'}]
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner exps
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'exps'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'exps'}]
token closebracket
token opencurly
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'spaces', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner count
type declaration: ['char', 'closebracket', pointer {}, name {'name': 'count'}]
token plus
token 1
token closebracket
token semicolon
token spaces
token opensquare
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner count
type declaration: ['char', 'closebracket', pointer {}, name {'name': 'count'}]
token closesquare
token equals
token singlequote
token backslash
token 0
token singlequote
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token count
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token spaces
token opensquare
token x
token closesquare
token equals
token singlequote
token singlequote
token semicolon
token closecurly
token int
determiner equals
type declaration: ['int', 'expression_length', name {'name': 'equals'}]
token exps
token minus
token greaterthan
token expression_length
token semicolon
found slash
/
token  printf("Has %d expressions", expression_length);

token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner expressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'expressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'expressions'}]
token equals
token exps
token minus
token greaterthan
token expressions
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token expression_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner expression
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'expression'}]
[struct {}, 'Expression', pointer {}, name {'name': 'expression'}]
token equals
token expressions
token opensquare
token x
token closesquare
token semicolon
token switch
token openbracket
token expression
token minus
token greaterthan
token type
token closebracket
token opencurly
token case
token IDENTIFIER
token colon
token printf
token openbracket
token quote
token percent
token sidentifier
token percent
token s
token percent
token d
token backslash
token n
token quote
token comma
token spaces
token comma
token expression
token minus
token greaterthan
token stringvalue
token comma
token expression
token minus
token greaterthan
token numbervalue
token closebracket
token semicolon
token break
token semicolon
token case
token MEMBER_ACCESS
token colon
token printf
token openbracket
token quote
token percent
token smember
token access
token percent
token s
token percent
token d
token backslash
token n
token quote
token comma
token spaces
token comma
token expression
token minus
token greaterthan
token stringvalue
token comma
token expression
token minus
token greaterthan
token numbervalue
token closebracket
token semicolon
token break
token semicolon
token case
token METHOD_CALL
token colon
token printf
token openbracket
token quote
token percent
token smethod
token call
token percent
token s
token percent
token d
token backslash
token n
token quote
token comma
token spaces
token comma
token expression
token minus
token greaterthan
token stringvalue
token comma
token expression
token minus
token greaterthan
token numbervalue
token closebracket
token semicolon
token break
token semicolon
token case
token ADD
token colon
token printf
token openbracket
token quote
token percent
token sadd
token percent
token s
token percent
token d
token backslash
token n
token quote
token comma
token spaces
token comma
token expression
token minus
token greaterthan
token stringvalue
token comma
token expression
token minus
token greaterthan
token numbervalue
token closebracket
token semicolon
token break
token semicolon
token case
token RETURN
token colon
token printf
token openbracket
token quote
token percent
token sreturn
token percent
token s
token percent
token d
token backslash
token n
token quote
token comma
token spaces
token comma
token expression
token minus
token greaterthan
token stringvalue
token comma
token expression
token minus
token greaterthan
token numbervalue
token closebracket
token semicolon
token break
token semicolon
token case
token SUBTRACT
token colon
token printf
token openbracket
token quote
token percent
token ssubtract
token percent
token s
token percent
token d
token backslash
token n
token quote
token comma
token spaces
token comma
token expression
token minus
token greaterthan
token stringvalue
token comma
token expression
token minus
token greaterthan
token numbervalue
token closebracket
token semicolon
token break
token semicolon
token case
token MULTIPLY
token colon
token printf
token openbracket
token quote
token percent
token smultiply
token percent
token s
token percent
token d
token backslash
token n
token quote
token comma
token spaces
token comma
token expression
token minus
token greaterthan
token stringvalue
token comma
token expression
token minus
token greaterthan
token numbervalue
token closebracket
token semicolon
token break
token semicolon
token closecurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'y', name {'name': 'equals'}]
token 0
token semicolon
token y
token lessthan
token expression
token minus
token greaterthan
token statements
token minus
token greaterthan
token statements
token semicolon
token y
token plus
token plus
token closebracket
token opencurly
found slash
/
token  printf("%d %p\n", y, expression->exps[y]);

token if
token openbracket
token expression
token minus
token greaterthan
token exps
token opensquare
token y
token closesquare
token minus
token greaterthan
token expression_length
token greaterthan
token 0
token closebracket
token opencurly
token dump_expressions
token openbracket
token count
token plus
token 1
token comma
token expression
token minus
token greaterthan
token exps
token opensquare
token y
token closesquare
token closebracket
token semicolon
token closecurly
token closecurly
token closecurly
token closecurly
token char
is a pointer ['char', '*']
Found function, return type: ['char', '*', 'charget']
token struct
determiner asterisk
type declaration: [struct {}, 'ParseResult', pointer {}]
determiner parse_result
type declaration: [struct {}, 'ParseResult', pointer {}, name {'name': 'parse_result'}]
[struct {}, 'ParseResult', pointer {}, name {'name': 'parse_result'}]
token closebracket
token opencurly
token parse_result
token minus
token greaterthan
token start
token equals
token 0
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'last_char', name {'name': 'equals'}]
token malloc
token openbracket
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 2
type declaration: ['char', 'closebracket', pointer {}, name {'name': '2'}]
token closebracket
token closebracket
token semicolon
token memset
token openbracket
token last_char
token comma
token singlequote
token backslash
token 0
token singlequote
token comma
token 2
token closebracket
token semicolon
token last_char
token opensquare
token 0
token closesquare
token equals
token parse_result
token minus
token greaterthan
token program_body
token opensquare
token parse_result
token minus
token greaterthan
token pos
token closesquare
token semicolon
token parse_result
token minus
token greaterthan
token last_char
token equals
token last_char
token semicolon
token if
token openbracket
token parse_result
token minus
token greaterthan
token pos
token plus
token 1
token equals
token equals
token parse_result
token minus
token greaterthan
token length
token closebracket
token opencurly
token parse_result
token minus
token greaterthan
token end
token equals
token 1
token semicolon
token printf
token openbracket
token quote
token end
token early
token backslash
token n
token quote
token closebracket
token semicolon
token return
token last_char
token semicolon
token closecurly
token parse_result
token minus
token greaterthan
token pos
token equals
token parse_result
token minus
token greaterthan
token pos
token plus
token 1
token semicolon
token return
token last_char
token semicolon
token closecurly
token char
is a pointer ['char', '*']
Found function, return type: ['char', '*', '_gettok']
token struct
determiner asterisk
type declaration: [struct {}, 'ParseResult', pointer {}]
determiner parse_result
type declaration: [struct {}, 'ParseResult', pointer {}, name {'name': 'parse_result'}]
[struct {}, 'ParseResult', pointer {}, name {'name': 'parse_result'}]
token comma
token char
is a pointer ['char', '*']
determiner closebracket
type declaration: ['char', '*', 'caller', name {'name': 'closebracket'}]
token opencurly
found slash
/
token  reset whether token is a number or string

token parse_result
token minus
token greaterthan
token token_type
token equals
token 0
token semicolon
token while
token openbracket
token parse_result
token minus
token greaterthan
token start
token pipe
token pipe
token openbracket
token parse_result
token minus
token greaterthan
token end
token equals
token equals
token 0
token amper
token amper
token openbracket
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token quote
token closebracket
token equals
token equals
token 0
token pipe
token pipe
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token backslash
token n
token quote
token closebracket
token equals
token equals
token 0
token closebracket
token closebracket
token closebracket
token opencurly
token printf
token openbracket
token quote
token percent
token s
token Skipping
token whitespace
token backslash
token n
token quote
token comma
token caller
token closebracket
token semicolon
token free
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token closebracket
token semicolon
token parse_result
token minus
token greaterthan
token last_char
token equals
token charget
token openbracket
token parse_result
token closebracket
token semicolon
token closecurly
token if
token openbracket
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token comma
token quote
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token free
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token closebracket
token semicolon
token parse_result
token minus
token greaterthan
token last_char
token equals
token charget
token openbracket
token parse_result
token closebracket
token semicolon
token return
token quote
token comma
token quote
token semicolon
token closecurly
token if
token openbracket
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token plus
token quote
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token free
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token closebracket
token semicolon
token parse_result
token minus
token greaterthan
token last_char
token equals
token charget
token openbracket
token parse_result
token closebracket
token semicolon
token return
token quote
token add
token quote
token semicolon
token closecurly
token if
token openbracket
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token asterisk
token quote
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token free
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token closebracket
token semicolon
token parse_result
token minus
token greaterthan
token last_char
token equals
token charget
token openbracket
token parse_result
token closebracket
token semicolon
token return
token quote
token multiply
token quote
token semicolon
token closecurly
token if
token openbracket
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token minus
token quote
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token free
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token closebracket
token semicolon
token parse_result
token minus
token greaterthan
token last_char
token equals
token charget
token openbracket
token parse_result
token closebracket
token semicolon
token return
token quote
token subtract
token quote
token semicolon
token closecurly
token if
token openbracket
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token openbracket
token quote
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token free
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token closebracket
token semicolon
token parse_result
token minus
token greaterthan
token last_char
token equals
token charget
token openbracket
token parse_result
token closebracket
token semicolon
token return
token quote
token open
token quote
token semicolon
token closecurly
token if
token openbracket
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token opencurly
token quote
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token free
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token closebracket
token semicolon
token parse_result
token minus
token greaterthan
token last_char
token equals
token charget
token openbracket
token parse_result
token closebracket
token semicolon
token return
token quote
token curlyopen
token quote
token semicolon
token closecurly
token if
token openbracket
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token closecurly
token quote
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token free
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token closebracket
token semicolon
token parse_result
token minus
token greaterthan
token last_char
token equals
token charget
token openbracket
token parse_result
token closebracket
token semicolon
token return
token quote
token curlyclose
token quote
token semicolon
token closecurly
token if
token openbracket
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token closebracket
token quote
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token free
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token closebracket
token semicolon
token parse_result
token minus
token greaterthan
token last_char
token equals
token charget
token openbracket
token parse_result
token closebracket
token semicolon
token printf
token openbracket
token quote
token percent
token s
token CLOSE
token TAG
token backslash
token n
token quote
token comma
token caller
token closebracket
token semicolon
token return
token quote
token close
token quote
token semicolon
token closecurly
token if
token openbracket
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token stop
token quote
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token free
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token closebracket
token semicolon
token parse_result
token minus
token greaterthan
token last_char
token equals
token charget
token openbracket
token parse_result
token closebracket
token semicolon
token printf
token openbracket
token quote
token percent
token s
token CLOSE
token TAG
token quote
token comma
token caller
token closebracket
token semicolon
token return
token quote
token member
token quote
token semicolon
token closecurly
token if
token openbracket
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token semicolon
token quote
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token free
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token closebracket
token semicolon
token parse_result
token minus
token greaterthan
token last_char
token equals
token charget
token openbracket
token parse_result
token closebracket
token semicolon
token printf
token openbracket
token quote
token percent
token s
token CLOSE
token expression
token backslash
token n
token quote
token comma
token caller
token closebracket
token semicolon
token return
token quote
token endstatement
token quote
token semicolon
token closecurly
token pcre2_code
token asterisk
token re
token semicolon
token PCRE2_SPTR
token pattern
token semicolon
found slash
*
token  PCRE2_SPTR is a pointer to unsigned code units of *
found slash


token divide
token PCRE2_SPTR
token subject
token semicolon
found slash
*
token  the appropriate width (8, 16, or 32 bits). *
found slash


token divide
token PCRE2_SPTR
token name_table
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'errornumber']
token PCRE2_SIZE
token erroroffset
token semicolon
token PCRE2_SIZE
token asterisk
token ovector
token semicolon
token int
determiner semicolon
end of declaration
type declaration: ['int', 'i']
token size_t
token subject_length
token equals
token 1
token semicolon
found slash
/
token  pcre2_code *pcre2_compile(PCRE2_SPTR pattern, PCRE2_SIZE length, uint32_t options, int *errorcode, PCRE2_SIZE *erroroffset, pcre2_compile_context *ccontext);

token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'regex', name {'name': 'equals'}]
token quote
token caret
token opensquare
token a
token minus
token zA
token minus
token Z0
token minus
token 9
token minus
token _
token closesquare
token plus
token dollar
token quote
token semicolon
token pattern
token equals
token openbracket
token PCRE2_SPTR
token closebracket
token regex
token semicolon
token subject
token equals
token openbracket
token PCRE2_SPTR
token closebracket
token parse_result
token minus
token greaterthan
token last_char
token semicolon
token pcre2_match_data
token asterisk
token match_data
token semicolon
token re
token equals
token pcre2_compile
token openbracket
token pattern
token comma
found slash
*
token  the pattern *
found slash


token divide
token PCRE2_ZERO_TERMINATED
token comma
found slash
*
token  indicates pattern is zero-terminated *
found slash


token divide
token 0
token comma
found slash
*
token  default options *
found slash


token divide
token amper
token errornumber
token comma
found slash
*
token  for error number *
found slash


token divide
token amper
token erroroffset
token comma
found slash
*
token  for error offset *
found slash


token divide
token NULL
token closebracket
token semicolon
found slash
*
token  use default compile context *
found slash


token divide
token match_data
token equals
token pcre2_match_data_create_from_pattern
token openbracket
token re
token comma
token NULL
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'rc', name {'name': 'equals'}]
token pcre2_match
token openbracket
token re
token comma
found slash
*
token  the compiled pattern *
found slash


token divide
token subject
token comma
found slash
*
token  the subject string *
found slash


token divide
token subject_length
token comma
found slash
*
token  the length of the subject *
found slash


token divide
token 0
token comma
found slash
*
token  start at offset 0 in the subject *
found slash


token divide
token 0
token comma
found slash
*
token  default options *
found slash


token divide
token match_data
token comma
found slash
*
token  block for storing the result *
found slash


token divide
token NULL
token closebracket
token semicolon
found slash
*
token  use default match context *
found slash
 
token divide
token if
token openbracket
token rc
token greaterthan
token 0
token closebracket
token opencurly
token int
determiner equals
type declaration: ['int', 'size', name {'name': 'equals'}]
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token plus
token 1
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'identifier', name {'name': 'equals'}]
token malloc
token openbracket
token size
token closebracket
token semicolon
token memset
token openbracket
token identifier
token comma
token singlequote
token backslash
token 0
token singlequote
token comma
token size
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'count', name {'name': 'equals'}]
token 0
token semicolon
found slash
/
token  free(parse_result->last_char); 

found slash
/
token  identifier[count++] = parse_result->last_char[0];

found slash
/
token  parse_result->last_char = charget(parse_result);

token subject
token equals
token openbracket
token PCRE2_SPTR
token closebracket
token parse_result
token minus
token greaterthan
token last_char
token semicolon
found slash
/
token  identifier[count++] = parse_result->last_char[0];

token printf
token openbracket
token quote
token percent
token s
token backslash
token n
token quote
token comma
token identifier
token closebracket
token semicolon
token while
token openbracket
token parse_result
token minus
token greaterthan
token end
token equals
token equals
token 0
token amper
token amper
token openbracket
token rc
token equals
token pcre2_match
token openbracket
token re
token comma
found slash
*
token  the compiled pattern *
found slash


token divide
token subject
token comma
found slash
*
token  the subject string *
found slash


token divide
token subject_length
token comma
found slash
*
token  the length of the subject *
found slash


token divide
token 0
token comma
found slash
*
token  start at offset 0 in the subject *
found slash


token divide
token 0
token comma
found slash
*
token  default options *
found slash


token divide
token match_data
token comma
found slash
*
token  block for storing the result *
found slash


token divide
token NULL
token closebracket
token closebracket
token greaterthan
token 0
token closebracket
token opencurly
found slash
*
token  use default match context *
found slash
 
token divide
token ovector
token equals
token pcre2_get_ovector_pointer
token openbracket
token match_data
token closebracket
token semicolon
found slash
/
token  printf("\n%s Match succeeded at offset %d\n", caller, (int)ovector[0]);   

token for
token openbracket
token i
token equals
token 0
token semicolon
token i
token lessthan
token rc
token semicolon
token i
token plus
token plus
token closebracket
token opencurly
token PCRE2_SPTR
token substring_start
token equals
token subject
token plus
token ovector
token opensquare
token 2
token asterisk
token i
token closesquare
token semicolon
token size_t
token substring_length
token equals
token ovector
token opensquare
token 2
token asterisk
token i
token plus
token 1
token closesquare
token minus
token ovector
token opensquare
token 2
token asterisk
token i
token closesquare
token semicolon
found slash
/
token  printf("%2d: [%.*s]\n", i, (int)substring_length, (char *)substring_start);

token closecurly
token identifier
token opensquare
token count
token plus
token plus
token closesquare
token equals
token parse_result
token minus
token greaterthan
token last_char
token opensquare
token 0
token closesquare
token semicolon
found slash
/
token  printf("%s [%s] Matched pattern for identifier [%s] %s\n", regex, parse_result->last_char, identifier, subject); 

found slash
/
token  free(parse_result->last_char); 

token parse_result
token minus
token greaterthan
token last_char
token equals
token charget
token openbracket
token parse_result
token closebracket
token semicolon
token subject
token equals
token openbracket
token PCRE2_SPTR
token closebracket
token parse_result
token minus
token greaterthan
token last_char
token semicolon
token closecurly
token pcre2_match_data_free
token openbracket
token match_data
token closebracket
token semicolon
found slash
*
token  Release memory used for the match *
found slash


token divide
token printf
token openbracket
token quote
token percent
token d
token rc
token is
token backslash
token n
token quote
token comma
token rc
token closebracket
token semicolon
token if
token openbracket
token parse_result
token minus
token greaterthan
token end
token equals
token equals
token 1
token amper
token amper
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token closebracket
token quote
token closebracket
token exclamation
token equals
token 0
token amper
token amper
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token backslash
token n
token quote
token closebracket
token exclamation
token equals
token 0
token closebracket
token opencurly
token identifier
token opensquare
token count
token plus
token plus
token closesquare
token equals
token parse_result
token minus
token greaterthan
token last_char
token opensquare
token 0
token closesquare
token semicolon
token closecurly
found slash
/
token  when finished looping

found slash
/
token  pcre2_match_data_free(match_data);   /* Release memory used for the match */

token pcre2_code_free
token openbracket
token re
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'is_number', name {'name': 'equals'}]
token 1
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'c', name {'name': 'equals'}]
token 0
token semicolon
token c
token lessthan
token count
token semicolon
token c
token plus
token plus
token closebracket
token opencurly
token if
token openbracket
token isdigit
token openbracket
token identifier
token opensquare
token c
token closesquare
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token is_number
token equals
token 0
token semicolon
token break
token semicolon
token closecurly
token closecurly
token if
token openbracket
token is_number
token equals
token equals
token 1
token closebracket
token opencurly
token parse_result
token minus
token greaterthan
token token_type
token equals
token NUMBER
token semicolon
token closecurly
token else
token opencurly
token parse_result
token minus
token greaterthan
token token_type
token equals
token STRING
token semicolon
token closecurly
token return
token identifier
token semicolon
token closecurly
token if
token openbracket
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token backslash
token quote
token quote
token closebracket
token equals
token equals
token 0
token pipe
token pipe
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token singlequote
token quote
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'quoteregex', name {'name': 'equals'}]
token quote
token opensquare
token caret
token backslash
token quote
token singlequote
token closesquare
token plus
token quote
token semicolon
token printf
token openbracket
token quote
token backslash
token n
token backslash
token ninside
token a
token quote
token backslash
token n
token backslash
token n
token quote
token closebracket
token semicolon
token parse_result
token minus
token greaterthan
token last_char
token equals
token charget
token openbracket
token parse_result
token closebracket
token semicolon
token pattern
token equals
token openbracket
token PCRE2_SPTR
token closebracket
token quoteregex
token semicolon
token subject
token equals
token openbracket
token PCRE2_SPTR
token closebracket
token parse_result
token minus
token greaterthan
token last_char
token semicolon
token re
token equals
token pcre2_compile
token openbracket
token pattern
token comma
found slash
*
token  the pattern *
found slash


token divide
token PCRE2_ZERO_TERMINATED
token comma
found slash
*
token  indicates pattern is zero-terminated *
found slash


token divide
token 0
token comma
found slash
*
token  default options *
found slash


token divide
token amper
token errornumber
token comma
found slash
*
token  for error number *
found slash


token divide
token amper
token erroroffset
token comma
found slash
*
token  for error offset *
found slash


token divide
token NULL
token closebracket
token semicolon
found slash
*
token  use default compile context *
found slash


token divide
token match_data
token equals
token pcre2_match_data_create_from_pattern
token openbracket
token re
token comma
token NULL
token closebracket
token semicolon
token rc
token equals
token pcre2_match
token openbracket
token re
token comma
found slash
*
token  the compiled pattern *
found slash


token divide
token subject
token comma
found slash
*
token  the subject string *
found slash


token divide
token subject_length
token comma
found slash
*
token  the length of the subject *
found slash


token divide
token 0
token comma
found slash
*
token  start at offset 0 in the subject *
found slash


token divide
token 0
token comma
found slash
*
token  default options *
found slash


token divide
token match_data
token comma
found slash
*
token  block for storing the result *
found slash


token divide
token NULL
token closebracket
token semicolon
found slash
*
token  use default match context *
found slash
 
token divide
token if
token openbracket
token rc
token greaterthan
token 0
token closebracket
token opencurly
token int
determiner equals
type declaration: ['int', 'size', name {'name': 'equals'}]
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token plus
token 1
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'identifier', name {'name': 'equals'}]
token malloc
token openbracket
token size
token closebracket
token semicolon
token memset
token openbracket
token identifier
token comma
token singlequote
token backslash
token 0
token singlequote
token comma
token size
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'count', name {'name': 'equals'}]
token 0
token semicolon
found slash
/
token  free(parse_result->last_char); 

found slash
/
token  identifier[count++] = parse_result->last_char[0];

found slash
/
token  parse_result->last_char = charget(parse_result);

token subject
token equals
token openbracket
token PCRE2_SPTR
token closebracket
token parse_result
token minus
token greaterthan
token last_char
token semicolon
found slash
/
token  identifier[count++] = parse_result->last_char[0];

token printf
token openbracket
token quote
token percent
token s
token backslash
token n
token quote
token comma
token identifier
token closebracket
token semicolon
token pcre2_match_data_free
token openbracket
token match_data
token closebracket
token semicolon
found slash
*
token  Release memory used for the match *
found slash


token divide
token while
token openbracket
token parse_result
token minus
token greaterthan
token end
token equals
token equals
token 0
token amper
token amper
token openbracket
token rc
token equals
token pcre2_match
token openbracket
token re
token comma
found slash
*
token  the compiled pattern *
found slash


token divide
token subject
token comma
found slash
*
token  the subject string *
found slash


token divide
token subject_length
token comma
found slash
*
token  the length of the subject *
found slash


token divide
token 0
token comma
found slash
*
token  start at offset 0 in the subject *
found slash


token divide
token 0
token comma
found slash
*
token  default options *
found slash


token divide
token match_data
token comma
found slash
*
token  block for storing the result *
found slash


token divide
token NULL
token closebracket
token closebracket
token greaterthan
token 0
token closebracket
token opencurly
found slash
*
token  use default match context *
found slash
 
token divide
token ovector
token equals
token pcre2_get_ovector_pointer
token openbracket
token match_data
token closebracket
token semicolon
found slash
/
token  printf("\n%s Match succeeded at offset %d\n", caller, (int)ovector[0]);   

token for
token openbracket
token i
token equals
token 0
token semicolon
token i
token lessthan
token rc
token semicolon
token i
token plus
token plus
token closebracket
token opencurly
token PCRE2_SPTR
token substring_start
token equals
token subject
token plus
token ovector
token opensquare
token 2
token asterisk
token i
token closesquare
token semicolon
token size_t
token substring_length
token equals
token ovector
token opensquare
token 2
token asterisk
token i
token plus
token 1
token closesquare
token minus
token ovector
token opensquare
token 2
token asterisk
token i
token closesquare
token semicolon
found slash
/
token  printf("%2d: [%.*s]\n", i, (int)substring_length, (char *)substring_start);

token closecurly
token identifier
token opensquare
token count
token plus
token plus
token closesquare
token equals
token parse_result
token minus
token greaterthan
token last_char
token opensquare
token 0
token closesquare
token semicolon
found slash
/
token  printf("quote %s %s [%s] Matched pattern for identifier [%s] %s\n", caller, pattern, parse_result->last_char, identifier, subject); 

found slash
/
token  free(parse_result->last_char); 

token parse_result
token minus
token greaterthan
token last_char
token equals
token charget
token openbracket
token parse_result
token closebracket
token semicolon
token subject
token equals
token openbracket
token PCRE2_SPTR
token closebracket
token parse_result
token minus
token greaterthan
token last_char
token semicolon
token closecurly
token printf
token openbracket
token quote
token percent
token d
token rc
token is
token backslash
token n
token quote
token comma
token rc
token closebracket
token semicolon
token if
token openbracket
token parse_result
token minus
token greaterthan
token end
token equals
token equals
token 1
token amper
token amper
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token closebracket
token quote
token closebracket
token exclamation
token equals
token 0
token amper
token amper
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_char
token comma
token quote
token backslash
token n
token quote
token closebracket
token exclamation
token equals
token 0
token closebracket
token opencurly
token identifier
token opensquare
token count
token plus
token plus
token closesquare
token equals
token parse_result
token minus
token greaterthan
token last_char
token opensquare
token 0
token closesquare
token semicolon
token closecurly
found slash
/
token  when finished looping

token parse_result
token minus
token greaterthan
token last_char
token equals
token charget
token openbracket
token parse_result
token closebracket
token semicolon
found slash
/
token  pcre2_match_data_free(match_data);   /* Release memory used for the match */

token pcre2_code_free
token openbracket
token re
token closebracket
token semicolon
token return
token identifier
token semicolon
token closecurly
token closecurly
found slash
*
token 
  if re.match("[a-zA-Z0-9\.\_\-]+", self.last_char):
      identifier = ""
      while self.end == False and re.match("[a-zA-Z0-9\.\_\-]+", self.last_char):
          
          identifier = identifier + self.last_char
          self.last_char = self.charget()
      
      if self.end and self.last_char != ")" and self.last_char != "\n":
          identifier += self.last_char
      
      return identifier.lower() 
  *
found slash


token divide
token printf
token openbracket
token quote
token Unknown
token char
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}]
determiner opensquare
close comma
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}, array-constant {'constant': 'parse_result'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'plus'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'type'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'type'}, array-constant {'constant': 'type'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'type'}, array-constant {'constant': 'type'}, array-constant {'constant': '_add'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'type'}, array-constant {'constant': 'type'}, array-constant {'constant': '_add'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'type'}, array-constant {'constant': 'type'}, array-constant {'constant': '_add'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'type'}, array-constant {'constant': 'type'}, array-constant {'constant': '_add'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'type'}, array-constant {'constant': 'type'}, array-constant {'constant': '_add'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'type'}, array-constant {'constant': 'type'}, array-constant {'constant': '_add'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'type'}, array-constant {'constant': 'type'}, array-constant {'constant': '_add'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': '_newstatementsource3'}]
determiner opensquare
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'type'}, array-constant {'constant': 'type'}, array-constant {'constant': '_add'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': '_newstatements2'}]
determiner opensquare
close closesquare
end of array
type declaration: ['char', 'colon', array-constant {'constant': 'percent'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_char'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'return'}, array-constant {'constant': 'unknown'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'char'}, array-constant {'constant': 'gettok'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'token'}, array-constant {'constant': '_gettok'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'caller'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'last_token'}, array-constant {'constant': 'token'}, array-constant {'constant': 'return'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'int'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'ParseResult'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'ExpressionSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'StatementSource'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expressions'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'expression_length'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'current_into'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'Expression'}, array-constant {'constant': '_add'}, array-constant {'constant': 'calloc'}, array {'size': '1'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'id'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'type'}, array-constant {'constant': 'type'}, array-constant {'constant': '_add'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': '_newstatementsource3'}, array-constant {'constant': '_newstatements2'}, array {'size': '0'}]
token equals
token _newexps
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner _newroot
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': '_newroot'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': '_newroot'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token equals
token _newroot
token semicolon
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token equals
token 0
token semicolon
token asterisk
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token current_into
token equals
token _newroot
token semicolon
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token plus
token plus
token closesquare
token equals
token _add
token semicolon
token closecurly
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner parse_expressions
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'parse_expressions'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'parse_expressions'}]
token openbracket
token char
is a pointer ['char', '*']
determiner comma
type declaration: ['char', '*', 'caller', name {'name': 'comma'}]
token struct
determiner asterisk
type declaration: [struct {}, 'StatementSource', pointer {}]
determiner statementsource
type declaration: [struct {}, 'StatementSource', pointer {}, name {'name': 'statementsource'}]
[struct {}, 'StatementSource', pointer {}, name {'name': 'statementsource'}]
token comma
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner statements
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'statements'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'statements'}]
token comma
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner head
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'head'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'head'}]
token comma
token struct
determiner asterisk
type declaration: [struct {}, 'ParseResult', pointer {}]
determiner parse_result
type declaration: [struct {}, 'ParseResult', pointer {}, name {'name': 'parse_result'}]
[struct {}, 'ParseResult', pointer {}, name {'name': 'parse_result'}]
token comma
token int
determiner comma
type declaration: ['int', 'usetokenstop', name {'name': 'comma'}]
token char
is a pointer ['char', '*']
determiner closebracket
type declaration: ['char', '*', 'tokenstop', name {'name': 'closebracket'}]
token opencurly
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'token']
found slash
*
token 
add 193486030
subtract 7572940974490733
multiply 7572685654880005

  *
found slash


token divide
token while
token openbracket
token openbracket
token token
token equals
token gettok
token openbracket
token parse_result
token comma
token quote
token functionbodyitem
token quote
token closebracket
token closebracket
token amper
token amper
token parse_result
token minus
token greaterthan
token end
token equals
token equals
token 0
token amper
token amper
token strcmp
token openbracket
token token
token comma
token quote
token curlyclose
token quote
token closebracket
token exclamation
token equals
token 0
token amper
token amper
token openbracket
token usetokenstop
token equals
token equals
token 0
token pipe
token pipe
token openbracket
token usetokenstop
token equals
token equals
token 1
token amper
token amper
token strcmp
token openbracket
token token
token comma
token tokenstop
token closebracket
token exclamation
token equals
token 0
token closebracket
token closebracket
token closebracket
token opencurly
token unsigned
token long
token hashv
token equals
token hash
token token
token closebracket
token semicolon
token printf
token openbracket
token quote
token Hash
token for
token token
token percent
token s
token is
token percent
token ld
token backslash
token n
token quote
token comma
token token
token comma
token hashv
token closebracket
token semicolon
token switch
token openbracket
token hashv
token closebracket
token opencurly
token case
token 6953974653989
token colon
found slash
/
token  case return 

found slash
/
token  subsume(statements, statementsource, RETURN, parse_result);

token printf
token openbracket
token quote
token percent
token s
token Return
token statement
token backslash
token n
token quote
token comma
token caller
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner _newline3
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': '_newline3'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': '_newline3'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner _emptyline3
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': '_emptyline3'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': '_emptyline3'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner _empty5
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': '_empty5'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': '_empty5'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner _empty6
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': '_empty6'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': '_empty6'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner _new_expressions3
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': '_new_expressions3'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': '_new_expressions3'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner _returnexpressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': '_returnexpressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': '_returnexpressions'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner _exprs2
type declaration: [struct {}, 'Expression', pointer {}, name {'name': '_exprs2'}]
[struct {}, 'Expression', pointer {}, name {'name': '_exprs2'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Expression', name {'name': 'closebracket'}]
[struct {}, 'Expression', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'StatementSource', pointer {}]
determiner _newstatementsource
type declaration: [struct {}, 'StatementSource', pointer {}, name {'name': '_newstatementsource'}]
[struct {}, 'StatementSource', pointer {}, name {'name': '_newstatementsource'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'StatementSource', name {'name': 'closebracket'}]
[struct {}, 'StatementSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'StatementSource', pointer {}]
determiner _newstatementsource2
type declaration: [struct {}, 'StatementSource', pointer {}, name {'name': '_newstatementsource2'}]
[struct {}, 'StatementSource', pointer {}, name {'name': '_newstatementsource2'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'StatementSource', name {'name': 'closebracket'}]
[struct {}, 'StatementSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner _return
type declaration: [struct {}, 'Expression', pointer {}, name {'name': '_return'}]
[struct {}, 'Expression', pointer {}, name {'name': '_return'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Expression', name {'name': 'closebracket'}]
[struct {}, 'Expression', name {'name': 'closebracket'}]
token closebracket
token semicolon
token printf
token openbracket
token quote
token percent
token p
token backslash
token n
token quote
token comma
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token closebracket
token semicolon
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token plus
token plus
token closesquare
token equals
token _return
token semicolon
token statementsource
token minus
token greaterthan
token statements
token plus
token plus
token semicolon
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token equals
token _newline3
token semicolon
token statementsource
token equals
token _newstatementsource2
token semicolon
token _return
token minus
token greaterthan
token id
token equals
token parse_result
token minus
token greaterthan
token current_id
token plus
token plus
token semicolon
token _return
token minus
token greaterthan
token type
token equals
token RETURN
token semicolon
token _return
token minus
token greaterthan
token symbol
token equals
token quote
token openbracket
token ret
token closebracket
token quote
token semicolon
token _return
token minus
token greaterthan
token exps
token equals
token _empty6
token semicolon
token _return
token minus
token greaterthan
token statements
token equals
token _newstatementsource2
token semicolon
token _newstatementsource
token minus
token greaterthan
token statements
token equals
token 1
token semicolon
token _newstatementsource2
token minus
token greaterthan
token statements
token equals
token 1
token semicolon
token _empty5
token opensquare
token 0
token closesquare
token equals
token _newline3
token semicolon
token statements
token equals
token _empty6
token semicolon
token _newline3
token minus
token greaterthan
token expression_length
token equals
token 0
token semicolon
token _newline3
token minus
token greaterthan
token expressions
token equals
token _new_expressions3
token semicolon
token _newline3
token minus
token greaterthan
token current_into
token equals
token amper
token _new_expressions3
token semicolon
token _empty6
token opensquare
token 0
token closesquare
token equals
token _emptyline3
token semicolon
token _emptyline3
token minus
token greaterthan
token expression_length
token equals
token 0
token semicolon
token _emptyline3
token minus
token greaterthan
token expressions
token equals
token _returnexpressions
token semicolon
token _emptyline3
token minus
token greaterthan
token current_into
token equals
token amper
token _returnexpressions
token semicolon
token break
token semicolon
token case
token 193486030
token colon
found slash
/
token  case add

token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner _newstatements2
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': '_newstatements2'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': '_newstatements2'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner _newexps
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': '_newexps'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': '_newexps'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'StatementSource', pointer {}]
determiner _newstatementsource3
type declaration: [struct {}, 'StatementSource', pointer {}, name {'name': '_newstatementsource3'}]
[struct {}, 'StatementSource', pointer {}, name {'name': '_newstatementsource3'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'StatementSource', name {'name': 'closebracket'}]
[struct {}, 'StatementSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token _newstatementsource3
token minus
token greaterthan
token statements
token equals
token 1
token semicolon
token _newexps
token minus
token greaterthan
token expressions
token equals
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token semicolon
token _newexps
token minus
token greaterthan
token expression_length
token equals
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token semicolon
token _newexps
token minus
token greaterthan
token current_into
token equals
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token current_into
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner _add
type declaration: [struct {}, 'Expression', pointer {}, name {'name': '_add'}]
[struct {}, 'Expression', pointer {}, name {'name': '_add'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Expression', name {'name': 'closebracket'}]
[struct {}, 'Expression', name {'name': 'closebracket'}]
token closebracket
token semicolon
token _add
token minus
token greaterthan
token id
token equals
token parse_result
token minus
token greaterthan
token current_id
token plus
token plus
token semicolon
token _add
token minus
token greaterthan
token type
token equals
token ADD
token semicolon
token _add
token minus
token greaterthan
token symbol
token equals
token quote
token plus
token quote
token semicolon
token _add
token minus
token greaterthan
token exps
token equals
token _newstatements2
token semicolon
token _add
token minus
token greaterthan
token statements
token equals
token _newstatementsource3
token semicolon
token _newstatements2
token opensquare
token 0
token closesquare
token equals
token _newexps
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner _newroot
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': '_newroot'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': '_newroot'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token equals
token _newroot
token semicolon
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token equals
token 0
token semicolon
token asterisk
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token current_into
token equals
token _newroot
token semicolon
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token plus
token plus
token closesquare
token equals
token _add
token semicolon
token statements
token equals
token _newstatements2
token semicolon
token statementsource
token equals
token _newstatementsource3
token semicolon
token break
token semicolon
token case
token 6953778704349
token colon
found slash
/
token  case . case member

token printf
token openbracket
token quote
token Is
token an
token member
token access
token operator
token backslash
token n
token quote
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner newstatements2
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'newstatements2'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'newstatements2'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner newexps
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'newexps'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'newexps'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'StatementSource', pointer {}]
determiner newstatementsource3
type declaration: [struct {}, 'StatementSource', pointer {}, name {'name': 'newstatementsource3'}]
[struct {}, 'StatementSource', pointer {}, name {'name': 'newstatementsource3'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'StatementSource', name {'name': 'closebracket'}]
[struct {}, 'StatementSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token newstatementsource3
token minus
token greaterthan
token statements
token equals
token 1
token semicolon
token newexps
token minus
token greaterthan
token expressions
token equals
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token semicolon
token newexps
token minus
token greaterthan
token expression_length
token equals
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token semicolon
token newexps
token minus
token greaterthan
token current_into
token equals
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token current_into
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner member
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'member'}]
[struct {}, 'Expression', pointer {}, name {'name': 'member'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Expression', name {'name': 'closebracket'}]
[struct {}, 'Expression', name {'name': 'closebracket'}]
token closebracket
token semicolon
token member
token minus
token greaterthan
token id
token equals
token parse_result
token minus
token greaterthan
token current_id
token plus
token plus
token semicolon
token member
token minus
token greaterthan
token type
token equals
token MEMBER_ACCESS
token semicolon
token member
token minus
token greaterthan
token symbol
token equals
token quote
token stop
token quote
token semicolon
token member
token minus
token greaterthan
token exps
token equals
token newstatements2
token semicolon
token member
token minus
token greaterthan
token statements
token equals
token newstatementsource3
token semicolon
token newstatements2
token opensquare
token 0
token closesquare
token equals
token newexps
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner newroot
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'newroot'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'newroot'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token equals
token newroot
token semicolon
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token equals
token 0
token semicolon
token asterisk
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token current_into
token equals
token newroot
token semicolon
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token plus
token plus
token closesquare
token equals
token member
token semicolon
token break
token semicolon
token case
token 210708961883
token colon
found slash
/
token  case ) case close  parameterlistend

token printf
token openbracket
token quote
token percent
token s
token Close
token bracket
token backslash
token n
token quote
token comma
token caller
token closebracket
token semicolon
token break
token semicolon
token case
token minus
token 3372849529167478127
token colon
found slash
/
token  case ; case semicolon

token printf
token openbracket
token quote
token percent
token s
token End
token of
token statement
token backslash
token n
token quote
token comma
token caller
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner _newline2
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': '_newline2'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': '_newline2'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner _emptyline2
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': '_emptyline2'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': '_emptyline2'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner _empty4
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': '_empty4'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': '_empty4'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner _new_expressions2
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': '_new_expressions2'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': '_new_expressions2'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner _exprs
type declaration: [struct {}, 'Expression', pointer {}, name {'name': '_exprs'}]
[struct {}, 'Expression', pointer {}, name {'name': '_exprs'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Expression', name {'name': 'closebracket'}]
[struct {}, 'Expression', name {'name': 'closebracket'}]
token closebracket
token semicolon
token statementsource
token minus
token greaterthan
token statements
token plus
token plus
token semicolon
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token equals
token _newline2
token semicolon
token _newline2
token minus
token greaterthan
token expression_length
token equals
token 0
token semicolon
token _newline2
token minus
token greaterthan
token expressions
token equals
token _new_expressions2
token semicolon
token _newline2
token minus
token greaterthan
token current_into
token equals
token amper
token _new_expressions2
token semicolon
token break
token semicolon
token case
token 6385555319
token colon
found slash
/
token  case ( case open

token printf
token openbracket
token quote
token open
token bracket
token backslash
token n
token quote
token closebracket
token semicolon
token printf
token openbracket
token quote
token OWNER
token percent
token d
token backslash
token n
token quote
token comma
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token minus
token 1
token closebracket
token semicolon
token dump_expressions
token openbracket
token 1
token comma
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner owner
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'owner'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'owner'}]
token equals
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token semicolon
token int
determiner equals
type declaration: ['int', 'owner_size', name {'name': 'equals'}]
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, pointer {}]
determiner owner_into
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, pointer {}, name {'name': 'owner_into'}]
[struct {}, 'Expression', pointer {}, pointer {}, pointer {}, name {'name': 'owner_into'}]
token equals
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token current_into
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner _newstatements
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': '_newstatements'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': '_newstatements'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner empty
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'empty'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'empty'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner method_call_expressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'method_call_expressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'method_call_expressions'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token method_call_expressions
token opensquare
token 0
token closesquare
token equals
token owner
token opensquare
token owner_size
token minus
token 1
token closesquare
token semicolon
found slash
/
token  the identifier of a method call is metadata and doesn't need to be evaluated

token method_call_expressions
token opensquare
token 0
token closesquare
token minus
token greaterthan
token tag
token equals
token IS_AST_METADATA
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner expression_exps
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'expression_exps'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'expression_exps'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'StatementSource', pointer {}]
determiner newstatementsource2
type declaration: [struct {}, 'StatementSource', pointer {}, name {'name': 'newstatementsource2'}]
[struct {}, 'StatementSource', pointer {}, name {'name': 'newstatementsource2'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'StatementSource', name {'name': 'closebracket'}]
[struct {}, 'StatementSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
found slash
/
token  struct Expression ** expressions = calloc(100, sizeof(struct Expression*)); 

token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner method_call
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'method_call'}]
[struct {}, 'Expression', pointer {}, name {'name': 'method_call'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Expression', name {'name': 'closebracket'}]
[struct {}, 'Expression', name {'name': 'closebracket'}]
token closebracket
token semicolon
token owner
token opensquare
token owner_size
token minus
token 1
token closesquare
token equals
token method_call
token semicolon
found slash
/
token  statements[statementsource->statements - 1]->expression_length = 1;

token method_call
token minus
token greaterthan
token id
token equals
token parse_result
token minus
token greaterthan
token current_id
token plus
token plus
token semicolon
token method_call
token minus
token greaterthan
token type
token equals
token METHOD_CALL
token semicolon
token method_call
token minus
token greaterthan
token stringvalue
token equals
token quote
token method
token quote
token semicolon
token method_call
token minus
token greaterthan
token exps
token equals
token _newstatements
token semicolon
token method_call
token minus
token greaterthan
token statements
token equals
token newstatementsource2
token semicolon
token newstatementsource2
token minus
token greaterthan
token statements
token equals
token 1
token semicolon
token _newstatements
token opensquare
token 0
token closesquare
token equals
token expression_exps
token semicolon
token method_call
token minus
token greaterthan
token exps
token opensquare
token newstatementsource2
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token equals
token 1
token semicolon
token method_call
token minus
token greaterthan
token exps
token opensquare
token newstatementsource2
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token equals
token method_call_expressions
token semicolon
token expression_exps
token minus
token greaterthan
token current_into
token equals
token owner_into
token semicolon
token printf
token openbracket
token quote
token expression
token location
token percent
token d
token percent
token p
token backslash
token n
token quote
token comma
token method_call
token minus
token greaterthan
token exps
token opensquare
token newstatementsource2
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token comma
token method_call
token minus
token greaterthan
token exps
token opensquare
token newstatementsource2
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token method_call
token minus
token greaterthan
token exps
token opensquare
token newstatementsource2
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token minus
token 1
token closesquare
token closebracket
token semicolon
token dump_expressions
token openbracket
token 1
token comma
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'tokenstop', name {'name': 'equals'}]
token quote
token close
token quote
token semicolon
token while
token openbracket
token parse_result
token minus
token greaterthan
token end
token equals
token equals
token 0
token amper
token amper
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_token
token comma
token quote
token close
token quote
token closebracket
token exclamation
token equals
token 0
token closebracket
token opencurly
token printf
token openbracket
token quote
token Parsing
token subexpression
token backslash
token n
token quote
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'before', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 2
type declaration: ['char', 'closebracket', pointer {}, name {'name': '2'}]
token closebracket
token semicolon
token parse_expressions
token openbracket
token quote
token exprparse
token quote
token comma
token newstatementsource2
token comma
token _newstatements
token comma
token head
token comma
token parse_result
token comma
token 1
token comma
token tokenstop
token closebracket
token semicolon
token memcpy
token openbracket
token before
token comma
token parse_result
token minus
token greaterthan
token last_char
token comma
token 2
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'pos', name {'name': 'equals'}]
token parse_result
token minus
token greaterthan
token pos
token semicolon
token if
token openbracket
token strcmp
token openbracket
token parse_result
token minus
token greaterthan
token last_token
token comma
token quote
token close
token quote
token closebracket
token exclamation
token equals
token 0
found slash
*
token && strcmp(gettok(parse_result, "commacheck"), "comma") != 0 *
found slash
)
token divide
token closebracket
token opencurly
found slash
/
token  free(parse_result->last_char);

token parse_result
token minus
token greaterthan
token last_char
token equals
token before
token semicolon
token parse_result
token minus
token greaterthan
token pos
token equals
token pos
token semicolon
token closecurly
token else
token opencurly
found slash
*
token if (strcmp(parse_result->last_token, "comma") == 0) {
              parse_result->pos = parse_result->pos + 1;
            }*
found slash


token divide
found slash
/
token  parse_result->pos = parse_result->pos + 1;

token closecurly
token closecurly
token break
token semicolon
token case
token 210709067314
token colon
found slash
/
token  case , case comma

token printf
token openbracket
token quote
token percent
token s
token Comma
token encountered
token comma
token creating
token new
token statement
token backslash
token n
token quote
token comma
token caller
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner newline2
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'newline2'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'newline2'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner emptyline2
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'emptyline2'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'emptyline2'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner empty4
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'empty4'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'empty4'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner new_expressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'new_expressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'new_expressions'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner exprs
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'exprs'}]
[struct {}, 'Expression', pointer {}, name {'name': 'exprs'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Expression', name {'name': 'closebracket'}]
[struct {}, 'Expression', name {'name': 'closebracket'}]
token closebracket
token semicolon
token statementsource
token minus
token greaterthan
token statements
token plus
token plus
token semicolon
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token equals
token newline2
token semicolon
token newline2
token minus
token greaterthan
token expression_length
token equals
token 0
token semicolon
token newline2
token minus
token greaterthan
token expressions
token equals
token new_expressions
token semicolon
token newline2
token minus
token greaterthan
token current_into
token equals
token amper
token new_expressions
token semicolon
token break
token semicolon
token default
token colon
found slash
/
token  identifier 

token printf
token openbracket
token quote
token percent
token s
token parseexpression
token Is
token an
token identifier
token percent
token s
token backslash
token n
token quote
token comma
token caller
token comma
token token
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner identifier
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'identifier'}]
[struct {}, 'Expression', pointer {}, name {'name': 'identifier'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Expression', name {'name': 'closebracket'}]
[struct {}, 'Expression', name {'name': 'closebracket'}]
token closebracket
token semicolon
token identifier
token minus
token greaterthan
token type
token equals
token IDENTIFIER
token semicolon
token identifier
token minus
token greaterthan
token stringvalue
token equals
token token
token semicolon
token identifier
token minus
token greaterthan
token token_type
token equals
token parse_result
token minus
token greaterthan
token token_type
token semicolon
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'first_non_number']
token if
token openbracket
token parse_result
token minus
token greaterthan
token token_type
token equals
token equals
token NUMBER
token closebracket
token opencurly
token identifier
token minus
token greaterthan
token numbervalue
token equals
token strtol
token openbracket
token token
token comma
token amper
token first_non_number
token comma
token 10
token closebracket
token semicolon
token closecurly
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner newstatements
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'newstatements'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'newstatements'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner identifierexps
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'identifierexps'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'identifierexps'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'StatementSource', pointer {}]
determiner newstatementsource
type declaration: [struct {}, 'StatementSource', pointer {}, name {'name': 'newstatementsource'}]
[struct {}, 'StatementSource', pointer {}, name {'name': 'newstatementsource'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'StatementSource', name {'name': 'closebracket'}]
[struct {}, 'StatementSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner identifierexpressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'identifierexpressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'identifierexpressions'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token identifier
token minus
token greaterthan
token id
token equals
token parse_result
token minus
token greaterthan
token current_id
token plus
token plus
token semicolon
token identifier
token minus
token greaterthan
token exps
token equals
token newstatements
token semicolon
token identifier
token minus
token greaterthan
token statements
token equals
token newstatementsource
token semicolon
token identifier
token minus
token greaterthan
token symbol
token equals
token quote
token caret
token quote
token semicolon
token newstatementsource
token minus
token greaterthan
token statements
token equals
token 1
token semicolon
token newstatements
token opensquare
token 0
token closesquare
token equals
token identifierexps
token semicolon
token printf
token openbracket
token quote
token identifier
token expression
token percent
token p
token backslash
token n
token quote
token comma
token identifier
token minus
token greaterthan
token exps
token opensquare
token newstatementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token closebracket
token semicolon
token identifier
token minus
token greaterthan
token exps
token opensquare
token newstatementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token equals
token 0
token semicolon
token identifier
token minus
token greaterthan
token exps
token opensquare
token newstatementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token equals
token identifierexpressions
token semicolon
token printf
token openbracket
token quote
token statements
token percent
token p
token backslash
token n
token quote
token comma
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'new_position', name {'name': 'equals'}]
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token semicolon
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token new_position
token closesquare
token equals
token identifier
token semicolon
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token plus
token plus
token semicolon
token printf
token openbracket
token quote
token expression
token location
token percent
token d
token percent
token p
token backslash
token n
token quote
token comma
token new_position
token comma
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token new_position
token closesquare
token closebracket
token semicolon
token dump_expressions
token openbracket
token 1
token comma
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token closebracket
token semicolon
token break
token semicolon
token closecurly
token closecurly
token return
token statements
token semicolon
token closecurly
token struct
determiner asterisk
type declaration: [struct {}, 'ParseResult', pointer {}]
determiner continue_parse
type declaration: [struct {}, 'ParseResult', pointer {}, name {'name': 'continue_parse'}]
[struct {}, 'ParseResult', pointer {}, name {'name': 'continue_parse'}]
token openbracket
token char
is a pointer ['char', '*']
determiner comma
type declaration: ['char', '*', 'caller', name {'name': 'comma'}]
token struct
determiner asterisk
type declaration: [struct {}, 'StatementSource', pointer {}]
determiner statementsource
type declaration: [struct {}, 'StatementSource', pointer {}, name {'name': 'statementsource'}]
[struct {}, 'StatementSource', pointer {}, name {'name': 'statementsource'}]
token comma
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner statements
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'statements'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'statements'}]
token comma
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner head
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'head'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'head'}]
token comma
token struct
determiner asterisk
type declaration: [struct {}, 'ParseResult', pointer {}]
determiner parse_result
type declaration: [struct {}, 'ParseResult', pointer {}, name {'name': 'parse_result'}]
[struct {}, 'ParseResult', pointer {}, name {'name': 'parse_result'}]
token closebracket
token opencurly
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner expressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'expressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'expressions'}]
token semicolon
token printf
token openbracket
token quote
token Getting
token token
token backslash
token n
token quote
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'token', name {'name': 'equals'}]
token gettok
token openbracket
token parse_result
token comma
token quote
token parsebegin
token quote
token closebracket
token semicolon
token printf
token openbracket
token quote
token percent
token s
token quote
token comma
token token
token closebracket
token semicolon
token switch
token openbracket
token hash
token token
token closebracket
token closebracket
token opencurly
token case
token 7572387384277067
token colon
found slash
/
token  case function

token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'function_name', name {'name': 'equals'}]
token gettok
token openbracket
token parse_result
token comma
token quote
token functionbodybegin
token quote
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}]
determiner function
type declaration: [struct {}, 'Function', pointer {}, name {'name': 'function'}]
[struct {}, 'Function', pointer {}, name {'name': 'function'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Function', name {'name': 'closebracket'}]
[struct {}, 'Function', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Callsite', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Callsite', pointer {}, pointer {}]
determiner callsites
type declaration: [struct {}, 'Callsite', pointer {}, pointer {}, name {'name': 'callsites'}]
[struct {}, 'Callsite', pointer {}, pointer {}, name {'name': 'callsites'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Callsite', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Callsite', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Callsite', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token function
token minus
token greaterthan
token callsites
token equals
token callsites
token semicolon
token function
token minus
token greaterthan
token parameter_length
token equals
token 0
token semicolon
token parse_result
token minus
token greaterthan
token functions
token opensquare
token parse_result
token minus
token greaterthan
token function_length
token closesquare
token equals
token function
token semicolon
token parse_result
token minus
token greaterthan
token function_length
token plus
token plus
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Parameter', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Parameter', pointer {}, pointer {}]
determiner parameters
type declaration: [struct {}, 'Parameter', pointer {}, pointer {}, name {'name': 'parameters'}]
[struct {}, 'Parameter', pointer {}, pointer {}, name {'name': 'parameters'}]
token equals
token calloc
token openbracket
token 10
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Parameter', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Parameter', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Parameter', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token function
token minus
token greaterthan
token parameters
token equals
token parameters
token semicolon
token function
token minus
token greaterthan
token name
token equals
token function_name
token semicolon
token printf
token openbracket
token quote
token Is
token a
token function
token percent
token s
token backslash
token n
token quote
token comma
token function_name
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'open', name {'name': 'equals'}]
token gettok
token openbracket
token parse_result
token comma
token quote
token expectfuncopen
token quote
token closebracket
token semicolon
token if
token openbracket
token strcmp
token openbracket
token open
token comma
token quote
token open
token quote
token closebracket
token exclamation
token equals
token 0
token closebracket
token opencurly
token printf
token openbracket
token quote
token Error
token expected
token parameter
token list
token quote
token closebracket
token semicolon
token closecurly
token printf
token openbracket
token quote
token percent
token s
token quote
token comma
token open
token closebracket
token semicolon
token while
token openbracket
token openbracket
token token
token equals
token gettok
token openbracket
token parse_result
token comma
token quote
token loopparameterlist
token quote
token closebracket
token closebracket
token amper
token amper
token parse_result
token minus
token greaterthan
token end
token equals
token equals
token 0
token amper
token amper
token strcmp
token openbracket
token token
token comma
token quote
token close
token quote
token closebracket
token exclamation
token equals
token 0
token closebracket
token opencurly
token char
is a pointer ['char', '*']
determiner semicolon
end of declaration
type declaration: ['char', '*', 'type']
token if
token openbracket
token strcmp
token openbracket
token token
token comma
token quote
token int
determiner closebracket
type declaration: ['int', 'quote', name {'name': 'closebracket'}]
token equals
token equals
token 0
token closebracket
token opencurly
token type
token equals
token token
token semicolon
token closecurly
token if
token openbracket
token strcmp
token openbracket
token token
token comma
token quote
token string
token quote
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token type
token equals
token token
token semicolon
token closecurly
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'name', name {'name': 'equals'}]
token gettok
token openbracket
token parse_result
token comma
token quote
token funcparamname
token quote
token closebracket
token semicolon
token printf
token openbracket
token quote
token type
token is
token percent
token s
token name
token is
token percent
token s
token backslash
token n
token quote
token comma
token type
token comma
token name
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'before', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 2
type declaration: ['char', 'closebracket', pointer {}, name {'name': '2'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Parameter', pointer {}]
determiner parameter
type declaration: [struct {}, 'Parameter', pointer {}, name {'name': 'parameter'}]
[struct {}, 'Parameter', pointer {}, name {'name': 'parameter'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Parameter', name {'name': 'closebracket'}]
[struct {}, 'Parameter', name {'name': 'closebracket'}]
token closebracket
token semicolon
token parameter
token minus
token greaterthan
token type
token equals
token type
token semicolon
token parameter
token minus
token greaterthan
token name
token equals
token name
token semicolon
token printf
token openbracket
token quote
token there
token are
token percent
token d
token parameters
token backslash
token n
token quote
token comma
token function
token minus
token greaterthan
token parameter_length
token closebracket
token semicolon
token parameters
token opensquare
token function
token minus
token greaterthan
token parameter_length
token plus
token plus
token closesquare
token equals
token parameter
token semicolon
token memcpy
token openbracket
token before
token comma
token parse_result
token minus
token greaterthan
token last_char
token comma
token 2
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'pos', name {'name': 'equals'}]
token parse_result
token minus
token greaterthan
token pos
token semicolon
token if
token openbracket
token strcmp
token openbracket
token gettok
token openbracket
token parse_result
token comma
token quote
token commacheck
token quote
token closebracket
token comma
token quote
token comma
token quote
token closebracket
token exclamation
token equals
token 0
token closebracket
token opencurly
found slash
/
token  free(parse_result->last_char);

token parse_result
token minus
token greaterthan
token last_char
token equals
token before
token semicolon
token parse_result
token minus
token greaterthan
token pos
token equals
token pos
token semicolon
token closecurly
token closecurly
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'curlyopen', name {'name': 'equals'}]
token gettok
token openbracket
token parse_result
token comma
token quote
token functioncurlyopencheck
token quote
token closebracket
token semicolon
token if
token openbracket
token strcmp
token openbracket
token curlyopen
token comma
token quote
token curlyopen
token quote
token closebracket
token exclamation
token equals
token 0
token closebracket
token opencurly
token printf
token openbracket
token quote
token Error
token colon
token expected
token curlyopen
token after
token function
token parameters
token quote
token closebracket
token semicolon
token closecurly
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner newinto
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'newinto'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'newinto'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner _newstatements
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': '_newstatements'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': '_newstatements'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner newexps
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'newexps'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'newexps'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'StatementSource', pointer {}]
determiner newstatementsource
type declaration: [struct {}, 'StatementSource', pointer {}, name {'name': 'newstatementsource'}]
[struct {}, 'StatementSource', pointer {}, name {'name': 'newstatementsource'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'StatementSource', name {'name': 'closebracket'}]
[struct {}, 'StatementSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token function
token minus
token greaterthan
token exps
token equals
token _newstatements
token semicolon
token _newstatements
token opensquare
token 0
token closesquare
token equals
token newexps
token semicolon
token function
token minus
token greaterthan
token statements
token equals
token newstatementsource
token semicolon
token newstatementsource
token minus
token greaterthan
token statements
token equals
token 1
token semicolon
token newexps
token minus
token greaterthan
token current_into
token equals
token amper
token newinto
token semicolon
token newexps
token minus
token greaterthan
token expressions
token equals
token newinto
token semicolon
token newexps
token minus
token greaterthan
token expression_length
token equals
token 0
token semicolon
token printf
token openbracket
token quote
token function
token parse
token INTO
token percent
token p
token quote
token comma
token newinto
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner returnedexps
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'returnedexps'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'returnedexps'}]
token equals
token parse_expressions
token openbracket
token quote
token functionparse
token quote
token comma
token newstatementsource
token comma
token _newstatements
token comma
token head
token comma
token parse_result
token comma
token 0
token comma
token NULL
token closebracket
token semicolon
token return
token continue_parse
token openbracket
token quote
token functionparse
token quote
token comma
token statementsource
token comma
token statements
token comma
token head
token comma
token parse_result
token closebracket
token semicolon
token break
token semicolon
token case
token 177613
token colon
found slash
/
token  case (

token printf
token openbracket
token quote
token is
token a
token parameter
token list
token quote
token closebracket
token semicolon
token break
token semicolon
token case
token 6953778704349
token colon
found slash
/
token  case .

token printf
token openbracket
token quote
token is
token a
token member
token access
token quote
token closebracket
token semicolon
token break
token semicolon
token default
token colon
found slash
/
token  case identifier

token printf
token openbracket
token quote
token percent
token s
token Funcbody
token Is
token an
token identifier
token percent
token s
token backslash
token n
token quote
token comma
token caller
token comma
token token
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner identifier
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'identifier'}]
[struct {}, 'Expression', pointer {}, name {'name': 'identifier'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Expression', name {'name': 'closebracket'}]
[struct {}, 'Expression', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner newstatements
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'newstatements'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'newstatements'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner identifierexps
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'identifierexps'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'identifierexps'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'StatementSource', pointer {}]
determiner _newstatementsource
type declaration: [struct {}, 'StatementSource', pointer {}, name {'name': '_newstatementsource'}]
[struct {}, 'StatementSource', pointer {}, name {'name': '_newstatementsource'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'StatementSource', name {'name': 'closebracket'}]
[struct {}, 'StatementSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner expression
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'expression'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'expression'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Expression', name {'name': 'closebracket'}]
[struct {}, 'Expression', name {'name': 'closebracket'}]
token closebracket
token semicolon
token _newstatementsource
token minus
token greaterthan
token statements
token equals
token 1
token semicolon
token identifier
token minus
token greaterthan
token id
token equals
token parse_result
token minus
token greaterthan
token current_id
token plus
token plus
token semicolon
token identifier
token minus
token greaterthan
token type
token equals
token IDENTIFIER
token semicolon
token identifier
token minus
token greaterthan
token stringvalue
token equals
token token
token semicolon
token identifier
token minus
token greaterthan
token exps
token equals
token newstatements
token semicolon
token newstatements
token opensquare
token 0
token closesquare
token equals
token identifierexps
token semicolon
token identifier
token minus
token greaterthan
token exps
token opensquare
token _newstatementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token equals
token 0
token semicolon
token identifier
token minus
token greaterthan
token exps
token opensquare
token _newstatementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token equals
token expression
token semicolon
token identifier
token minus
token greaterthan
token statements
token equals
token _newstatementsource
token semicolon
token int
determiner equals
type declaration: ['int', 'new_position', name {'name': 'equals'}]
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expression_length
token plus
token plus
token semicolon
token printf
token openbracket
token quote
token percent
token s
token New
token position
token is
token percent
token d
token backslash
token n
token quote
token comma
token caller
token comma
token new_position
token closebracket
token semicolon
token printf
token openbracket
token quote
token identifier
token INTO
token percent
token p
token backslash
token n
token quote
token comma
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token closebracket
token semicolon
token statements
token opensquare
token statementsource
token minus
token greaterthan
token statements
token minus
token 1
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token new_position
token closesquare
token equals
token identifier
token semicolon
token int
determiner equals
type declaration: ['int', 'expressions_count', name {'name': 'equals'}]
token 0
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner expressions
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'expressions'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'expressions'}]
token equals
token parse_expressions
token openbracket
token quote
token identifier
token quote
token comma
token statementsource
token comma
token statements
token comma
token head
token comma
token parse_result
token comma
token 0
token comma
token NULL
token closebracket
token semicolon
token break
token semicolon
token closecurly
token return
token parse_result
token semicolon
token closecurly
found slash
/
token  rootparse

token struct
determiner asterisk
type declaration: [struct {}, 'ParseResult', pointer {}]
determiner parse
type declaration: [struct {}, 'ParseResult', pointer {}, name {'name': 'parse'}]
[struct {}, 'ParseResult', pointer {}, name {'name': 'parse'}]
token openbracket
token int
determiner comma
type declaration: ['int', 'length', name {'name': 'comma'}]
token char
is a pointer ['char', '*']
determiner closebracket
type declaration: ['char', '*', 'program_body', name {'name': 'closebracket'}]
token opencurly
token struct
determiner asterisk
type declaration: [struct {}, 'ParseResult', pointer {}]
determiner parse_result
type declaration: [struct {}, 'ParseResult', pointer {}, name {'name': 'parse_result'}]
[struct {}, 'ParseResult', pointer {}, name {'name': 'parse_result'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ParseResult', name {'name': 'closebracket'}]
[struct {}, 'ParseResult', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}]
determiner statements
type declaration: [struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'statements'}]
[struct {}, 'ExpressionSource', pointer {}, pointer {}, name {'name': 'statements'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner exps
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'exps'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'exps'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'StatementSource', pointer {}]
determiner statementsource
type declaration: [struct {}, 'StatementSource', pointer {}, name {'name': 'statementsource'}]
[struct {}, 'StatementSource', pointer {}, name {'name': 'statementsource'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'StatementSource', name {'name': 'closebracket'}]
[struct {}, 'StatementSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token parse_result
token minus
token greaterthan
token pos
token equals
token 0
token semicolon
token parse_result
token minus
token greaterthan
token exps
token equals
token statements
token semicolon
token statements
token opensquare
token 0
token closesquare
token equals
token exps
token semicolon
token statementsource
token minus
token greaterthan
token statements
token equals
token 1
token semicolon
token parse_result
token minus
token greaterthan
token length
token equals
token length
token semicolon
token parse_result
token minus
token greaterthan
token program_body
token equals
token program_body
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'last_char', name {'name': 'equals'}]
token malloc
token openbracket
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 2
type declaration: ['char', 'closebracket', pointer {}, name {'name': '2'}]
token closebracket
token closebracket
token semicolon
token memset
token openbracket
token last_char
token comma
token singlequote
token backslash
token 0
token singlequote
token comma
token 2
token closebracket
token semicolon
token last_char
token opensquare
token 0
token closesquare
token equals
token singlequote
token singlequote
token semicolon
token last_char
token opensquare
token 0
token closesquare
token equals
token parse_result
token minus
token greaterthan
token program_body
token opensquare
token parse_result
token minus
token greaterthan
token pos
token closesquare
token semicolon
token parse_result
token minus
token greaterthan
token last_char
token equals
token last_char
token semicolon
token parse_result
token minus
token greaterthan
token end
token equals
token 0
token semicolon
token parse_result
token minus
token greaterthan
token start
token equals
token 1
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner root
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'root'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'root'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token exps
token minus
token greaterthan
token expressions
token equals
token root
token semicolon
token exps
token minus
token greaterthan
token expression_length
token equals
token 0
token semicolon
token exps
token minus
token greaterthan
token current_into
token equals
token amper
token root
token semicolon
token printf
token openbracket
token quote
token FIRST
token INTO
token percent
token p
token backslash
token n
token quote
token comma
token root
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}]
determiner opensquare
close semicolon
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}]
determiner opensquare
found slash
 
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}]
determiner opensquare
found slash
*
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}]
determiner opensquare
found slash
 
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}]
determiner opensquare
close comma
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}]
determiner opensquare
close semicolon
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}]
determiner opensquare
close semicolon
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}]
determiner opensquare
close semicolon
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'x'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'x'}, array-constant {'constant': 'plus'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'x'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'opencurly'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'x'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'x'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'x'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}]
determiner opensquare
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'x'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'exps'}]
determiner opensquare
end of array
type declaration: ['char', '*', 'keywords', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'member'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'function'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'if'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'return'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'open'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'close'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'add'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'subtract'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'multiply'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rax'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rbx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rcx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdx'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rdi'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'rsp'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r8'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r9'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r10'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r11'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r12'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r13'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r14'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'r15'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'TABLE'}, array-constant {'constant': 'ld'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'keywords'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'divide'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'break'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'functions'}, array-constant {'constant': 'calloc'}, array {'size': '100'}, array-constant {'constant': 'sizeof'}, array-constant {'constant': 'struct'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'function_length'}, array {'size': '0'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'continue_parse'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'statementsource'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'parse_result'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'int'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 'function'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'hash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Function'}, array-constant {'constant': 's'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'name'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'parameter'}, array-constant {'constant': 'percent'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'closecurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'Has'}, array-constant {'constant': 'd'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'x'}, array {'size': '0'}, array-constant {'constant': 'x'}, array-constant {'constant': 'function'}, array-constant {'constant': 'greaterthan'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'statements'}, array-constant {'constant': 'x'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'minus'}, array-constant {'constant': 'exps'}, array-constant {'constant': 'x'}]
token closebracket
token semicolon
token closecurly
token closecurly
found slash
*
token 
int descendanf(struct NormalForm * anf, struct ExpressionSource *expressions) {
  for (int x = expressions->expression_length - 1; x >= 0 ; x--) {
    for (int y = expressions->expressions[x]->statements->statements - 1 ; y >= 0 ; y--) {
      descendanf(anf, expressions->expressions[x]->exps[y]);
    }
    anf->expressions[anf->count++] = expressions->expressions[x];
  }
}*
found slash


token divide
token int
Found function, return type: ['int', 'descendanf']
token struct
determiner asterisk
type declaration: [struct {}, 'NormalForm', pointer {}]
determiner anf
type declaration: [struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
[struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
token comma
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner expressions
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'expressions'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'expressions'}]
token closebracket
token opencurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token expressions
token minus
token greaterthan
token expression_length
token minus
token 1
token semicolon
token x
token greaterthan
token equals
token 0
token semicolon
token x
token minus
token minus
token closebracket
token opencurly
found slash
/
token  for (int x = 0; x < expressions->expression_length ; x++) {

found slash
/
token  for (int y = 0 ; y < expressions->expressions[x]->statements->statements ; y++) {

token for
token openbracket
token int
determiner equals
type declaration: ['int', 'y', name {'name': 'equals'}]
token expressions
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token statements
token minus
token greaterthan
token statements
token minus
token 1
token semicolon
token y
token greaterthan
token equals
token 0
token semicolon
token y
token minus
token minus
token closebracket
token opencurly
token descendanf
token openbracket
token anf
token comma
token expressions
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token y
token closesquare
token closebracket
token semicolon
token closecurly
token anf
token minus
token greaterthan
token expressions
token opensquare
token anf
token minus
token greaterthan
token count
token plus
token plus
token closesquare
token equals
token expressions
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token semicolon
token closecurly
token closecurly
token struct
determiner asterisk
type declaration: [struct {}, 'ANF', pointer {}]
determiner normalform
type declaration: [struct {}, 'ANF', pointer {}, name {'name': 'normalform'}]
[struct {}, 'ANF', pointer {}, name {'name': 'normalform'}]
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'ParseResult', pointer {}]
determiner parse_result
type declaration: [struct {}, 'ParseResult', pointer {}, name {'name': 'parse_result'}]
[struct {}, 'ParseResult', pointer {}, name {'name': 'parse_result'}]
token closebracket
token opencurly
token struct
determiner asterisk
type declaration: [struct {}, 'ANF', pointer {}]
determiner result
type declaration: [struct {}, 'ANF', pointer {}, name {'name': 'result'}]
[struct {}, 'ANF', pointer {}, name {'name': 'result'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ANF', name {'name': 'closebracket'}]
[struct {}, 'ANF', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'NormalForm', pointer {}]
determiner anf
type declaration: [struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
[struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'NormalForm', name {'name': 'closebracket'}]
[struct {}, 'NormalForm', name {'name': 'closebracket'}]
token closebracket
token semicolon
token result
token minus
token greaterthan
token anf
token equals
token anf
token semicolon
token result
token minus
token greaterthan
token functions
token equals
token parse_result
token minus
token greaterthan
token functions
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token parse_result
token minus
token greaterthan
token function_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token parse_result
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token id
token equals
token x
token semicolon
token closecurly
token result
token minus
token greaterthan
token function_length
token equals
token parse_result
token minus
token greaterthan
token function_length
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner expressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'expressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'expressions'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token anf
token minus
token greaterthan
token expressions
token equals
token expressions
token semicolon
token anf
token minus
token greaterthan
token count
token equals
token 0
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token parse_result
token minus
token greaterthan
token function_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token struct
determiner asterisk
type declaration: [struct {}, 'NormalForm', pointer {}]
determiner function_anf
type declaration: [struct {}, 'NormalForm', pointer {}, name {'name': 'function_anf'}]
[struct {}, 'NormalForm', pointer {}, name {'name': 'function_anf'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'NormalForm', name {'name': 'closebracket'}]
[struct {}, 'NormalForm', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner function_expressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'function_expressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'function_expressions'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token parse_result
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token anf
token equals
token function_anf
token semicolon
token parse_result
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token anf
token minus
token greaterthan
token count
token equals
token 0
token semicolon
token parse_result
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token anf
token minus
token greaterthan
token expressions
token equals
token function_expressions
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'y', name {'name': 'equals'}]
token 0
token semicolon
token y
token lessthan
token parse_result
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token statements
token minus
token greaterthan
token statements
token semicolon
token y
token plus
token plus
token closebracket
token opencurly
token descendanf
token openbracket
token parse_result
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token anf
token comma
token parse_result
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token y
token closesquare
token closebracket
token semicolon
token closecurly
token closecurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'y', name {'name': 'equals'}]
token 0
token semicolon
token y
token lessthan
token parse_result
token minus
token greaterthan
token statements
token minus
token greaterthan
token statements
token semicolon
token y
token plus
token plus
token closebracket
token opencurly
token descendanf
token openbracket
token anf
token comma
token parse_result
token minus
token greaterthan
token exps
token opensquare
token y
token closesquare
token closebracket
token semicolon
token closecurly
token return
token result
token semicolon
token closecurly
token struct
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}]
determiner resolve_name
type declaration: [struct {}, 'Function', pointer {}, name {'name': 'resolve_name'}]
[struct {}, 'Function', pointer {}, name {'name': 'resolve_name'}]
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'CodeGenContext', pointer {}]
determiner context
type declaration: [struct {}, 'CodeGenContext', pointer {}, name {'name': 'context'}]
[struct {}, 'CodeGenContext', pointer {}, name {'name': 'context'}]
token comma
token char
is a pointer ['char', '*']
determiner closebracket
type declaration: ['char', '*', 'function_name', name {'name': 'closebracket'}]
token opencurly
token printf
token openbracket
token quote
token Resolving
token function
token percent
token s
token backslash
token n
token quote
token comma
token function_name
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token context
token minus
token greaterthan
token function_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token printf
token openbracket
token quote
token Inspecting
token function
token percent
token s
token backslash
token n
token quote
token comma
token context
token minus
token greaterthan
token user_functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token name
token closebracket
token semicolon
token if
token openbracket
token strcmp
token openbracket
token context
token minus
token greaterthan
token user_functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token name
token comma
token function_name
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token return
token context
token minus
token greaterthan
token user_functions
token opensquare
token x
token closesquare
token semicolon
token closecurly
token closecurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token context
token minus
token greaterthan
token global_function_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token if
token openbracket
token strcmp
token openbracket
token context
token minus
token greaterthan
token global_functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token name
token comma
token function_name
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token return
token context
token minus
token greaterthan
token global_functions
token opensquare
token x
token closesquare
token semicolon
token closecurly
token closecurly
token closecurly
token int
Found function, return type: ['int', 'add']
token char
is a pointer ['char', '*']
determiner comma
type declaration: ['char', '*', 'register_left', name {'name': 'comma'}]
token char
is a pointer ['char', '*']
determiner comma
type declaration: ['char', '*', 'destination_register', name {'name': 'comma'}]
token char
is a pointer ['char', '*']
determiner closebracket
type declaration: ['char', '*', 'add_bytes', name {'name': 'closebracket'}]
token opencurly
token unsigned
token long
token reg_left
token equals
token hash
token register_left
token closebracket
token semicolon
token unsigned
token long
token reg_right
token equals
token hash
token destination_register
token closebracket
token semicolon
token switch
token openbracket
token reg_right
token closebracket
token opencurly
token case
token 193504464
token colon
found slash
/
token  case rax 

token switch
token openbracket
token reg_left
token closebracket
token opencurly
token case
token 193504497
token colon
found slash
/
token  case rbx 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xd8
token semicolon
token break
token semicolon
token case
token 193504530
token colon
found slash
/
token  case rcx 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xc8
token semicolon
token break
token semicolon
token case
token 193504563
token colon
found slash
/
token  case rdx 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xd0
token semicolon
token break
token semicolon
token case
token 193505043
token colon
found slash
/
token  case rsi 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xf0
token semicolon
token break
token semicolon
token case
token 193504548
token colon
found slash
/
token  case rdi 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xf8
token semicolon
token break
token semicolon
token closecurly
token break
token semicolon
token case
token 193504497
token colon
found slash
/
token  case rbx 

token switch
token openbracket
token reg_left
token closebracket
token opencurly
token case
token 193504464
token colon
found slash
/
token  case rax 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xc3
token semicolon
token break
token semicolon
token case
token 193504530
token colon
found slash
/
token  case rcx 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xcb
token semicolon
token break
token semicolon
token case
token 193504563
token colon
found slash
/
token  case rdx 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xd3
token semicolon
token break
token semicolon
token case
token 193505043
token colon
found slash
/
token  case rsi 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xf3
token semicolon
token break
token semicolon
token case
token 193504548
token colon
found slash
/
token  case rdi 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xfb
token semicolon
token break
token semicolon
token closecurly
token break
token semicolon
token case
token 193504530
token colon
found slash
/
token  case rcx 

token switch
token openbracket
token reg_left
token closebracket
token opencurly
token case
token 193504464
token colon
found slash
/
token  case rax 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xc1
token semicolon
token break
token semicolon
token case
token 193504497
token colon
found slash
/
token  case rbx 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xd9
token semicolon
token break
token semicolon
token case
token 193504563
token colon
found slash
/
token  case rdx 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xd1
token semicolon
token break
token semicolon
token case
token 193505043
token colon
found slash
/
token  case rsi 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xf1
token semicolon
token break
token semicolon
token case
token 193504548
token colon
found slash
/
token  case rdi 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xf9
token semicolon
token break
token semicolon
token closecurly
token break
token semicolon
token case
token 193504563
token colon
found slash
/
token  case rdx 

token switch
token openbracket
token reg_left
token closebracket
token opencurly
token case
token 193504464
token colon
found slash
/
token  case rax 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xc2
token semicolon
token break
token semicolon
token case
token 193504497
token colon
found slash
/
token  case rbx 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xda
token semicolon
token break
token semicolon
token case
token 193504530
token colon
found slash
/
token  case rcx 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xca
token semicolon
token break
token semicolon
token case
token 193505043
token colon
found slash
/
token  case rsi 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xf2
token semicolon
token break
token semicolon
token case
token 193504548
token colon
found slash
/
token  case rdi 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xfa
token semicolon
token break
token semicolon
token closecurly
token break
token semicolon
token case
token 193505043
token colon
found slash
/
token  case rsi 

token switch
token openbracket
token reg_left
token closebracket
token opencurly
token case
token 193504464
token colon
found slash
/
token  case rax 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xc6
token semicolon
token break
token semicolon
token case
token 193504497
token colon
found slash
/
token  case rbx 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xde
token semicolon
token break
token semicolon
token case
token 193504530
token colon
found slash
/
token  case rcx 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xce
token semicolon
token break
token semicolon
token case
token 193504563
token colon
found slash
/
token  case rdx 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xd6
token semicolon
token break
token semicolon
token case
token 193504548
token colon
found slash
/
token  case rdi 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xfe
token semicolon
token break
token semicolon
token closecurly
token break
token semicolon
token case
token 193504548
token colon
found slash
/
token  case rdi 

token switch
token openbracket
token reg_left
token closebracket
token opencurly
token case
token 193504464
token colon
found slash
/
token  case rax 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xc7
token semicolon
token break
token semicolon
token case
token 193504497
token colon
found slash
/
token  case rbx 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xdf
token semicolon
token break
token semicolon
token case
token 193504530
token colon
found slash
/
token  case rcx 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xcf
token semicolon
token break
token semicolon
token case
token 193504563
token colon
found slash
/
token  case rdx 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xd7
token semicolon
token break
token semicolon
token case
token 193505043
token colon
found slash
/
token  case rsi 

token add_bytes
token opensquare
token 2
token closesquare
token equals
token 0xf7
token semicolon
token break
token semicolon
token closecurly
token break
token semicolon
token closecurly
token closecurly
token int
Found function, return type: ['int', 'mov_dest']
token char
is a pointer ['char', '*']
determiner comma
type declaration: ['char', '*', 'destination', name {'name': 'comma'}]
token char
is a pointer ['char', '*']
determiner closebracket
type declaration: ['char', '*', 'bytes', name {'name': 'closebracket'}]
token opencurly
token unsigned
token long
token reg
token equals
token hash
token destination
token closebracket
token semicolon
token switch
token openbracket
token reg
token closebracket
token opencurly
token case
token 193504464
token colon
found slash
/
token  case rax 

token bytes
token opensquare
token 2
token closesquare
token equals
token 0xc0
token semicolon
token break
token semicolon
token case
token 193504497
token colon
found slash
/
token  case rbx 

token bytes
token opensquare
token 2
token closesquare
token equals
token 0xc3
token semicolon
token break
token semicolon
token case
token 193504530
token colon
found slash
/
token  case rcx 

token bytes
token opensquare
token 2
token closesquare
token equals
token 0xc1
token semicolon
token break
token semicolon
token case
token 193504563
token colon
found slash
/
token  case rdx 

token bytes
token opensquare
token 2
token closesquare
token equals
token 0xc2
token semicolon
token break
token semicolon
token case
token 193505043
token colon
found slash
/
token  case rsi 

token bytes
token opensquare
token 2
token closesquare
token equals
token 0xc6
token semicolon
token break
token semicolon
token case
token 193504548
token colon
found slash
/
token  case rdi 

token bytes
token opensquare
token 2
token closesquare
token equals
token 0xc7
token semicolon
token break
token semicolon
token closecurly
token closecurly
token int
Found function, return type: ['int', 'writecode']
token struct
determiner asterisk
type declaration: [struct {}, 'CodeGenContext', pointer {}]
determiner context
type declaration: [struct {}, 'CodeGenContext', pointer {}, name {'name': 'context'}]
[struct {}, 'CodeGenContext', pointer {}, name {'name': 'context'}]
token comma
token struct
determiner asterisk
type declaration: [struct {}, 'FunctionContext', pointer {}]
determiner function_context
type declaration: [struct {}, 'FunctionContext', pointer {}, name {'name': 'function_context'}]
[struct {}, 'FunctionContext', pointer {}, name {'name': 'function_context'}]
token comma
token struct
determiner asterisk
type declaration: [struct {}, 'NormalForm', pointer {}]
determiner anf
type declaration: [struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
[struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
token closebracket
token opencurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token anf
token minus
token greaterthan
token assignment_pair
token minus
token greaterthan
token assignment_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token switch
token openbracket
token anf
token minus
token greaterthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token expression
token minus
token greaterthan
token type
token closebracket
token opencurly
token case
token METHOD_CALL
token colon
token printf
token openbracket
token quote
token Generating
token method
token call
token backslash
token n
token quote
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'call_bytes_length', name {'name': 'equals'}]
token 2
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'method_bytes', name {'name': 'equals'}]
token malloc
token openbracket
token call_bytes_length
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'method_ins_count', name {'name': 'equals'}]
token 0
token semicolon
token method_bytes
token opensquare
token method_ins_count
token plus
token plus
token closesquare
token equals
token 0xff
token semicolon
token method_bytes
token opensquare
token method_ins_count
token plus
token plus
token closesquare
token equals
token 0xd3
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'method_address', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 4
type declaration: ['char', 'closebracket', pointer {}, name {'name': '4'}]
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'method_address_count', name {'name': 'equals'}]
token 0
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner method_call_expression
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'method_call_expression'}]
[struct {}, 'Expression', pointer {}, name {'name': 'method_call_expression'}]
token equals
token anf
token minus
token greaterthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token expression
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner method_call_name_identifier
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'method_call_name_identifier'}]
[struct {}, 'Expression', pointer {}, name {'name': 'method_call_name_identifier'}]
token equals
token anf
token minus
token greaterthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token expression
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'method_name', name {'name': 'equals'}]
token method_call_name_identifier
token minus
token greaterthan
token stringvalue
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}]
determiner function
type declaration: [struct {}, 'Function', pointer {}, name {'name': 'function'}]
[struct {}, 'Function', pointer {}, name {'name': 'function'}]
token equals
token resolve_name
token openbracket
token context
token comma
token method_name
token closebracket
token semicolon
token printf
token openbracket
token quote
token percent
token s
token backslash
token n
token quote
token comma
token method_name
token closebracket
token semicolon
token printf
token openbracket
token quote
token Method
token call
token to
token function
token percent
token s
token at
token percent
token p
token backslash
token n
token quote
token comma
token method_name
token comma
token function
token minus
token greaterthan
token code
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner arg1
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'arg1'}]
[struct {}, 'Expression', pointer {}, name {'name': 'arg1'}]
token equals
token anf
token minus
token greaterthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token expression
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 1
token closesquare
token semicolon
token printf
token openbracket
token quote
token percent
token s
token percent
token p
token backslash
token n
token quote
token comma
token arg1
token minus
token greaterthan
token stringvalue
token comma
token arg1
token minus
token greaterthan
token stringvalue
token closebracket
token semicolon
found slash
/
token  push rsp rbp

found slash
/
token  function_context->code[function_context->pc++] = 0x48; 

found slash
/
token function_context->code[function_context->pc++] = 0x89; 

found slash
/
token  function_context->code[function_context->pc++] = 0xe5; 

token if
token openbracket
token function
token minus
token greaterthan
token compiled
token equals
token equals
token 1
token closebracket
token opencurly
token if
token openbracket
token function
token minus
token greaterthan
token global
token equals
token equals
token 1
token closebracket
token opencurly
found slash
/
token  load string

token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0x48
token semicolon
token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0xbf
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'start', name {'name': 'equals'}]
token function_context
token minus
token greaterthan
token code
token plus
token function_context
token minus
token greaterthan
token pc
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'address', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 8
type declaration: ['char', 'closebracket', pointer {}, name {'name': '8'}]
token closebracket
token semicolon
token address
token equals
token arg1
token minus
token greaterthan
token stringvalue
token semicolon
token printf
token openbracket
token quote
token percent
token p
token percent
token p
token relative
token pointer
token percent
token ld
token backslash
token n
token quote
token comma
token arg1
token minus
token greaterthan
token stringvalue
token comma
token address
token comma
token openbracket
token long
token closebracket
token address
token closebracket
token semicolon
token memcpy
token openbracket
token start
token comma
token amper
token address
token comma
token 8
token closebracket
token semicolon
token function_context
token minus
token greaterthan
token pc
token plus
token equals
token 8
token semicolon
found slash
/
token  jump location, mov $abs, %r11

token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0x49
token semicolon
token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0xbb
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'start2', name {'name': 'equals'}]
token function_context
token minus
token greaterthan
token code
token plus
token function_context
token minus
token greaterthan
token pc
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'address2', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 8
type declaration: ['char', 'closebracket', pointer {}, name {'name': '8'}]
token closebracket
token semicolon
token address2
token equals
token function
token minus
token greaterthan
token code
token semicolon
token printf
token openbracket
token quote
token percent
token p
token percent
token p
token relative
token pointer
token percent
token ld
token backslash
token n
token quote
token comma
token function
token minus
token greaterthan
token code
token comma
token address2
token comma
token openbracket
token long
token closebracket
token address2
token closebracket
token semicolon
token memcpy
token openbracket
token start2
token comma
token amper
token address2
token comma
token 8
token closebracket
token semicolon
token function_context
token minus
token greaterthan
token pc
token plus
token equals
token 8
token semicolon
token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0x41
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'n', name {'name': 'equals'}]
token 0
token semicolon
token n
token lessthan
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 4
type declaration: ['char', 'closebracket', pointer {}, name {'name': '4'}]
token semicolon
token n
token plus
token plus
token closebracket
token opencurly
found slash
/
token  method_address[method_address_count++] = function->code[n];

token closecurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'n', name {'name': 'equals'}]
token 0
token semicolon
token n
token lessthan
token call_bytes_length
token semicolon
token n
token plus
token plus
token closebracket
token opencurly
token method_bytes
token opensquare
token method_ins_count
token plus
token plus
token closesquare
token equals
token method_address
token opensquare
token n
token closesquare
token semicolon
token closecurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'i', name {'name': 'equals'}]
token 0
token semicolon
token i
token lessthan
token call_bytes_length
token semicolon
token i
token plus
token plus
token closebracket
token opencurly
token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token method_bytes
token opensquare
token i
token closesquare
token semicolon
token closecurly
token closecurly
token closecurly
token else
token opencurly
token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0x49
token semicolon
token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0xbc
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'start', name {'name': 'equals'}]
token function_context
token minus
token greaterthan
token code
token plus
token function_context
token minus
token greaterthan
token pc
token semicolon
token uintptr_t
token asterisk
token address
token equals
token malloc
token openbracket
token sizeof
token openbracket
token uintptr_t
token closebracket
token asterisk
token 1
token closebracket
token semicolon
token asterisk
token address
token equals
token openbracket
token uintptr_t
token closebracket
token function
token minus
token greaterthan
token id
token semicolon
token printf
token openbracket
token quote
token percent
token p
token percent
token p
token creating
token function
token id
token percent
token ld
token backslash
token n
token quote
token comma
token arg1
token minus
token greaterthan
token stringvalue
token comma
token address
token comma
token openbracket
token long
token closebracket
token address
token closebracket
token semicolon
token memcpy
token openbracket
token start
token comma
token address
token comma
token 8
token closebracket
token semicolon
token function_context
token minus
token greaterthan
token pc
token plus
token equals
token 8
token semicolon
token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0x49
token semicolon
token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0xbb
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'compile_stub_start', name {'name': 'equals'}]
token function_context
token minus
token greaterthan
token code
token plus
token function_context
token minus
token greaterthan
token pc
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'compile_address', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 8
type declaration: ['char', 'closebracket', pointer {}, name {'name': '8'}]
token closebracket
token semicolon
token compile_address
token equals
token openbracket
token char
is a pointer ['char', '*']
determiner compile_stub
type declaration: ['char', '*', 'closebracket', name {'name': 'compile_stub'}]
token semicolon
token printf
token openbracket
token quote
token percent
token p
token creating
token function
token stub
token percent
token ld
token backslash
token n
token quote
token comma
token compile_address
token comma
token openbracket
token long
token closebracket
token compile_address
token closebracket
token semicolon
token memcpy
token openbracket
token compile_stub_start
token comma
token amper
token compile_address
token comma
token 8
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Callsite', pointer {}]
determiner callsite
type declaration: [struct {}, 'Callsite', pointer {}, name {'name': 'callsite'}]
[struct {}, 'Callsite', pointer {}, name {'name': 'callsite'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Callsite', name {'name': 'closebracket'}]
[struct {}, 'Callsite', name {'name': 'closebracket'}]
token closebracket
token semicolon
token callsite
token minus
token greaterthan
token pc
token equals
token function_context
token minus
token greaterthan
token pc
token semicolon
token callsite
token minus
token greaterthan
token function
token equals
token function
token semicolon
token callsite
token minus
token greaterthan
token function_context
token equals
token function_context
token semicolon
token function
token minus
token greaterthan
token callsites
token opensquare
token function
token minus
token greaterthan
token callsite_length
token plus
token plus
token closesquare
token equals
token callsite
token semicolon
token function_context
token minus
token greaterthan
token pc
token plus
token equals
token 8
token semicolon
token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0x41
token semicolon
token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0xff
token semicolon
token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0xd3
token semicolon
token closecurly
token if
token openbracket
token anf
token minus
token greaterthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token expression
token minus
token greaterthan
token chosen_register
token exclamation
token equals
token NULL
token closebracket
token opencurly
token printf
token openbracket
token quote
token Method
token call
token output
token needs
token to
token go
token to
token register
token percent
token s
token backslash
token n
token quote
token comma
token anf
token minus
token greaterthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token expression
token minus
token greaterthan
token chosen_register
token closebracket
token semicolon
token if
token openbracket
token strcmp
token openbracket
token quote
token rax
token quote
token comma
token anf
token minus
token greaterthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token expression
token minus
token greaterthan
token chosen_register
token closebracket
token exclamation
token equals
token 0
token closebracket
token opencurly
token int
determiner equals
type declaration: ['int', 'move_length', name {'name': 'equals'}]
token 3
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'move_return_value', name {'name': 'equals'}]
token calloc
token openbracket
token move_length
token comma
token sizeof
token openbracket
token char
determiner closebracket
type declaration: ['char', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token move_var
token openbracket
token quote
token rax
token quote
token comma
token anf
token minus
token greaterthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token expression
token minus
token greaterthan
token chosen_register
token comma
token move_return_value
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'n', name {'name': 'equals'}]
token 0
token semicolon
token n
token lessthan
token move_length
token semicolon
token n
token plus
token plus
token closebracket
token opencurly
token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token move_return_value
token opensquare
token n
token closesquare
token semicolon
token closecurly
token closecurly
token closecurly
token break
token semicolon
token case
token RETURN
token colon
token printf
token openbracket
token quote
token Generating
token return
token backslash
token n
token quote
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'return_bytes_length', name {'name': 'equals'}]
token 3
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'return_bytes', name {'name': 'equals'}]
token calloc
token openbracket
token 1
token comma
token return_bytes_length
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'return_count', name {'name': 'equals'}]
token 0
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner return_expression
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'return_expression'}]
[struct {}, 'Expression', pointer {}, name {'name': 'return_expression'}]
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'register_return', name {'name': 'equals'}]
token return_expression
token minus
token greaterthan
token chosen_register
token semicolon
token if
token openbracket
token strcmp
token openbracket
token register_return
token comma
token quote
token rax
token quote
token closebracket
token exclamation
token equals
token 0
token closebracket
token opencurly
token move_var
token openbracket
token register_return
token comma
token quote
token rax
token quote
token comma
token return_bytes
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'n', name {'name': 'equals'}]
token 0
token semicolon
token n
token lessthan
token return_bytes_length
token semicolon
token n
token plus
token plus
token closebracket
token opencurly
token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token return_bytes
token opensquare
token n
token closesquare
token semicolon
token closecurly
token closecurly
token break
token semicolon
token case
token ADD
token colon
token printf
token openbracket
token quote
token Generating
token add
token backslash
token n
token quote
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'add_size_of_immediate', name {'name': 'equals'}]
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner sizeof
type declaration: ['char', 'closebracket', pointer {}, name {'name': 'sizeof'}]
token openbracket
token int
determiner semicolon
end of declaration
type declaration: ['int', 'closebracket']
token int
determiner equals
type declaration: ['int', 'add_bytes_length', name {'name': 'equals'}]
token 3
token asterisk
token sizeof
token openbracket
token char
determiner semicolon
end of declaration
type declaration: ['char', 'closebracket']
token printf
token openbracket
token quote
token percent
token d
token add
token bytes
token length
token backslash
token n
token quote
token comma
token add_bytes_length
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'add_bytes', name {'name': 'equals'}]
token malloc
token openbracket
token add_bytes_length
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'add_bytes_count', name {'name': 'equals'}]
token 0
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner left
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'left'}]
[struct {}, 'Expression', pointer {}, name {'name': 'left'}]
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner right
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'right'}]
[struct {}, 'Expression', pointer {}, name {'name': 'right'}]
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 1
token closesquare
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'register_left', name {'name': 'equals'}]
token left
token minus
token greaterthan
token chosen_register
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'register_right', name {'name': 'equals'}]
token right
token minus
token greaterthan
token chosen_register
token semicolon
found slash
/
token  function_context->code[function_context->pc++] = 0x48; 

token printf
token openbracket
token quote
token Add
token instruction
token left
token is
token percent
token s
token backslash
token n
token quote
token comma
token register_left
token closebracket
token semicolon
token printf
token openbracket
token quote
token Right
token instruction
token right
token is
token percent
token s
token backslash
token n
token quote
token comma
token register_right
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'destination_register', name {'name': 'equals'}]
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token chosen_register
token semicolon
token printf
token openbracket
token quote
token my
token register
token is
token percent
token s
token backslash
token n
token quote
token comma
token destination_register
token closebracket
token semicolon
token if
token openbracket
token strcmp
token openbracket
token register_left
token comma
token destination_register
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token printf
token openbracket
token quote
token register
token left
token is
token destination
token register
token quote
token closebracket
token semicolon
token register_left
token equals
token register_right
token semicolon
token closecurly
token printf
token openbracket
token quote
token percent
token d
token operand
token move
token bytes
token length
token backslash
token n
token quote
token comma
token add_bytes_length
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'prepare_bytes', name {'name': 'equals'}]
token malloc
token openbracket
token add_bytes_length
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'prepare_bytes_count', name {'name': 'equals'}]
token 0
token semicolon
found slash
/
token  prepare_bytes[prepare_bytes_count++] = 0x48; 

found slash
/
token  prepare_bytes[prepare_bytes_count++] = 0x01; 

token if
token openbracket
token strcmp
token openbracket
token register_right
token comma
token destination_register
token closebracket
token exclamation
token equals
token 0
token amper
token amper
token strcmp
token openbracket
token register_left
token comma
token destination_register
token closebracket
token exclamation
token equals
token 0
token closebracket
token opencurly
token printf
token openbracket
token quote
token moving
token register
token right
token into
token destination
token register
token quote
token closebracket
token semicolon
token move_var
token openbracket
token register_right
token comma
token destination_register
token comma
token prepare_bytes
token closebracket
token semicolon
token closecurly
token add_bytes
token opensquare
token add_bytes_count
token plus
token plus
token closesquare
token equals
token 0x48
token semicolon
token add_bytes
token opensquare
token add_bytes_count
token plus
token plus
token closesquare
token equals
token 0x01
token semicolon
token add
token openbracket
token register_left
token comma
token destination_register
token comma
token add_bytes
token closebracket
token semicolon
token if
token openbracket
token strcmp
token openbracket
token register_right
token comma
token destination_register
token closebracket
token exclamation
token equals
token 0
token amper
token amper
token strcmp
token openbracket
token register_left
token comma
token destination_register
token closebracket
token exclamation
token equals
token 0
token closebracket
token opencurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'n', name {'name': 'equals'}]
token 0
token semicolon
token n
token lessthan
token add_bytes_length
token semicolon
token n
token plus
token plus
token closebracket
token opencurly
token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token prepare_bytes
token opensquare
token n
token closesquare
token semicolon
token closecurly
token closecurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'n', name {'name': 'equals'}]
token 0
token semicolon
token n
token lessthan
token add_bytes_length
token semicolon
token n
token plus
token plus
token closebracket
token opencurly
token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token add_bytes
token opensquare
token n
token closesquare
token semicolon
token closecurly
token break
token semicolon
token case
token IDENTIFIER
token colon
token if
token openbracket
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token tag
token exclamation
token equals
token IS_AST_METADATA
token closebracket
token opencurly
token printf
token openbracket
token quote
token Generating
token reference
token backslash
token n
token quote
token closebracket
token semicolon
token if
token openbracket
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token token_type
token equals
token equals
token NUMBER
token closebracket
token opencurly
token int
determiner equals
type declaration: ['int', 'size_of_immediate', name {'name': 'equals'}]
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 4
type declaration: ['char', 'closebracket', pointer {}, name {'name': '4'}]
token semicolon
token int
determiner equals
type declaration: ['int', 'bytes_count', name {'name': 'equals'}]
token openbracket
token 3
token asterisk
token sizeof
token openbracket
token char
determiner closebracket
type declaration: ['char', 'closebracket', name {'name': 'closebracket'}]
token plus
token size_of_immediate
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'bytes', name {'name': 'equals'}]
token malloc
token openbracket
token bytes_count
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'byte_count', name {'name': 'equals'}]
token 0
token semicolon
token bytes
token opensquare
token 0
token closesquare
token equals
token 0x48
token semicolon
token bytes
token opensquare
token 1
token closesquare
token equals
token 0xc7
token semicolon
found slash
*
token 
  rax 193504464
  rbx 193504497
  rcx 193504530
  rdx 193504563
  rsi 193505043
  rdi 193504548

             *
found slash


token divide
token printf
token openbracket
token quote
token percent
token s
token percent
token s
token backslash
token n
token quote
token comma
token anf
token minus
token greaterthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token variable
token comma
token anf
token minus
token greaterthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token text
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'y', name {'name': 'equals'}]
token 0
token semicolon
token y
token lessthan
token anf
token minus
token greaterthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token reference_length
token semicolon
token y
token plus
token plus
token closebracket
token opencurly
token printf
token openbracket
token quote
token reference
token percent
token s
token backslash
token n
token quote
token comma
token anf
token minus
token greaterthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token references
token opensquare
token y
token closesquare
token closebracket
token semicolon
token closecurly
token printf
token openbracket
token quote
token Register
token for
token identifier
token is
token backslash
token n
token quote
token closebracket
token semicolon
token printf
token openbracket
token quote
token percent
token s
token quote
token comma
token anf
token minus
token greaterthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token chosen_register
token closebracket
token semicolon
token mov_dest
token openbracket
token anf
token minus
token greaterthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token chosen_register
token comma
token bytes
token closebracket
token semicolon
token int
is a pointer ['int', '*']
determiner equals
type declaration: ['int', '*', 'immediate', name {'name': 'equals'}]
token malloc
token openbracket
token size_of_immediate
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'immediate_bytes', name {'name': 'equals'}]
token openbracket
token char
is a pointer ['char', '*']
determiner amper
type declaration: ['char', '*', 'closebracket', name {'name': 'amper'}]
token immediate
token semicolon
token memcpy
token openbracket
token immediate_bytes
token comma
token amper
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token numbervalue
token comma
token size_of_immediate
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'ins_counter', name {'name': 'equals'}]
token 3
token semicolon
token bytes
token opensquare
token ins_counter
token plus
token plus
token closesquare
token equals
token immediate_bytes
token opensquare
token 0
token closesquare
token semicolon
token bytes
token opensquare
token ins_counter
token plus
token plus
token closesquare
token equals
token immediate_bytes
token opensquare
token 1
token closesquare
token semicolon
token bytes
token opensquare
token ins_counter
token plus
token plus
token closesquare
token equals
token immediate_bytes
token opensquare
token 2
token closesquare
token semicolon
token bytes
token opensquare
token ins_counter
token plus
token plus
token closesquare
token equals
token immediate_bytes
token opensquare
token 3
token closesquare
token semicolon
token printf
token openbracket
token quote
token mov
token dollar
token percent
token d
token comma
token percent
token percent
token percent
token s
token backslash
token n
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token numbervalue
token comma
token anf
token minus
token greaterthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token chosen_register
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'n', name {'name': 'equals'}]
token 0
token semicolon
token n
token lessthan
token bytes_count
token semicolon
token n
token plus
token plus
token closebracket
token opencurly
token printf
token openbracket
token quote
token percent
token x
token backslash
token n
token quote
token comma
token bytes
token opensquare
token n
token closesquare
token amper
token 0xff
token closebracket
token semicolon
token closecurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'n', name {'name': 'equals'}]
token 0
token semicolon
token n
token lessthan
token bytes_count
token semicolon
token n
token plus
token plus
token closebracket
token opencurly
token function_context
token minus
token greaterthan
token code
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token bytes
token opensquare
token n
token closesquare
token semicolon
token closecurly
token closecurly
found slash
/
token  emit_mov_constant(anfs-> 

token closecurly
token break
token semicolon
token closecurly
token closecurly
token closecurly
token int
Found function, return type: ['int', 'dump_machine_code']
token char
is a pointer ['char', '*']
determiner comma
type declaration: ['char', '*', 'name', name {'name': 'comma'}]
token char
is a pointer ['char', '*']
determiner closebracket
type declaration: ['char', '*', 'code', name {'name': 'closebracket'}]
token opencurly
token printf
token openbracket
token quote
token percent
token s
token machine
token code
token backslash
token n
token quote
token comma
token name
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'n', name {'name': 'equals'}]
token 0
token semicolon
token n
token lessthan
token 100
token semicolon
token n
token plus
token plus
token closebracket
token opencurly
token if
token openbracket
token n
token percent
token 8
token equals
token equals
token 0
token closebracket
token opencurly
token printf
token openbracket
token quote
token backslash
token n
token quote
token closebracket
token semicolon
token closecurly
token printf
token openbracket
token quote
token percent
token x
token quote
token comma
token code
token opensquare
token n
token closesquare
token amper
token 0xff
token closebracket
token semicolon
token closecurly
token closecurly
token long
token compile_stub
token openbracket
token closebracket
token opencurly
token long
token function_id
token semicolon
token asm
token openbracket
token quote
token backslash
token t
token movq
token percent
token percent
token r12
token comma
token percent
token 0
token quote
token colon
token quote
token equals
token r
token quote
token openbracket
token function_id
token closebracket
token closebracket
token semicolon
token long
token rax
token comma
token rbx
token comma
token rcx
token comma
token rdx
token comma
token rsi
token comma
token rdi
token comma
token r8
token comma
token r9
token comma
token r10
token comma
token r11
token comma
token r12
token comma
token r13
token comma
token r14
token comma
token r15
token semicolon
token asm
token openbracket
token quote
token movq
token percent
token percent
token rax
token comma
token percent
token 0
token backslash
token n
token backslash
token movq
token percent
token percent
token rbx
token comma
token percent
token 1
token backslash
token n
token backslash
token movq
token percent
token percent
token rcx
token comma
token percent
token 2
token backslash
token n
token backslash
token movq
token percent
token percent
token rdx
token comma
token percent
token 3
token backslash
token n
token backslash
token movq
token percent
token percent
token rsi
token comma
token percent
token 4
token backslash
token n
token backslash
token movq
token percent
token percent
token rdi
token comma
token percent
token 5
token backslash
token n
token backslash
token movq
token percent
token percent
token r8
token comma
token percent
token 6
token backslash
token n
token backslash
token movq
token percent
token percent
token r9
token comma
token percent
token 7
token backslash
token n
token backslash
token movq
token percent
token percent
token r10
token comma
token percent
token 8
token backslash
token n
token backslash
token movq
token percent
token percent
token r11
token comma
token percent
token 9
token backslash
token n
token backslash
token movq
token percent
token percent
token r12
token comma
token percent
token 10
token backslash
token n
token backslash
token movq
token percent
token percent
token r13
token comma
token percent
token 11
token backslash
token n
token backslash
token movq
token percent
token percent
token r14
token comma
token percent
token 12
token backslash
token n
token backslash
token movq
token percent
token percent
token r15
token comma
token percent
token 13
token quote
token colon
token quote
token equals
token r
token quote
token openbracket
token rax
token closebracket
token comma
token quote
token equals
token r
token quote
token openbracket
token rbx
token closebracket
token comma
token quote
token equals
token r
token quote
token openbracket
token rcx
token closebracket
token comma
token quote
token equals
token r
token quote
token openbracket
token rdx
token closebracket
token comma
token quote
token equals
token r
token quote
token openbracket
token rsi
token closebracket
token comma
token quote
token equals
token r
token quote
token openbracket
token rdi
token closebracket
token comma
token quote
token equals
token r
token quote
token openbracket
token r8
token closebracket
token comma
token quote
token equals
token r
token quote
token openbracket
token r9
token closebracket
token comma
token quote
token equals
token r
token quote
token openbracket
token r10
token closebracket
token comma
token quote
token equals
token r
token quote
token openbracket
token r11
token closebracket
token comma
token quote
token equals
token r
token quote
token openbracket
token r12
token closebracket
token comma
token quote
token equals
token r
token quote
token openbracket
token r13
token closebracket
token comma
token quote
token equals
token r
token quote
token openbracket
token r14
token closebracket
token comma
token quote
token equals
token r
token quote
token openbracket
token r15
token closebracket
token closebracket
token semicolon
token printf
token openbracket
token quote
token Compile
token stub
token C
token calling
token convention
token backslash
token n
token backslash
token rdi
token equals
token percent
token ld
token backslash
token n
token backslash
token rsi
token equals
token percent
token ld
token backslash
token n
token quote
token comma
token rdi
token comma
token rsi
token closebracket
token semicolon
token printf
token openbracket
token quote
token Calling
token compile
token of
token user
token function
token for
token stub
token percent
token ld
token backslash
token n
token quote
token comma
token function_id
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}]
determiner function
type declaration: [struct {}, 'Function', pointer {}, name {'name': 'function'}]
[struct {}, 'Function', pointer {}, name {'name': 'function'}]
token equals
token CODEGEN_CONTEXT
token minus
token greaterthan
token user_functions
token opensquare
token function_id
token closesquare
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'FunctionContext', pointer {}]
determiner function_context
type declaration: [struct {}, 'FunctionContext', pointer {}, name {'name': 'function_context'}]
[struct {}, 'FunctionContext', pointer {}, name {'name': 'function_context'}]
token equals
token function
token minus
token greaterthan
token context
token semicolon
token function
token minus
token greaterthan
token context
token minus
token greaterthan
token pc
token equals
token 0
token semicolon
token mprotect
token openbracket
token function
token minus
token greaterthan
token context
token minus
token greaterthan
token code
token comma
token getpagesize
token openbracket
token closebracket
token comma
token PROT_READ
token pipe
token PROT_EXEC
token pipe
token PROT_WRITE
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'write_region', name {'name': 'equals'}]
token function
token minus
token greaterthan
token context
token minus
token greaterthan
token code
token semicolon
token memset
token openbracket
token function_context
token minus
token greaterthan
token code
token comma
token 0
token comma
token getpagesize
token openbracket
token closebracket
token closebracket
token semicolon
token write_region
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0x55
token semicolon
token writecode
token openbracket
token CODEGEN_CONTEXT
token comma
token function
token minus
token greaterthan
token context
token comma
token function
token minus
token greaterthan
token anf
token closebracket
token semicolon
token write_region
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0x5d
token semicolon
token write_region
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0xc3
token semicolon
token mprotect
token openbracket
token function
token minus
token greaterthan
token context
token minus
token greaterthan
token code
token comma
token getpagesize
token openbracket
token closebracket
token comma
token PROT_READ
token pipe
token PROT_EXEC
token closebracket
token semicolon
token printf
token openbracket
token quote
token Patching
token callsites
token backslash
token n
token quote
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'address', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 8
type declaration: ['char', 'closebracket', pointer {}, name {'name': '8'}]
token closebracket
token semicolon
token address
token equals
token function
token minus
token greaterthan
token code
token semicolon
token printf
token openbracket
token quote
token Function
token percent
token s
token compiled
token to
token percent
token p
token there
token are
token percent
token d
token callsites
token backslash
token n
token quote
token comma
token function
token minus
token greaterthan
token name
token comma
token function
token minus
token greaterthan
token code
token comma
token function
token minus
token greaterthan
token callsite_length
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token function
token minus
token greaterthan
token callsite_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token printf
token openbracket
token quote
token percent
token d
token backslash
token n
token quote
token comma
token x
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Callsite', pointer {}]
determiner callsite
type declaration: [struct {}, 'Callsite', pointer {}, name {'name': 'callsite'}]
[struct {}, 'Callsite', pointer {}, name {'name': 'callsite'}]
token equals
token function
token minus
token greaterthan
token callsites
token opensquare
token x
token closesquare
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'start', name {'name': 'equals'}]
token callsite
token minus
token greaterthan
token function_context
token minus
token greaterthan
token code
token plus
token callsite
token minus
token greaterthan
token pc
token semicolon
token mprotect
token openbracket
token callsite
token minus
token greaterthan
token function_context
token minus
token greaterthan
token code
token comma
token getpagesize
token openbracket
token closebracket
token comma
token PROT_READ
token pipe
token PROT_EXEC
token pipe
token PROT_WRITE
token closebracket
token semicolon
token printf
token openbracket
token quote
token Need
token to
token patch
token percent
token p
token percent
token d
token with
token percent
token p
token percent
token p
token backslash
token n
token quote
token comma
token callsite
token minus
token greaterthan
token function_context
token minus
token greaterthan
token code
token comma
token callsite
token minus
token greaterthan
token pc
token comma
token function
token minus
token greaterthan
token code
token comma
token start
token closebracket
token semicolon
token memcpy
token openbracket
token start
token comma
token amper
token address
token comma
token 8
token closebracket
token semicolon
token mprotect
token openbracket
token callsite
token minus
token greaterthan
token function_context
token minus
token greaterthan
token code
token comma
token getpagesize
token openbracket
token closebracket
token comma
token PROT_READ
token pipe
token PROT_EXEC
token closebracket
token semicolon
token printf
token openbracket
token quote
token SUCCESS
token Patching
token callsite
token to
token percent
token d
token backslash
token n
token quote
token comma
token callsite
token minus
token greaterthan
token pc
token closebracket
token semicolon
token closecurly
token char
determiner opensquare
close closesquare
end of array
type declaration: ['char', 'name', array {'size': '100'}]
token semicolon
token sprintf
token openbracket
token name
token comma
token quote
token Lazy
token compilation
token percent
token s
token quote
token comma
token function
token minus
token greaterthan
token name
token closebracket
token semicolon
token dump_machine_code
token openbracket
token name
token comma
token function
token minus
token greaterthan
token code
token closebracket
token semicolon
token dump_machine_code
token openbracket
token quote
token Main
token method
token again
token quote
token comma
token CODEGEN_CONTEXT
token minus
token greaterthan
token main_function_context
token minus
token greaterthan
token code
token closebracket
token semicolon
token char
determiner opensquare
close closesquare
end of array
type declaration: ['char', 'filename', array {'size': '100'}]
token semicolon
token sprintf
token openbracket
token filename
token comma
token quote
token percent
token s
token stop
token bin
token quote
token comma
token function
token minus
token greaterthan
token name
token closebracket
token semicolon
token FILE
token asterisk
token fp
token equals
token fopen
token openbracket
token filename
token comma
token quote
token wb
token quote
token closebracket
token semicolon
token fwrite
token openbracket
token function
token minus
token greaterthan
token code
token comma
token getpagesize
token openbracket
token closebracket
token comma
token 1
token comma
token fp
token closebracket
token semicolon
token fflush
token openbracket
token fp
token closebracket
token semicolon
token fclose
token openbracket
token fp
token closebracket
token semicolon
token int
determiner asterisk
type declaration: ['int', 'openbracket', pointer {}]
determiner jmp_func
type declaration: ['int', 'openbracket', pointer {}, name {'name': 'jmp_func'}]
token closebracket
token openbracket
token void
determiner equals
type declaration: ['void', 'closebracket', name {'name': 'equals'}]
token openbracket
token void
is a pointer ['void', '*']
determiner address
type declaration: ['void', '*', 'closebracket', name {'name': 'address'}]
token semicolon
token asm
token openbracket
token quote
token movq
token percent
token 0
token comma
token percent
token percent
token rax
token backslash
token n
token backslash
token movq
token percent
token 1
token comma
token percent
token percent
token rbx
token backslash
token n
token backslash
token movq
token percent
token 2
token comma
token percent
token percent
token rcx
token backslash
token n
token backslash
token movq
token percent
token 3
token comma
token percent
token percent
token rdx
token backslash
token n
token backslash
token movq
token percent
token 4
token comma
token percent
token percent
token rsi
token backslash
token n
token backslash
token movq
token percent
token 5
token comma
token percent
token percent
token rdi
token backslash
token n
token backslash
token movq
token percent
token 6
token comma
token percent
token percent
token r8
token backslash
token n
token backslash
token movq
token percent
token 7
token comma
token percent
token percent
token r9
token backslash
token n
token backslash
token movq
token percent
token 8
token comma
token percent
token percent
token r10
token backslash
token n
token backslash
token movq
token percent
token 9
token comma
token percent
token percent
token r11
token backslash
token n
token backslash
token movq
token percent
token 10
token comma
token percent
token percent
token r12
token backslash
token n
token backslash
token movq
token percent
token 11
token comma
token percent
token percent
token r13
token backslash
token n
token backslash
token movq
token percent
token 12
token comma
token percent
token percent
token r14
token quote
token colon
token quote
token plus
token r
token quote
token openbracket
token rax
token closebracket
token comma
token quote
token plus
token r
token quote
token openbracket
token rbx
token closebracket
token comma
token quote
token plus
token r
token quote
token openbracket
token rcx
token closebracket
token comma
token quote
token plus
token r
token quote
token openbracket
token rdx
token closebracket
token comma
token quote
token plus
token r
token quote
token openbracket
token rsi
token closebracket
token comma
token quote
token plus
token r
token quote
token openbracket
token rdi
token closebracket
token comma
token quote
token plus
token r
token quote
token openbracket
token r8
token closebracket
token comma
token quote
token plus
token r
token quote
token openbracket
token r9
token closebracket
token comma
token quote
token plus
token r
token quote
token openbracket
token r10
token closebracket
token comma
token quote
token plus
token r
token quote
token openbracket
token r11
token closebracket
token comma
token quote
token plus
token r
token quote
token openbracket
token r12
token closebracket
token comma
token quote
token plus
token r
token quote
token openbracket
token r13
token closebracket
token comma
token quote
token plus
token r
token quote
token openbracket
token r14
token closebracket
token closebracket
token semicolon
token long
token result
token equals
token jmp_func
token openbracket
token closebracket
token semicolon
token printf
token openbracket
token quote
token Compiled
token function
token result
token is
token percent
token ld
token backslash
token n
token quote
token comma
token result
token closebracket
token semicolon
token return
token result
token semicolon
token closecurly
token int
Found function, return type: ['int', 'codegen']
token struct
determiner asterisk
type declaration: [struct {}, 'ANF', pointer {}]
determiner anfs
type declaration: [struct {}, 'ANF', pointer {}, name {'name': 'anfs'}]
[struct {}, 'ANF', pointer {}, name {'name': 'anfs'}]
token closebracket
token opencurly
token struct
determiner asterisk
type declaration: [struct {}, 'CodeGenContext', pointer {}]
determiner codegen_context
type declaration: [struct {}, 'CodeGenContext', pointer {}, name {'name': 'codegen_context'}]
[struct {}, 'CodeGenContext', pointer {}, name {'name': 'codegen_context'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'CodeGenContext', pointer {}]
determiner closebracket
type declaration: [struct {}, 'CodeGenContext', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'CodeGenContext', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token anfs
token minus
token greaterthan
token codegen_context
token equals
token codegen_context
token semicolon
token codegen_context
token minus
token greaterthan
token heap_start
token equals
token anfs
token minus
token greaterthan
token heap_start
token semicolon
found slash
*
token * Set up address of codegen context so we can find function to compile *
found slash


token divide
token CODEGEN_CONTEXT
token equals
token codegen_context
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}, pointer {}]
determiner global_functions
type declaration: [struct {}, 'Function', pointer {}, pointer {}, name {'name': 'global_functions'}]
[struct {}, 'Function', pointer {}, pointer {}, name {'name': 'global_functions'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Function', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Function', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'global_function_length', name {'name': 'equals'}]
token 0
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Function', pointer {}]
determiner printf_function
type declaration: [struct {}, 'Function', pointer {}, name {'name': 'printf_function'}]
[struct {}, 'Function', pointer {}, name {'name': 'printf_function'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Function', name {'name': 'closebracket'}]
[struct {}, 'Function', name {'name': 'closebracket'}]
token closebracket
token semicolon
token printf_function
token minus
token greaterthan
token name
token equals
token quote
token printf
token quote
token semicolon
token printf_function
token minus
token greaterthan
token global
token equals
token 1
token semicolon
token global_functions
token opensquare
token global_function_length
token plus
token plus
token closesquare
token equals
token printf_function
token semicolon
token codegen_context
token minus
token greaterthan
token global_function_length
token equals
token global_function_length
token semicolon
token printf_function
token minus
token greaterthan
token code
token equals
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 4
type declaration: ['char', 'closebracket', pointer {}, name {'name': '4'}]
token closebracket
token semicolon
token printf_function
token minus
token greaterthan
token code
token equals
token openbracket
token char
is a pointer ['char', '*']
determiner printf
type declaration: ['char', '*', 'closebracket', name {'name': 'printf'}]
token semicolon
token printf_function
token minus
token greaterthan
token compiled
token equals
token 1
token semicolon
token codegen_context
token minus
token greaterthan
token global_functions
token equals
token global_functions
token semicolon
token codegen_context
token minus
token greaterthan
token user_functions
token equals
token anfs
token minus
token greaterthan
token functions
token semicolon
token codegen_context
token minus
token greaterthan
token function_length
token equals
token anfs
token minus
token greaterthan
token function_length
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token anfs
token minus
token greaterthan
token function_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token printf
token openbracket
token quote
token generating
token code
token region
token for
token function
token percent
token s
token percent
token d
token backslash
token n
token quote
token comma
token anfs
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token name
token comma
token getpagesize
token openbracket
token closebracket
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'FunctionContext', pointer {}]
determiner function_context
type declaration: [struct {}, 'FunctionContext', pointer {}, name {'name': 'function_context'}]
[struct {}, 'FunctionContext', pointer {}, name {'name': 'function_context'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'FunctionContext', name {'name': 'closebracket'}]
[struct {}, 'FunctionContext', name {'name': 'closebracket'}]
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'write_region', name {'name': 'equals'}]
token mmap
token openbracket
token NULL
token comma
token getpagesize
token openbracket
token closebracket
token comma
token PROT_READ
token pipe
token PROT_WRITE
token comma
token MAP_SHARED
token pipe
token MAP_ANONYMOUS
token comma
token minus
token 1
token comma
token 0
token closebracket
token semicolon
token if
token openbracket
token write_region
token equals
token equals
token NULL
token closebracket
token opencurly
token error_at_line
token openbracket
token minus
token ENOMEM
token comma
token errno
token comma
token __FILE__
token comma
token __LINE__
token comma
token quote
token couldn
token singlequote
token t
token allocate
token backslash
token n
token quote
token closebracket
token semicolon
token closecurly
token function_context
token minus
token greaterthan
token code
token equals
token write_region
token semicolon
token anfs
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token code
token equals
token write_region
token semicolon
token anfs
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token context
token equals
token function_context
token semicolon
token write_region
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0x55
token semicolon
token writecode
token openbracket
token codegen_context
token comma
token function_context
token comma
token anfs
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token anf
token closebracket
token semicolon
token write_region
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0x5d
token semicolon
token write_region
token opensquare
token function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0xc3
token semicolon
token mprotect
token openbracket
token write_region
token comma
token getpagesize
token openbracket
token closebracket
token comma
token PROT_READ
token pipe
token PROT_EXEC
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'n', name {'name': 'equals'}]
token 0
token semicolon
token n
token lessthan
token 100
token semicolon
token n
token plus
token plus
token closebracket
token opencurly
token if
token openbracket
token n
token percent
token 8
token equals
token equals
token 0
token closebracket
token opencurly
token printf
token openbracket
token quote
token backslash
token n
token quote
token closebracket
token semicolon
token closecurly
token printf
token openbracket
token quote
token percent
token x
token quote
token comma
token function_context
token minus
token greaterthan
token code
token opensquare
token n
token closesquare
token amper
token 0xff
token closebracket
token semicolon
token closecurly
token closecurly
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'main_write_region', name {'name': 'equals'}]
token mmap
token openbracket
token NULL
token comma
token getpagesize
token openbracket
token closebracket
token comma
token PROT_READ
token pipe
token PROT_WRITE
token comma
token MAP_SHARED
token pipe
token MAP_ANONYMOUS
token comma
token minus
token 1
token comma
token 0
token closebracket
token semicolon
token if
token openbracket
token main_write_region
token equals
token equals
token NULL
token closebracket
token opencurly
token error_at_line
token openbracket
token minus
token ENOMEM
token comma
token errno
token comma
token __FILE__
token comma
token __LINE__
token comma
token quote
token couldn
token singlequote
token t
token allocate
token backslash
token n
token quote
token closebracket
token semicolon
token closecurly
token struct
determiner asterisk
type declaration: [struct {}, 'FunctionContext', pointer {}]
determiner main_function_context
type declaration: [struct {}, 'FunctionContext', pointer {}, name {'name': 'main_function_context'}]
[struct {}, 'FunctionContext', pointer {}, name {'name': 'main_function_context'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'FunctionContext', name {'name': 'closebracket'}]
[struct {}, 'FunctionContext', name {'name': 'closebracket'}]
token closebracket
token semicolon
token codegen_context
token minus
token greaterthan
token main_function_context
token equals
token main_function_context
token semicolon
token main_function_context
token minus
token greaterthan
token code
token equals
token main_write_region
token semicolon
token printf
token openbracket
token quote
token GENERATING
token 55
token backslash
token n
token quote
token closebracket
token semicolon
token main_write_region
token opensquare
token main_function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0x55
token semicolon
token writecode
token openbracket
token codegen_context
token comma
token main_function_context
token comma
token anfs
token minus
token greaterthan
token anf
token closebracket
token semicolon
token main_write_region
token opensquare
token main_function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0x5d
token semicolon
token main_write_region
token opensquare
token main_function_context
token minus
token greaterthan
token pc
token plus
token plus
token closesquare
token equals
token 0xc3
token semicolon
token mprotect
token openbracket
token main_write_region
token comma
token getpagesize
token openbracket
token closebracket
token comma
token PROT_READ
token pipe
token PROT_EXEC
token closebracket
token semicolon
token dump_machine_code
token openbracket
token quote
token Main
token quote
token comma
token main_write_region
token closebracket
token semicolon
token FILE
token asterisk
token fp
token equals
token fopen
token openbracket
token quote
token main
token stop
token bin
token quote
token comma
token quote
token wb
token quote
token closebracket
token semicolon
token fwrite
token openbracket
token main_function_context
token minus
token greaterthan
token code
token comma
token getpagesize
token openbracket
token closebracket
token comma
token 1
token comma
token fp
token closebracket
token semicolon
token fflush
token openbracket
token fp
token closebracket
token semicolon
token fclose
token openbracket
token fp
token closebracket
token semicolon
token printf
token openbracket
token quote
token backslash
token n
token quote
token closebracket
token semicolon
token closecurly
token int
Found function, return type: ['int', 'precolour_method_call']
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner expression
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'expression'}]
[struct {}, 'Expression', pointer {}, name {'name': 'expression'}]
token comma
token char
is a pointer ['char', '*']
determiner real_registers
type declaration: ['char', '*', 'asterisk', name {'name': 'real_registers'}]
token comma
token int
determiner closebracket
type declaration: ['int', 'register_count', name {'name': 'closebracket'}]
token opencurly
token int
determiner equals
type declaration: ['int', 'current_register', name {'name': 'equals'}]
token 0
token semicolon
found slash
/
token  we need no longer skip rdi for it is used for function stub identifier since thats in r12

found slash
/
token  printf("Found expression type %d\n", expression->type);

token for
token openbracket
token int
determiner equals
type declaration: ['int', 'n', name {'name': 'equals'}]
token 0
token semicolon
token n
token lessthan
token expression
token minus
token greaterthan
token statements
token minus
token greaterthan
token statements
token semicolon
token n
token plus
token plus
token closebracket
token opencurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'k', name {'name': 'equals'}]
token 0
token semicolon
token k
token lessthan
token expression
token minus
token greaterthan
token exps
token opensquare
token n
token closesquare
token minus
token greaterthan
token expression_length
token semicolon
token k
token plus
token plus
token closebracket
token opencurly
token if
token openbracket
token current_register
token greaterthan
token equals
token register_count
token closebracket
token opencurly
token printf
token openbracket
token quote
token WARNING
token Need
token to
token spill
token backslash
token n
token quote
token closebracket
token semicolon
token closecurly
token switch
token openbracket
token expression
token minus
token greaterthan
token exps
token opensquare
token n
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token k
token closesquare
token minus
token greaterthan
token type
token closebracket
token opencurly
token case
token METHOD_CALL
token colon
token printf
token openbracket
token quote
token submethodcall
token backslash
token n
token quote
token closebracket
token semicolon
token precolour_method_call
token openbracket
token expression
token minus
token greaterthan
token exps
token opensquare
token n
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token k
token closesquare
token comma
token real_registers
token comma
token register_count
token closebracket
token semicolon
token break
token semicolon
token closecurly
token if
token openbracket
token expression
token minus
token greaterthan
token exps
token opensquare
token n
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token k
token closesquare
token minus
token greaterthan
token tag
token exclamation
token equals
token IS_AST_METADATA
token closebracket
token opencurly
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'assigned_register', name {'name': 'equals'}]
token real_registers
token opensquare
token current_register
token plus
token plus
token closesquare
token semicolon
token expression
token minus
token greaterthan
token exps
token opensquare
token n
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token k
token closesquare
token minus
token greaterthan
token chosen_register
token equals
token assigned_register
token semicolon
token printf
token openbracket
token quote
token Found
token expression
token in
token method
token call
token percent
token d
token percent
token s
token percent
token s
token backslash
token n
token quote
token comma
token expression
token minus
token greaterthan
token exps
token opensquare
token n
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token k
token closesquare
token minus
token greaterthan
token type
token comma
token expression
token minus
token greaterthan
token exps
token opensquare
token n
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token k
token closesquare
token minus
token greaterthan
token stringvalue
token comma
token assigned_register
token closebracket
token semicolon
token break
token semicolon
token closecurly
token closecurly
token closecurly
token closecurly
token int
Found function, return type: ['int', 'precolour_anf']
token struct
determiner asterisk
type declaration: [struct {}, 'NormalForm', pointer {}]
determiner anfs
type declaration: [struct {}, 'NormalForm', pointer {}, name {'name': 'anfs'}]
[struct {}, 'NormalForm', pointer {}, name {'name': 'anfs'}]
token comma
token char
is a pointer ['char', '*']
determiner real_registers
type declaration: ['char', '*', 'asterisk', name {'name': 'real_registers'}]
token comma
token int
determiner closebracket
type declaration: ['int', 'register_count', name {'name': 'closebracket'}]
token opencurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token anfs
token minus
token greaterthan
token count
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token switch
token openbracket
token anfs
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token type
token closebracket
token opencurly
token case
token METHOD_CALL
token colon
token printf
token openbracket
token quote
token Found
token method
token call
token backslash
token n
token quote
token closebracket
token semicolon
token precolour_method_call
token openbracket
token anfs
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token comma
token real_registers
token comma
token register_count
token closebracket
token semicolon
token break
token semicolon
token closecurly
token closecurly
token return
token 0
token semicolon
token closecurly
token hash
Found define BINOP = 0
token hash
Found define MULTIARY = 1
token hash
Found define UNARY = 2
token struct
determiner asterisk
type declaration: [struct {}, 'AssignmentPair', pointer {}]
determiner assignregisters
type declaration: [struct {}, 'AssignmentPair', pointer {}, name {'name': 'assignregisters'}]
[struct {}, 'AssignmentPair', pointer {}, name {'name': 'assignregisters'}]
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'NormalForm', pointer {}]
determiner anf
type declaration: [struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
[struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
token closebracket
token opencurly
token struct
determiner asterisk
type declaration: [struct {}, 'Assignment', pointer {}]
determiner assignments
type declaration: [struct {}, 'Assignment', pointer {}, name {'name': 'assignments'}]
[struct {}, 'Assignment', pointer {}, name {'name': 'assignments'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Assignment', name {'name': 'closebracket'}]
[struct {}, 'Assignment', name {'name': 'closebracket'}]
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token 100
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token assignments
token opensquare
token x
token closesquare
token stop
token chosen_register
token equals
token NULL
token semicolon
token closecurly
token int
determiner equals
type declaration: ['int', 'assignment_counter', name {'name': 'equals'}]
token 0
token semicolon
token int
determiner equals
type declaration: ['int', 'counter', name {'name': 'equals'}]
token 0
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token anf
token minus
token greaterthan
token count
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token struct
determiner asterisk
type declaration: [struct {}, 'ExpressionSource', pointer {}]
determiner exps
type declaration: [struct {}, 'ExpressionSource', pointer {}, name {'name': 'exps'}]
[struct {}, 'ExpressionSource', pointer {}, name {'name': 'exps'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
[struct {}, 'ExpressionSource', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner expressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'expressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'expressions'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token exps
token minus
token greaterthan
token expressions
token equals
token expressions
token semicolon
token exps
token minus
token greaterthan
token expression_length
token equals
token 0
token semicolon
token exps
token minus
token greaterthan
token expressions
token opensquare
token exps
token minus
token greaterthan
token expression_length
token plus
token plus
token closesquare
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token exps
token equals
token exps
token semicolon
token if
token openbracket
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token chosen_register
token exclamation
token equals
token 0
token closebracket
token opencurly
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token chosen_register
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token chosen_register
token semicolon
token printf
token openbracket
token quote
token FOUND
token PRECOLOURED
token REGISTER
token percent
token p
token backslash
token n
token quote
token comma
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token chosen_register
token closebracket
token semicolon
token closecurly
token switch
token openbracket
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token type
token closebracket
token opencurly
token case
token METHOD_CALL
token colon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'key', name {'name': 'equals'}]
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token char
determiner closebracket
type declaration: ['char', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token sprintf
token openbracket
token key
token comma
token quote
token t
token percent
token d
token quote
token comma
token counter
token plus
token plus
token closebracket
token semicolon
token printf
token openbracket
token quote
token Method
token call
token Assigning
token percent
token d
token to
token variable
token percent
token s
token backslash
token n
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token id
token comma
token key
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token type
token equals
token MULTIARY
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token expression
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable_length
token equals
token strlen
token openbracket
token key
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable
token equals
token key
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', '_method_variable_key', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token closebracket
token semicolon
token sprintf
token openbracket
token _method_variable_key
token comma
token quote
token percent
token d
token minus
token percent
token s
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token id
token comma
token key
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable_key
token equals
token _method_variable_key
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token symbol
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token symbol
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token left
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token variable
token semicolon
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token variable
token equals
token key
token semicolon
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token variable_length
token equals
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable_length
token semicolon
token char
determiner opensquare
close closesquare
end of array
type declaration: ['char', 'method_call_text', array {'size': '300'}]
token semicolon
token memset
token openbracket
token method_call_text
token comma
token singlequote
token backslash
token 0
token singlequote
token comma
token 300
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'position', name {'name': 'equals'}]
token 0
token semicolon
token int
determiner equals
type declaration: ['int', 'first', name {'name': 'equals'}]
token 0
token semicolon
token int
determiner equals
type declaration: ['int', 'reference_count', name {'name': 'equals'}]
token 0
token semicolon
token int
determiner equals
type declaration: ['int', 'reference_variable_length_count', name {'name': 'equals'}]
token 0
token semicolon
token char
is a pointer ['char', '*']
determiner references
type declaration: ['char', '*', 'asterisk', name {'name': 'references'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token char
is a pointer ['char', '*']
determiner closebracket
type declaration: ['char', '*', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token int
is a pointer ['int', '*']
determiner reference_variable_length
type declaration: ['int', '*', 'asterisk', name {'name': 'reference_variable_length'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token int
is a pointer ['int', '*']
determiner closebracket
type declaration: ['int', '*', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner reference_expressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'reference_expressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'reference_expressions'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'reference_expressions_count', name {'name': 'equals'}]
token 0
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token references
token equals
token references
token semicolon
found slash
/
token  comma separated expressions are statements 

token for
token openbracket
token int
determiner equals
type declaration: ['int', 'y', name {'name': 'equals'}]
token 0
token semicolon
token y
token lessthan
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token statements
token minus
token greaterthan
token statements
token semicolon
token y
token plus
token plus
token closebracket
token opencurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'e', name {'name': 'equals'}]
token 0
token semicolon
token e
token lessthan
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token y
token closesquare
token minus
token greaterthan
token expression_length
token semicolon
token e
token plus
token plus
token closebracket
token opencurly
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'method_variable_key', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token closebracket
token semicolon
token sprintf
token openbracket
token method_variable_key
token comma
token quote
token percent
token d
token minus
token percent
token s
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token y
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token e
token closesquare
token minus
token greaterthan
token id
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token y
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token e
token closesquare
token minus
token greaterthan
token variable
token closebracket
token semicolon
token references
token opensquare
token reference_count
token plus
token plus
token closesquare
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token y
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token e
token closesquare
token minus
token greaterthan
token variable
token semicolon
token reference_expressions
token opensquare
token reference_expressions_count
token plus
token plus
token closesquare
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token y
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token e
token closesquare
token semicolon
token int
is a pointer ['int', '*']
determiner equals
type declaration: ['int', '*', 'method_variable_key_length', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token int
determiner closebracket
type declaration: ['int', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token asterisk
token method_variable_key_length
token equals
token strlen
token openbracket
token method_variable_key
token closebracket
token semicolon
token reference_variable_length
token opensquare
token reference_variable_length_count
token plus
token plus
token closesquare
token equals
token method_variable_key_length
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'c', name {'name': 'equals'}]
token 0
token semicolon
token c
token lessthan
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token y
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token e
token closesquare
token minus
token greaterthan
token variable_length
token semicolon
token c
token plus
token plus
token closebracket
token opencurly
token method_call_text
token opensquare
token position
token plus
token plus
token closesquare
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token y
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token e
token closesquare
token minus
token greaterthan
token variable
token opensquare
token c
token closesquare
token semicolon
token closecurly
token if
token openbracket
token first
token equals
token equals
token 1
token closebracket
token opencurly
token method_call_text
token opensquare
token position
token plus
token plus
token closesquare
token equals
token singlequote
token singlequote
token semicolon
token method_call_text
token opensquare
token position
token plus
token plus
token closesquare
token equals
token singlequote
token comma
token singlequote
token semicolon
token method_call_text
token opensquare
token position
token plus
token plus
token closesquare
token equals
token singlequote
token singlequote
token semicolon
token closecurly
token if
token openbracket
token first
token equals
token equals
token 0
token closebracket
token opencurly
token method_call_text
token opensquare
token position
token plus
token plus
token closesquare
token equals
token singlequote
token openbracket
token singlequote
token semicolon
token first
token equals
token 1
token semicolon
token closecurly
token closecurly
token closecurly
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_length
token equals
token reference_count
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_variable_length
token equals
token reference_variable_length
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_expressions
token equals
token reference_expressions
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_expressions_length
token equals
token reference_expressions_count
token semicolon
token method_call_text
token opensquare
token position
token plus
token plus
token closesquare
token equals
token singlequote
token closebracket
token singlequote
token semicolon
found slash
/
token  printf("%s\n", method_call_text);

token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'text', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 400
type declaration: ['char', 'closebracket', pointer {}, name {'name': '400'}]
token closebracket
token semicolon
token sprintf
token openbracket
token key
token comma
token quote
token t
token percent
token d
token quote
token comma
token counter
token plus
token plus
token closebracket
token semicolon
token sprintf
token openbracket
token text
token comma
token quote
token percent
token s
token lessthan
token minus
token percent
token s
token quote
token comma
token key
token comma
token method_call_text
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token text
token equals
token text
token semicolon
token assignment_counter
token plus
token plus
token semicolon
token break
token semicolon
token case
token IDENTIFIER
token colon
token if
token openbracket
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token assigned
token equals
token equals
token 0
token closebracket
token opencurly
token printf
token openbracket
token quote
token Created
token a
token identifier
token reference
token backslash
token n
token quote
token closebracket
token semicolon
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token assigned
token equals
token 1
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token type
token equals
token UNARY
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token expression
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token symbol
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token symbol
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token stringvalue
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', '_identifier_variable_key', name {'name': 'equals'}]
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token closebracket
token semicolon
token sprintf
token openbracket
token _identifier_variable_key
token comma
token quote
token percent
token d
token minus
token percent
token s
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token id
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token stringvalue
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable_key
token equals
token _identifier_variable_key
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable_length
token equals
token strlen
token openbracket
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable
token closebracket
token semicolon
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token variable_length
token equals
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable_length
token semicolon
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token variable
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token stringvalue
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'text5', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner references
type declaration: ['char', '*', 'asterisk', name {'name': 'references'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token char
is a pointer ['char', '*']
determiner closebracket
type declaration: ['char', '*', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token int
is a pointer ['int', '*']
determiner reference_variable_length
type declaration: ['int', '*', 'asterisk', name {'name': 'reference_variable_length'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token int
is a pointer ['int', '*']
determiner closebracket
type declaration: ['int', '*', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner identifier_reference_expressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'identifier_reference_expressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'identifier_reference_expressions'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'identifier_reference_count', name {'name': 'equals'}]
token 0
token semicolon
token int
determiner equals
type declaration: ['int', 'identifier_reference_variable_count', name {'name': 'equals'}]
token 0
token semicolon
token int
determiner equals
type declaration: ['int', 'identifier_reference_expression_count', name {'name': 'equals'}]
token 0
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token references
token equals
token references
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_variable_length
token equals
token reference_variable_length
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_expressions
token equals
token identifier_reference_expressions
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'identifier_variable_key', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token closebracket
token semicolon
token sprintf
token openbracket
token identifier_variable_key
token comma
token quote
token percent
token d
token minus
token percent
token s
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token id
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token variable
token closebracket
token semicolon
token int
is a pointer ['int', '*']
determiner equals
type declaration: ['int', '*', 'identifier_variable_key_length', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token int
determiner closebracket
type declaration: ['int', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token asterisk
token identifier_variable_key_length
token equals
token strlen
token openbracket
token identifier_variable_key
token closebracket
token semicolon
token reference_variable_length
token opensquare
token identifier_reference_variable_count
token plus
token plus
token closesquare
token equals
token identifier_variable_key_length
token semicolon
token identifier_reference_expressions
token opensquare
token identifier_reference_expression_count
token plus
token plus
token closesquare
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token semicolon
token references
token opensquare
token identifier_reference_count
token plus
token plus
token closesquare
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token variable
token semicolon
token memset
token openbracket
token text5
token comma
token singlequote
token backslash
token 0
token singlequote
token comma
token 100
token closebracket
token semicolon
token sprintf
token openbracket
token text5
token comma
token quote
token percent
token s
token lessthan
token minus
token percent
token s
token quote
token comma
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable
token comma
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_length
token equals
token identifier_reference_count
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token text
token equals
token text5
token semicolon
token assignment_counter
token plus
token plus
token semicolon
token closecurly
token break
token semicolon
token case
token MEMBER_ACCESS
token colon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'key2', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 50
type declaration: ['char', 'closebracket', pointer {}, name {'name': '50'}]
token closebracket
token semicolon
token sprintf
token openbracket
token key2
token comma
token quote
token t
token percent
token d
token quote
token comma
token counter
token plus
token plus
token closebracket
token semicolon
token printf
token openbracket
token quote
token Member
token lookup
token Assigning
token percent
token d
token to
token variable
token percent
token s
token backslash
token n
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token id
token comma
token key2
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token type
token equals
token BINOP
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable
token equals
token key2
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token expression
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable_length
token equals
token strlen
token openbracket
token key2
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', '_member_variable_key', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token closebracket
token semicolon
token sprintf
token openbracket
token _member_variable_key
token comma
token quote
token percent
token d
token minus
token percent
token s
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token id
token comma
token key2
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable_key
token equals
token _member_variable_key
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token symbol
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token symbol
token semicolon
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token variable
token equals
token key2
token semicolon
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token variable_length
token equals
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable_length
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'text4', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token closebracket
token semicolon
token sprintf
token openbracket
token key2
token comma
token quote
token t
token percent
token d
token quote
token comma
token counter
token plus
token plus
token closebracket
token semicolon
token memset
token openbracket
token text4
token comma
token singlequote
token backslash
token 0
token singlequote
token comma
token 100
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'member_reference_count', name {'name': 'equals'}]
token 0
token semicolon
token char
is a pointer ['char', '*']
determiner member_references
type declaration: ['char', '*', 'asterisk', name {'name': 'member_references'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token char
is a pointer ['char', '*']
determiner closebracket
type declaration: ['char', '*', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner member_reference_expressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'member_reference_expressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'member_reference_expressions'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token int
is a pointer ['int', '*']
determiner member_reference_variable_length
type declaration: ['int', '*', 'asterisk', name {'name': 'member_reference_variable_length'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token int
determiner closebracket
type declaration: ['int', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token int
determiner equals
type declaration: ['int', 'member_reference_variable_length_count', name {'name': 'equals'}]
token 0
token semicolon
token int
determiner equals
type declaration: ['int', 'member_reference_expression_count', name {'name': 'equals'}]
token 0
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'member_variable_key', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token closebracket
token semicolon
token sprintf
token openbracket
token member_variable_key
token comma
token quote
token percent
token d
token minus
token percent
token s
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token minus
token greaterthan
token id
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token minus
token greaterthan
token variable
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token references
token equals
token member_references
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_expressions
token equals
token member_reference_expressions
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token references
token opensquare
token member_reference_count
token plus
token plus
token closesquare
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token minus
token greaterthan
token variable
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_expressions
token opensquare
token member_reference_expression_count
token plus
token plus
token closesquare
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_expressions
token opensquare
token member_reference_expression_count
token plus
token plus
token closesquare
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 1
token closesquare
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_expressions_length
token equals
token member_reference_expression_count
token semicolon
token int
is a pointer ['int', '*']
determiner equals
type declaration: ['int', '*', 'member_variable_key_length', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token int
determiner closebracket
type declaration: ['int', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token asterisk
token member_variable_key_length
token equals
token strlen
token openbracket
token member_variable_key
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_variable_length
token opensquare
token member_reference_variable_length_count
token plus
token plus
token closesquare
token equals
token member_variable_key_length
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_variable_length
token equals
token member_reference_variable_length
token semicolon
token sprintf
token openbracket
token text4
token comma
token quote
token percent
token s
token lessthan
token minus
token percent
token s
token percent
token s
token quote
token comma
token key2
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token minus
token greaterthan
token variable
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 1
token closesquare
token minus
token greaterthan
token variable
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token text
token equals
token text4
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_length
token equals
token member_reference_count
token semicolon
token assignment_counter
token plus
token plus
token semicolon
token break
token semicolon
token case
token ADD
token colon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'key3', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token closebracket
token semicolon
token sprintf
token openbracket
token key3
token comma
token quote
token t
token percent
token d
token quote
token comma
token counter
token plus
token plus
token closebracket
token semicolon
token printf
token openbracket
token quote
token Add
token operation
token Assigning
token percent
token d
token to
token variable
token percent
token s
token backslash
token n
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token id
token comma
token key3
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token type
token equals
token BINOP
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable
token equals
token key3
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token expression
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable_length
token equals
token strlen
token openbracket
token key3
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', '_add_variable_key', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token closebracket
token semicolon
token sprintf
token openbracket
token _add_variable_key
token comma
token quote
token percent
token d
token minus
token percent
token s
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token id
token comma
token key3
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable_key
token equals
token _add_variable_key
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token symbol
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token symbol
token semicolon
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token variable
token equals
token key3
token semicolon
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token variable_length
token equals
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable_length
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token left
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token minus
token greaterthan
token variable
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token right
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 1
token closesquare
token minus
token greaterthan
token variable
token semicolon
token int
determiner equals
type declaration: ['int', 'add_reference_count', name {'name': 'equals'}]
token 0
token semicolon
token int
determiner equals
type declaration: ['int', 'add_reference_variable_length_count', name {'name': 'equals'}]
token 0
token semicolon
token int
determiner equals
type declaration: ['int', 'add_reference_expressions_count', name {'name': 'equals'}]
token 0
token semicolon
token char
is a pointer ['char', '*']
determiner add_references
type declaration: ['char', '*', 'asterisk', name {'name': 'add_references'}]
token equals
token calloc
token openbracket
token 200
token comma
token sizeof
token openbracket
token char
is a pointer ['char', '*']
determiner closebracket
type declaration: ['char', '*', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner add_reference_expressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'add_reference_expressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'add_reference_expressions'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token int
is a pointer ['int', '*']
determiner add_reference_variable_length
type declaration: ['int', '*', 'asterisk', name {'name': 'add_reference_variable_length'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token int
determiner closebracket
type declaration: ['int', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token int
is a pointer ['int', '*']
determiner equals
type declaration: ['int', '*', 'left_length', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token int
determiner closebracket
type declaration: ['int', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token int
is a pointer ['int', '*']
determiner equals
type declaration: ['int', '*', 'right_length', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token int
determiner closebracket
type declaration: ['int', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'add_variable_key_left', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'add_variable_key_right', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token closebracket
token semicolon
token sprintf
token openbracket
token add_variable_key_left
token comma
token quote
token percent
token d
token minus
token percent
token s
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token minus
token greaterthan
token id
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token minus
token greaterthan
token variable
token closebracket
token semicolon
token sprintf
token openbracket
token add_variable_key_right
token comma
token quote
token percent
token d
token minus
token percent
token s
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 1
token closesquare
token minus
token greaterthan
token id
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 1
token closesquare
token minus
token greaterthan
token variable
token closebracket
token semicolon
token asterisk
token left_length
token equals
token strlen
token openbracket
token add_variable_key_left
token closebracket
token semicolon
token asterisk
token right_length
token equals
token strlen
token openbracket
token add_variable_key_right
token closebracket
token semicolon
token add_reference_variable_length
token opensquare
token add_reference_variable_length_count
token plus
token plus
token closesquare
token equals
token left_length
token semicolon
token add_references
token opensquare
token add_reference_count
token plus
token plus
token closesquare
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token minus
token greaterthan
token variable
token semicolon
token add_references
token opensquare
token add_reference_count
token plus
token plus
token closesquare
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 1
token closesquare
token minus
token greaterthan
token variable
token semicolon
token add_reference_variable_length
token opensquare
token add_reference_variable_length_count
token plus
token plus
token closesquare
token equals
token right_length
token semicolon
token add_reference_expressions
token opensquare
token add_reference_expressions_count
token plus
token plus
token closesquare
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token semicolon
token add_reference_expressions
token opensquare
token add_reference_expressions_count
token plus
token plus
token closesquare
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 1
token closesquare
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token references
token equals
token add_references
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_expressions
token equals
token add_reference_expressions
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_expressions_length
token equals
token add_reference_expressions_count
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_variable_length
token equals
token add_reference_variable_length
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'text2', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token closebracket
token semicolon
token memset
token openbracket
token text2
token comma
token singlequote
token backslash
token 0
token singlequote
token comma
token 100
token closebracket
token semicolon
token sprintf
token openbracket
token text2
token comma
token quote
token percent
token s
token lessthan
token minus
token percent
token s
token percent
token s
token percent
token s
token quote
token comma
token key3
token comma
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token left
token comma
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token symbol
token comma
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token right
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token text
token equals
token text2
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_length
token equals
token add_reference_count
token semicolon
token assignment_counter
token plus
token plus
token semicolon
token break
token semicolon
token case
token RETURN
token colon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'key4', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 50
type declaration: ['char', 'closebracket', pointer {}, name {'name': '50'}]
token closebracket
token semicolon
token sprintf
token openbracket
token key4
token comma
token quote
token t
token percent
token d
token quote
token comma
token counter
token plus
token plus
token closebracket
token semicolon
token printf
token openbracket
token quote
token Return
token operation
token Assigning
token percent
token d
token to
token variable
token percent
token s
token backslash
token n
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token id
token comma
token key4
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token type
token equals
token UNARY
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable
token equals
token key4
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token expression
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable_length
token equals
token strlen
token openbracket
token key3
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', '_return_variable_key', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token closebracket
token semicolon
token sprintf
token openbracket
token _return_variable_key
token comma
token quote
token percent
token d
token minus
token percent
token s
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token id
token comma
token key4
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable_key
token equals
token _return_variable_key
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token symbol
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token symbol
token semicolon
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token variable
token equals
token key3
token semicolon
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token variable_length
token equals
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token variable_length
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token left
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token minus
token greaterthan
token variable
token semicolon
token int
determiner equals
type declaration: ['int', 'return_reference_count', name {'name': 'equals'}]
token 0
token semicolon
token int
determiner equals
type declaration: ['int', 'return_reference_variable_length_count', name {'name': 'equals'}]
token 0
token semicolon
token int
determiner equals
type declaration: ['int', 'return_reference_expressions_count', name {'name': 'equals'}]
token 0
token semicolon
token char
is a pointer ['char', '*']
determiner return_references
type declaration: ['char', '*', 'asterisk', name {'name': 'return_references'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token char
is a pointer ['char', '*']
determiner closebracket
type declaration: ['char', '*', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}, pointer {}]
determiner return_reference_expressions
type declaration: [struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'return_reference_expressions'}]
[struct {}, 'Expression', pointer {}, pointer {}, name {'name': 'return_reference_expressions'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Expression', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Expression', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token int
is a pointer ['int', '*']
determiner return_reference_variable_length
type declaration: ['int', '*', 'asterisk', name {'name': 'return_reference_variable_length'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token int
determiner closebracket
type declaration: ['int', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token int
is a pointer ['int', '*']
determiner equals
type declaration: ['int', '*', 'return_left_length', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token int
determiner closebracket
type declaration: ['int', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'return_variable_key_left', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token closebracket
token semicolon
token sprintf
token openbracket
token return_variable_key_left
token comma
token quote
token percent
token d
token minus
token percent
token s
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token minus
token greaterthan
token id
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token minus
token greaterthan
token variable
token closebracket
token semicolon
token asterisk
token left_length
token equals
token strlen
token openbracket
token return_variable_key_left
token closebracket
token semicolon
token return_reference_variable_length
token opensquare
token return_reference_variable_length_count
token plus
token plus
token closesquare
token equals
token return_left_length
token semicolon
token return_references
token opensquare
token return_reference_count
token plus
token plus
token closesquare
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token minus
token greaterthan
token variable
token semicolon
token return_reference_expressions
token opensquare
token return_reference_expressions_count
token plus
token plus
token closesquare
token equals
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token minus
token greaterthan
token expressions
token opensquare
token 0
token closesquare
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token references
token equals
token return_references
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_expressions
token equals
token return_reference_expressions
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_expressions_length
token equals
token return_reference_expressions_count
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_variable_length
token equals
token return_reference_variable_length
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'return_text', name {'name': 'equals'}]
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner 100
type declaration: ['char', 'closebracket', pointer {}, name {'name': '100'}]
token closebracket
token semicolon
token memset
token openbracket
token return_text
token comma
token singlequote
token backslash
token 0
token singlequote
token comma
token 100
token closebracket
token semicolon
token sprintf
token openbracket
token return_text
token comma
token quote
token percent
token s
token lessthan
token minus
token percent
token s
token percent
token s
token quote
token comma
token key4
token comma
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token left
token comma
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token symbol
token closebracket
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token text
token equals
token return_text
token semicolon
token assignments
token opensquare
token assignment_counter
token closesquare
token stop
token reference_length
token equals
token return_reference_count
token semicolon
token assignment_counter
token plus
token plus
token semicolon
token break
token semicolon
token default
token colon
token printf
token openbracket
token quote
token DEFAULT
token CASE
token percent
token d
token backslash
token n
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token type
token closebracket
token semicolon
token closecurly
token closecurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token assignment_counter
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token printf
token openbracket
token quote
token percent
token s
token backslash
token n
token quote
token comma
token assignments
token opensquare
token x
token closesquare
token stop
token text
token closebracket
token semicolon
token closecurly
token struct
determiner asterisk
type declaration: [struct {}, 'AssignmentPair', pointer {}]
determiner assignment_pair
type declaration: [struct {}, 'AssignmentPair', pointer {}, name {'name': 'assignment_pair'}]
[struct {}, 'AssignmentPair', pointer {}, name {'name': 'assignment_pair'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'AssignmentPair', name {'name': 'closebracket'}]
[struct {}, 'AssignmentPair', name {'name': 'closebracket'}]
token closebracket
token semicolon
token assignment_pair
token minus
token greaterthan
token assignments
token equals
token assignments
token semicolon
token assignment_pair
token minus
token greaterthan
token assignment_length
token equals
token assignment_counter
token semicolon
token anf
token minus
token greaterthan
token assignment_pair
token equals
token assignment_pair
token semicolon
token return
token assignment_pair
token semicolon
token closecurly
token struct
determiner asterisk
type declaration: [struct {}, 'RangePair', pointer {}]
determiner liveranges
type declaration: [struct {}, 'RangePair', pointer {}, name {'name': 'liveranges'}]
[struct {}, 'RangePair', pointer {}, name {'name': 'liveranges'}]
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'NormalForm', pointer {}]
determiner anf
type declaration: [struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
[struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
token comma
token struct
determiner asterisk
type declaration: [struct {}, 'AssignmentPair', pointer {}]
determiner assignment_pair
type declaration: [struct {}, 'AssignmentPair', pointer {}, name {'name': 'assignment_pair'}]
[struct {}, 'AssignmentPair', pointer {}, name {'name': 'assignment_pair'}]
token closebracket
token opencurly
token struct
determiner asterisk
type declaration: [struct {}, 'hashmap', pointer {}]
determiner variables
type declaration: [struct {}, 'hashmap', pointer {}, name {'name': 'variables'}]
[struct {}, 'hashmap', pointer {}, name {'name': 'variables'}]
token equals
token calloc
token openbracket
token 10
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'hashmap', name {'name': 'closebracket'}]
[struct {}, 'hashmap', name {'name': 'closebracket'}]
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner variables_list
type declaration: ['char', '*', 'asterisk', name {'name': 'variables_list'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token char
is a pointer ['char', '*']
determiner closebracket
type declaration: ['char', '*', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token int
is a pointer ['int', '*']
determiner variables_list_length
type declaration: ['int', '*', 'asterisk', name {'name': 'variables_list_length'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token int
is a pointer ['int', '*']
determiner closebracket
type declaration: ['int', '*', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token int
determiner equals
type declaration: ['int', 'variable_length', name {'name': 'equals'}]
token 0
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'i', name {'name': 'equals'}]
token 0
token semicolon
token i
token lessthan
token 10
token semicolon
token i
token plus
token plus
token closebracket
token opencurly
token variables
token opensquare
token i
token closesquare
token stop
token id
token equals
token i
token semicolon
token closecurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token assignment_pair
token minus
token greaterthan
token assignment_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
found slash
*
token char key[50];
      memset(key, '\0', 50);
      sprintf(key, "%d", anfs->anf->expressions[x]->id);*
found slash


token divide
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'r', name {'name': 'equals'}]
token 0
token semicolon
token r
token lessthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token reference_length
token semicolon
token r
token plus
token plus
token closebracket
token opencurly
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'reference', name {'name': 'equals'}]
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token references
token opensquare
token r
token closesquare
token semicolon
token printf
token openbracket
token quote
token percent
token s
token backslash
token n
token quote
token comma
token reference
token closebracket
token semicolon
token printf
token openbracket
token quote
token looking
token up
token percent
token s
token backslash
token n
token quote
token comma
token reference
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'hashmap_value', pointer {}]
determiner lookup
type declaration: [struct {}, 'hashmap_value', pointer {}, name {'name': 'lookup'}]
[struct {}, 'hashmap_value', pointer {}, name {'name': 'lookup'}]
token equals
token get_hashmap
token openbracket
token amper
token variables
token opensquare
token 0
token closesquare
token comma
token reference
token closebracket
token semicolon
token if
token openbracket
token lookup
token minus
token greaterthan
token set
token equals
token equals
token 0
token closebracket
token opencurly
token printf
token openbracket
token quote
token key
token doesn
token singlequote
token t
token exist
token backslash
token n
token quote
token closebracket
token semicolon
token set_hashmap
token openbracket
token amper
token variables
token opensquare
token 0
token closesquare
token comma
token reference
token comma
token openbracket
token uintptr_t
token closebracket
token amper
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token comma
token asterisk
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token reference_variable_length
token opensquare
token r
token closesquare
token closebracket
token semicolon
token variables_list
token opensquare
token variable_length
token closesquare
token equals
token reference
token semicolon
token variables_list_length
token opensquare
token variable_length
token closesquare
token equals
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token reference_variable_length
token opensquare
token r
token closesquare
token semicolon
token variable_length
token plus
token plus
token semicolon
token closecurly
token else
token opencurly
token printf
token openbracket
token quote
token key
token exists
token backslash
token n
token quote
token closebracket
token semicolon
token closecurly
token closecurly
token closecurly
token struct
determiner asterisk
type declaration: [struct {}, 'Range', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Range', pointer {}, pointer {}]
determiner ranges
type declaration: [struct {}, 'Range', pointer {}, pointer {}, name {'name': 'ranges'}]
[struct {}, 'Range', pointer {}, pointer {}, name {'name': 'ranges'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Range', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Range', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Range', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'range_count', name {'name': 'equals'}]
token 0
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'v', name {'name': 'equals'}]
token 0
token semicolon
token v
token lessthan
token variable_length
token semicolon
token v
token plus
token plus
token closebracket
token opencurly
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'search_target', name {'name': 'equals'}]
token variables_list
token opensquare
token v
token closesquare
token semicolon
token int
determiner equals
type declaration: ['int', 'start_position_a', name {'name': 'equals'}]
token minus
token 1
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Assignment', pointer {}]
determiner start_assignment
type declaration: [struct {}, 'Assignment', pointer {}, name {'name': 'start_assignment'}]
[struct {}, 'Assignment', pointer {}, name {'name': 'start_assignment'}]
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Assignment', pointer {}]
determiner end_assignment
type declaration: [struct {}, 'Assignment', pointer {}, name {'name': 'end_assignment'}]
[struct {}, 'Assignment', pointer {}, name {'name': 'end_assignment'}]
token semicolon
token int
determiner equals
type declaration: ['int', 'end_position_a', name {'name': 'equals'}]
token minus
token 1
token semicolon
token int
determiner equals
type declaration: ['int', 'variable_length', name {'name': 'equals'}]
token asterisk
token variables_list_length
token opensquare
token v
token closesquare
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token assignment_pair
token minus
token greaterthan
token assignment_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token if
token openbracket
token strcmp
token openbracket
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token variable
token comma
token search_target
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token start_position_a
token equals
token x
token semicolon
token start_assignment
token equals
token amper
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token semicolon
token break
token semicolon
token closecurly
token closecurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token assignment_pair
token minus
token greaterthan
token assignment_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token if
token openbracket
token strcmp
token openbracket
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token variable
token comma
token search_target
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token end_position_a
token equals
token x
token semicolon
token end_assignment
token equals
token amper
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token semicolon
token closecurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'y', name {'name': 'equals'}]
token 0
token semicolon
token y
token lessthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token reference_length
token semicolon
token y
token plus
token plus
token closebracket
token opencurly
token if
token openbracket
token strcmp
token openbracket
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token references
token opensquare
token y
token closesquare
token comma
token search_target
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token end_position_a
token equals
token x
token semicolon
token end_assignment
token equals
token amper
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token semicolon
token closecurly
token closecurly
token closecurly
token struct
determiner asterisk
type declaration: [struct {}, 'Range', pointer {}]
determiner range
type declaration: [struct {}, 'Range', pointer {}, name {'name': 'range'}]
[struct {}, 'Range', pointer {}, name {'name': 'range'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Range', name {'name': 'closebracket'}]
[struct {}, 'Range', name {'name': 'closebracket'}]
token closebracket
token semicolon
token range
token minus
token greaterthan
token start_position
token equals
token start_position_a
token semicolon
token range
token minus
token greaterthan
token end_position
token equals
token end_position_a
token semicolon
token range
token minus
token greaterthan
token variable
token equals
token search_target
token semicolon
token range
token minus
token greaterthan
token variable_length
token equals
token variable_length
token semicolon
token range
token minus
token greaterthan
token start_assignment
token equals
token start_assignment
token semicolon
token range
token minus
token greaterthan
token end_assignment
token equals
token end_assignment
token semicolon
token ranges
token opensquare
token range_count
token plus
token plus
token closesquare
token equals
token range
token semicolon
token printf
token openbracket
token quote
token Variable
token percent
token s
token appears
token percent
token d
token minus
token percent
token d
token backslash
token n
token quote
token comma
token search_target
token comma
token start_position_a
token comma
token end_position_a
token closebracket
token semicolon
token closecurly
token struct
determiner asterisk
type declaration: [struct {}, 'RangePair', pointer {}]
determiner range_pair
type declaration: [struct {}, 'RangePair', pointer {}, name {'name': 'range_pair'}]
[struct {}, 'RangePair', pointer {}, name {'name': 'range_pair'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'RangePair', name {'name': 'closebracket'}]
[struct {}, 'RangePair', name {'name': 'closebracket'}]
token closebracket
token semicolon
token range_pair
token minus
token greaterthan
token ranges
token equals
token ranges
token semicolon
token range_pair
token minus
token greaterthan
token range_length
token equals
token range_count
token semicolon
token return
token range_pair
token semicolon
token closecurly
token int
Found function, return type: ['int', 'assignrealregisters']
token struct
determiner asterisk
type declaration: [struct {}, 'NormalForm', pointer {}]
determiner anf
type declaration: [struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
[struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
token comma
token struct
determiner asterisk
type declaration: [struct {}, 'RangePair', pointer {}]
determiner range_pair
type declaration: [struct {}, 'RangePair', pointer {}, name {'name': 'range_pair'}]
[struct {}, 'RangePair', pointer {}, name {'name': 'range_pair'}]
token comma
token struct
determiner asterisk
type declaration: [struct {}, 'AssignmentPair', pointer {}]
determiner assignment_pair
type declaration: [struct {}, 'AssignmentPair', pointer {}, name {'name': 'assignment_pair'}]
[struct {}, 'AssignmentPair', pointer {}, name {'name': 'assignment_pair'}]
token comma
token char
is a pointer ['char', '*']
determiner realregisters
type declaration: ['char', '*', 'asterisk', name {'name': 'realregisters'}]
token comma
token int
determiner closebracket
type declaration: ['int', 'register_count', name {'name': 'closebracket'}]
token opencurly
token char
is a pointer ['char', '*']
determiner previousassignments
type declaration: ['char', '*', 'asterisk', name {'name': 'previousassignments'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token char
is a pointer ['char', '*']
determiner closebracket
type declaration: ['char', '*', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token register_count
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token printf
token openbracket
token quote
token Assigning
token percent
token s
token to
token percent
token d
token backslash
token n
token quote
token comma
token realregisters
token opensquare
token x
token closesquare
token comma
token register_count
token minus
token x
token minus
token 1
token closebracket
token semicolon
token previousassignments
token opensquare
token register_count
token minus
token x
token minus
token 1
token closesquare
token equals
token realregisters
token opensquare
token x
token closesquare
token semicolon
token closecurly
token int
determiner equals
type declaration: ['int', 'assignment_stack_position', name {'name': 'equals'}]
token register_count
token minus
token 1
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'hashmap', pointer {}]
determiner template_variables
type declaration: [struct {}, 'hashmap', pointer {}, name {'name': 'template_variables'}]
[struct {}, 'hashmap', pointer {}, name {'name': 'template_variables'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'hashmap', name {'name': 'closebracket'}]
[struct {}, 'hashmap', name {'name': 'closebracket'}]
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'hashmap', pointer {}]
determiner registers
type declaration: [struct {}, 'hashmap', pointer {}, name {'name': 'registers'}]
[struct {}, 'hashmap', pointer {}, name {'name': 'registers'}]
token equals
token malloc
token openbracket
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'hashmap', name {'name': 'closebracket'}]
[struct {}, 'hashmap', name {'name': 'closebracket'}]
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token range_pair
token minus
token greaterthan
token range_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token set_hashmap
token openbracket
token template_variables
token comma
token range_pair
token minus
token greaterthan
token ranges
token opensquare
token x
token closesquare
token minus
token greaterthan
token variable
token comma
token openbracket
token uintptr_t
token closebracket
token 0
token comma
token range_pair
token minus
token greaterthan
token ranges
token opensquare
token x
token closesquare
token minus
token greaterthan
token variable_length
token closebracket
token semicolon
token closecurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'instruction', name {'name': 'equals'}]
token 0
token semicolon
token instruction
token lessthan
token assignment_pair
token minus
token greaterthan
token assignment_length
token semicolon
token instruction
token plus
token plus
token closebracket
token opencurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'r', name {'name': 'equals'}]
token 0
token semicolon
token r
token lessthan
token range_pair
token minus
token greaterthan
token range_length
token semicolon
token r
token plus
token plus
token closebracket
token opencurly
token if
token openbracket
token instruction
token greaterthan
token equals
token range_pair
token minus
token greaterthan
token ranges
token opensquare
token r
token closesquare
token minus
token greaterthan
token start_position
token amper
token amper
token instruction
token lessthan
token equals
token range_pair
token minus
token greaterthan
token ranges
token opensquare
token r
token closesquare
token minus
token greaterthan
token end_position
token closebracket
token opencurly
token printf
token openbracket
token quote
token Instruction
token percent
token s
token percent
token s
token appears
token in
token range
token of
token percent
token d
token minus
token percent
token d
token backslash
token n
token quote
token comma
token range_pair
token minus
token greaterthan
token ranges
token opensquare
token r
token closesquare
token minus
token greaterthan
token variable
token comma
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token instruction
token closesquare
token stop
token text
token comma
token range_pair
token minus
token greaterthan
token ranges
token opensquare
token r
token closesquare
token minus
token greaterthan
token start_position
token comma
token range_pair
token minus
token greaterthan
token ranges
token opensquare
token r
token closesquare
token minus
token greaterthan
token end_position
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'hashmap_value', pointer {}]
determiner lookup
type declaration: [struct {}, 'hashmap_value', pointer {}, name {'name': 'lookup'}]
[struct {}, 'hashmap_value', pointer {}, name {'name': 'lookup'}]
token equals
token get_hashmap
token openbracket
token template_variables
token comma
token range_pair
token minus
token greaterthan
token ranges
token opensquare
token r
token closesquare
token minus
token greaterthan
token variable
token closebracket
token semicolon
token if
token openbracket
token instruction
token equals
token equals
token range_pair
token minus
token greaterthan
token ranges
token opensquare
token r
token closesquare
token minus
token greaterthan
token end_position
token amper
token amper
token range_pair
token minus
token greaterthan
token ranges
token opensquare
token r
token closesquare
token minus
token greaterthan
token chosen_register
token exclamation
token equals
token NULL
token closebracket
token opencurly
token printf
token openbracket
token quote
token Register
token percent
token s
token is
token free
token backslash
token n
token quote
token comma
token openbracket
token char
is a pointer ['char', '*']
determiner range_pair
type declaration: ['char', '*', 'closebracket', name {'name': 'range_pair'}]
token minus
token greaterthan
token ranges
token opensquare
token r
token closesquare
token minus
token greaterthan
token chosen_register
token closebracket
token semicolon
token previousassignments
token opensquare
token assignment_stack_position
token plus
token 1
token closesquare
token equals
token openbracket
token char
is a pointer ['char', '*']
determiner range_pair
type declaration: ['char', '*', 'closebracket', name {'name': 'range_pair'}]
token minus
token greaterthan
token ranges
token opensquare
token r
token closesquare
token minus
token greaterthan
token chosen_register
token semicolon
token assignment_stack_position
token plus
token plus
token semicolon
token lookup
token minus
token greaterthan
token value
token equals
token 0
token semicolon
token lookup
token minus
token greaterthan
token set
token equals
token 0
token semicolon
token closecurly
token printf
token openbracket
token quote
token assignment
token position
token percent
token d
token backslash
token n
token quote
token comma
token assignment_stack_position
token closebracket
token semicolon
token if
token openbracket
token range_pair
token minus
token greaterthan
token ranges
token opensquare
token r
token closesquare
token minus
token greaterthan
token chosen_register
token equals
token equals
token NULL
token closebracket
token opencurly
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'chosen_register', name {'name': 'equals'}]
token previousassignments
token opensquare
token assignment_stack_position
token closesquare
token semicolon
token set_hashmap
token openbracket
token template_variables
token comma
token range_pair
token minus
token greaterthan
token ranges
token opensquare
token r
token closesquare
token minus
token greaterthan
token variable
token comma
token openbracket
token uintptr_t
token closebracket
token chosen_register
token comma
token strlen
token openbracket
token chosen_register
token closebracket
token closebracket
token semicolon
token printf
token openbracket
token quote
token Assigned
token register
token percent
token s
token to
token percent
token s
token lessthan
token minus
token percent
token s
token backslash
token n
token quote
token comma
token chosen_register
token comma
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token instruction
token closesquare
token stop
token variable
token comma
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token instruction
token closesquare
token stop
token text
token closebracket
token semicolon
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token instruction
token closesquare
token stop
token chosen_register
token equals
token chosen_register
token semicolon
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token instruction
token closesquare
token stop
token expression
token minus
token greaterthan
token chosen_register
token equals
token chosen_register
token semicolon
token range_pair
token minus
token greaterthan
token ranges
token opensquare
token r
token closesquare
token minus
token greaterthan
token chosen_register
token equals
token chosen_register
token semicolon
token assignment_stack_position
token minus
token minus
token semicolon
token closecurly
found slash
/
token printf("%p %d %d\n", (char*)lookup->value, instruction, range_pair->ranges[r]->end_position);

token closecurly
token closecurly
token closecurly
token closecurly
token int
Found function, return type: ['int', 'assign_all_registers']
token struct
determiner asterisk
type declaration: [struct {}, 'NormalForm', pointer {}]
determiner anf
type declaration: [struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
[struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
token comma
token struct
determiner asterisk
type declaration: [struct {}, 'AssignmentPair', pointer {}]
determiner assignment_pair
type declaration: [struct {}, 'AssignmentPair', pointer {}, name {'name': 'assignment_pair'}]
[struct {}, 'AssignmentPair', pointer {}, name {'name': 'assignment_pair'}]
token comma
token char
is a pointer ['char', '*']
determiner real_registers
type declaration: ['char', '*', 'asterisk', name {'name': 'real_registers'}]
token comma
token int
determiner closebracket
type declaration: ['int', 'register_count', name {'name': 'closebracket'}]
token opencurly
token struct
determiner asterisk
type declaration: [struct {}, 'RangePair', pointer {}]
determiner range_pair
type declaration: [struct {}, 'RangePair', pointer {}, name {'name': 'range_pair'}]
[struct {}, 'RangePair', pointer {}, name {'name': 'range_pair'}]
token equals
token liveranges
token openbracket
token anf
token comma
token assignment_pair
token closebracket
token semicolon
found slash
/
token  assignrealregisters(anf, range_pair, assignment_pair, real_registers, register_count);

token closecurly
token int
Found function, return type: ['int', 'do_graph_colouring']
token struct
determiner asterisk
type declaration: [struct {}, 'NormalForm', pointer {}]
determiner anfs
type declaration: [struct {}, 'NormalForm', pointer {}, name {'name': 'anfs'}]
[struct {}, 'NormalForm', pointer {}, name {'name': 'anfs'}]
token comma
token struct
determiner asterisk
type declaration: [struct {}, 'AssignmentPair', pointer {}]
determiner assignment_pair
type declaration: [struct {}, 'AssignmentPair', pointer {}, name {'name': 'assignment_pair'}]
[struct {}, 'AssignmentPair', pointer {}, name {'name': 'assignment_pair'}]
token comma
token char
is a pointer ['char', '*']
determiner real_registers
type declaration: ['char', '*', 'asterisk', name {'name': 'real_registers'}]
token comma
token int
determiner closebracket
type declaration: ['int', 'register_count', name {'name': 'closebracket'}]
token opencurly
token struct
determiner asterisk
type declaration: [struct {}, 'hashmap', pointer {}]
determiner forward_links
type declaration: [struct {}, 'hashmap', pointer {}, name {'name': 'forward_links'}]
[struct {}, 'hashmap', pointer {}, name {'name': 'forward_links'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'hashmap', name {'name': 'closebracket'}]
[struct {}, 'hashmap', name {'name': 'closebracket'}]
token closebracket
token semicolon
token printf
token openbracket
token quote
token hash
token hash
token GRAPH
token COLOURING
token backslash
token n
token quote
token closebracket
token semicolon
token printf
token openbracket
token quote
token percent
token d
token assignments
token backslash
token n
token quote
token comma
token assignment_pair
token minus
token greaterthan
token assignment_length
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token assignment_pair
token minus
token greaterthan
token assignment_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'var_key', name {'name': 'equals'}]
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token variable_key
token semicolon
token printf
token openbracket
token quote
token Variable
token percent
token d
token colon
token percent
token s
token backslash
token n
token quote
token comma
token x
token comma
token var_key
token closebracket
token semicolon
token if
token openbracket
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token reference_length
token equals
token equals
token 0
token closebracket
token opencurly
token printf
token openbracket
token quote
token no
token references
token backslash
token n
token quote
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'from', name {'name': 'equals'}]
token var_key
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Edges', pointer {}]
determiner new_edges
type declaration: [struct {}, 'Edges', pointer {}, name {'name': 'new_edges'}]
[struct {}, 'Edges', pointer {}, name {'name': 'new_edges'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Edges', name {'name': 'closebracket'}]
[struct {}, 'Edges', name {'name': 'closebracket'}]
token closebracket
token semicolon
token new_edges
token minus
token greaterthan
token from
token equals
token amper
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token semicolon
token new_edges
token minus
token greaterthan
token edge_count
token equals
token 0
token semicolon
token new_edges
token minus
token greaterthan
token edges
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Edge', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Edge', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Edge', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token set_hashmap
token openbracket
token forward_links
token comma
token from
token comma
token openbracket
token uintptr_t
token closebracket
token new_edges
token comma
token strlen
token openbracket
token from
token closebracket
token closebracket
token semicolon
token closecurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'k', name {'name': 'equals'}]
token 0
token semicolon
token k
token lessthan
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token reference_length
token semicolon
token k
token plus
token plus
token closebracket
token opencurly
token printf
token openbracket
token quote
token Found
token reference
token percent
token s
token to
token percent
token s
token backslash
token n
token quote
token comma
token var_key
token comma
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token references
token opensquare
token k
token closesquare
token closebracket
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'from', name {'name': 'equals'}]
token var_key
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'to', name {'name': 'equals'}]
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token references
token opensquare
token k
token closesquare
token semicolon
token dump_expressions
token openbracket
token 0
token comma
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token exps
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'var_key_length', name {'name': 'equals'}]
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token variable_length
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'hashmap_value', pointer {}]
determiner value
type declaration: [struct {}, 'hashmap_value', pointer {}, name {'name': 'value'}]
[struct {}, 'hashmap_value', pointer {}, name {'name': 'value'}]
token equals
token get_hashmap
token openbracket
token forward_links
token comma
token from
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Edges', pointer {}]
determiner edges
type declaration: [struct {}, 'Edges', pointer {}, name {'name': 'edges'}]
[struct {}, 'Edges', pointer {}, name {'name': 'edges'}]
token semicolon
token if
token openbracket
token value
token minus
token greaterthan
token set
token equals
token equals
token 1
token closebracket
token opencurly
token printf
token openbracket
token quote
token Forward
token link
token to
token percent
token s
token found
token backslash
token n
token quote
token comma
token from
token closebracket
token semicolon
token edges
token equals
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Edges', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Edges', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Edges', pointer {}, name {'name': 'closebracket'}]
token value
token minus
token greaterthan
token value
token semicolon
token closecurly
token else
token opencurly
token printf
token openbracket
token quote
token Forward
token link
token to
token percent
token s
token NOT
token found
token backslash
token n
token quote
token comma
token from
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Edges', pointer {}]
determiner new_edges
type declaration: [struct {}, 'Edges', pointer {}, name {'name': 'new_edges'}]
[struct {}, 'Edges', pointer {}, name {'name': 'new_edges'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Edges', name {'name': 'closebracket'}]
[struct {}, 'Edges', name {'name': 'closebracket'}]
token closebracket
token semicolon
token new_edges
token minus
token greaterthan
token from
token equals
token amper
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token semicolon
token new_edges
token minus
token greaterthan
token edge_count
token equals
token 0
token semicolon
token new_edges
token minus
token greaterthan
token edges
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Edge', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Edge', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Edge', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token set_hashmap
token openbracket
token forward_links
token comma
token from
token comma
token openbracket
token uintptr_t
token closebracket
token new_edges
token comma
token strlen
token openbracket
token from
token closebracket
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'hashmap_value', pointer {}]
determiner value
type declaration: [struct {}, 'hashmap_value', pointer {}, name {'name': 'value'}]
[struct {}, 'hashmap_value', pointer {}, name {'name': 'value'}]
token equals
token get_hashmap
token openbracket
token forward_links
token comma
token from
token closebracket
token semicolon
token edges
token equals
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Edges', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Edges', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Edges', pointer {}, name {'name': 'closebracket'}]
token value
token minus
token greaterthan
token value
token semicolon
token closecurly
token struct
determiner asterisk
type declaration: [struct {}, 'Edge', pointer {}]
determiner new_edge
type declaration: [struct {}, 'Edge', pointer {}, name {'name': 'new_edge'}]
[struct {}, 'Edge', pointer {}, name {'name': 'new_edge'}]
token equals
token calloc
token openbracket
token 1
token comma
token sizeof
token openbracket
token struct
determiner closebracket
type declaration: [struct {}, 'Edge', name {'name': 'closebracket'}]
[struct {}, 'Edge', name {'name': 'closebracket'}]
token closebracket
token semicolon
token new_edge
token minus
token greaterthan
token destination
token equals
token to
token semicolon
token new_edge
token minus
token greaterthan
token assignment
token equals
token amper
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token semicolon
token printf
token openbracket
token quote
token percent
token p
token backslash
token n
token quote
token comma
token edges
token minus
token greaterthan
token edges
token closebracket
token semicolon
token edges
token minus
token greaterthan
token edges
token opensquare
token edges
token minus
token greaterthan
token edge_count
token plus
token plus
token closesquare
token equals
token new_edge
token semicolon
token printf
token openbracket
token quote
token Links
token to
token percent
token s
token backslash
token n
token quote
token comma
token from
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'y', name {'name': 'equals'}]
token 0
token semicolon
token y
token lessthan
token edges
token minus
token greaterthan
token edge_count
token semicolon
token y
token plus
token plus
token closebracket
token opencurly
token printf
token openbracket
token quote
token minus
token percent
token s
token backslash
token n
token quote
token comma
token edges
token minus
token greaterthan
token edges
token opensquare
token y
token closesquare
token minus
token greaterthan
token destination
token closebracket
token semicolon
found slash
/
token  dump_expressions(0, edges->edges[y]->assignment->exps);

token closecurly
token closecurly
found slash
/
token  set_hashmap(forward_links, range_pair->ranges[x]->variable, (uintptr_t) 0, range_pair->ranges[x]->variable_length);

token closecurly
token struct
determiner asterisk
type declaration: [struct {}, 'Edges', pointer {}]
determiner asterisk
type declaration: [struct {}, 'Edges', pointer {}, pointer {}]
determiner edge_stack
type declaration: [struct {}, 'Edges', pointer {}, pointer {}, name {'name': 'edge_stack'}]
[struct {}, 'Edges', pointer {}, pointer {}, name {'name': 'edge_stack'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Edges', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Edges', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Edges', pointer {}, name {'name': 'closebracket'}]
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'stack_count', name {'name': 'equals'}]
token 0
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token MAX_SIZE
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token if
token openbracket
token forward_links
token minus
token greaterthan
token value
token opensquare
token x
token closesquare
token stop
token set
token equals
token equals
token 1
token closebracket
token opencurly
token struct
determiner asterisk
type declaration: [struct {}, 'Edges', pointer {}]
determiner edge
type declaration: [struct {}, 'Edges', pointer {}, name {'name': 'edge'}]
[struct {}, 'Edges', pointer {}, name {'name': 'edge'}]
token equals
token openbracket
token struct
determiner asterisk
type declaration: [struct {}, 'Edges', pointer {}]
determiner closebracket
type declaration: [struct {}, 'Edges', pointer {}, name {'name': 'closebracket'}]
[struct {}, 'Edges', pointer {}, name {'name': 'closebracket'}]
token forward_links
token minus
token greaterthan
token value
token opensquare
token x
token closesquare
token stop
token value
token semicolon
token if
token openbracket
token edge
token minus
token greaterthan
token edge_count
token greaterthan
token equals
token 0
token amper
token amper
token edge
token minus
token greaterthan
token edge_count
token lessthan
token register_count
token closebracket
token opencurly
token printf
token openbracket
token quote
token FOUND
token EDGE
token WITH
token EDGE
token COUNT
token lessthan
token percent
token d
token percent
token s
token backslash
token n
token quote
token comma
token register_count
token comma
token edge
token minus
token greaterthan
token from
token minus
token greaterthan
token variable
token closebracket
token semicolon
token dump_expressions
token openbracket
token 0
token comma
token edge
token minus
token greaterthan
token from
token minus
token greaterthan
token expression
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token closebracket
token semicolon
token edge_stack
token opensquare
token stack_count
token plus
token plus
token closesquare
token equals
token edge
token semicolon
token closecurly
token closecurly
token closecurly
token char
is a pointer ['char', '*']
determiner available
type declaration: ['char', '*', 'asterisk', name {'name': 'available'}]
token equals
token calloc
token openbracket
token 100
token comma
token sizeof
token openbracket
token char
is a pointer ['char', '*']
determiner closebracket
type declaration: ['char', '*', 'closebracket', name {'name': 'closebracket'}]
token semicolon
token int
determiner equals
type declaration: ['int', 'available_len', name {'name': 'equals'}]
token 0
token semicolon
token int
determiner equals
type declaration: ['int', 'available_index', name {'name': 'equals'}]
token 0
token semicolon
token int
determiner equals
type declaration: ['int', 'stack_index', name {'name': 'equals'}]
token stack_count
token semicolon
token printf
token openbracket
token quote
token Register
token colouring
token starting
token with
token percent
token d
token items
token backslash
token n
token quote
token comma
token stack_index
token closebracket
token semicolon
token while
token openbracket
token stack_index
token greaterthan
token 0
token closebracket
token opencurly
token printf
token openbracket
token quote
token hash
token hash
token hash
token GRAPH
token COLOUR
token STACK
token ITEM
token backslash
token n
token quote
token closebracket
token semicolon
token if
token openbracket
token available
token opensquare
token 0
token closesquare
token equals
token equals
token NULL
token closebracket
token opencurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token register_count
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token available
token opensquare
token x
token closesquare
token equals
token real_registers
token opensquare
token x
token closesquare
token semicolon
token closecurly
token available_index
token equals
token 0
token semicolon
token closecurly
token int
determiner equals
type declaration: ['int', 'available_len', name {'name': 'equals'}]
token register_count
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token register_count
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token if
token openbracket
token available
token opensquare
token x
token closesquare
token equals
token equals
token NULL
token closebracket
token opencurly
token available_len
token minus
token minus
token semicolon
token closecurly
token else
token opencurly
token printf
token openbracket
token quote
token minus
token percent
token s
token quote
token comma
token available
token opensquare
token x
token closesquare
token closebracket
token semicolon
token closecurly
token closecurly
token printf
token openbracket
token quote
token hash
token hash
token percent
token d
token registers
token available
token backslash
token n
token quote
token comma
token available_len
token closebracket
token semicolon
token printf
token openbracket
token quote
token backslash
token n
token quote
token closebracket
token semicolon
token stack_index
token minus
token minus
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'Edges', pointer {}]
determiner item
type declaration: [struct {}, 'Edges', pointer {}, name {'name': 'item'}]
[struct {}, 'Edges', pointer {}, name {'name': 'item'}]
token equals
token edge_stack
token opensquare
token stack_index
token closesquare
token semicolon
token printf
token openbracket
token quote
token STACK
token ITEM
token backslash
token n
token quote
token closebracket
token semicolon
token dump_expressions
token openbracket
token 0
token comma
token item
token minus
token greaterthan
token from
token minus
token greaterthan
token expression
token minus
token greaterthan
token exps
token opensquare
token 0
token closesquare
token closebracket
token semicolon
token if
token openbracket
token item
token minus
token greaterthan
token from
token minus
token greaterthan
token chosen_register
token equals
token equals
token NULL
token closebracket
token opencurly
token if
token openbracket
token item
token minus
token greaterthan
token from
token minus
token greaterthan
token expression
token minus
token greaterthan
token tag
token exclamation
token equals
token IS_AST_METADATA
token closebracket
token opencurly
token printf
token openbracket
token quote
token percent
token s
token Doesn
token singlequote
token t
token have
token a
token register
token assigned
token backslash
token n
token quote
token comma
token item
token minus
token greaterthan
token from
token minus
token greaterthan
token variable
token closebracket
token semicolon
token int
determiner equals
type declaration: ['int', 'removed_pos', name {'name': 'equals'}]
token 0
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'chosen_register', name {'name': 'equals'}]
token available
token opensquare
token available_index
token closesquare
token semicolon
found slash
/
token  available_index++;

token item
token minus
token greaterthan
token from
token minus
token greaterthan
token chosen_register
token equals
token chosen_register
token semicolon
token item
token minus
token greaterthan
token from
token minus
token greaterthan
token expression
token minus
token greaterthan
token chosen_register
token equals
token chosen_register
token semicolon
token printf
token openbracket
token quote
token Chosen
token percent
token s
token backslash
token n
token quote
token comma
token chosen_register
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token register_count
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token if
token openbracket
token available
token opensquare
token x
token closesquare
token exclamation
token equals
token NULL
token closebracket
token opencurly
token if
token openbracket
token strcmp
token openbracket
token chosen_register
token comma
token available
token opensquare
token x
token closesquare
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token printf
token openbracket
token quote
token Found
token removed
token register
token in
token percent
token d
token backslash
token n
token quote
token comma
token x
token closebracket
token semicolon
token removed_pos
token equals
token x
token semicolon
token closecurly
token closecurly
token closecurly
token if
token openbracket
token removed_pos
token exclamation
token equals
token minus
token 1
token closebracket
token opencurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token removed_pos
token semicolon
token x
token lessthan
token register_count
token minus
token 1
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token available
token opensquare
token x
token closesquare
token equals
token available
token opensquare
token x
token plus
token 1
token closesquare
token semicolon
token closecurly
token available
token opensquare
token register_count
token minus
token 1
token closesquare
token equals
token NULL
token semicolon
token closecurly
token closecurly
token closecurly
token else
token opencurly
token int
determiner equals
type declaration: ['int', 'type', name {'name': 'equals'}]
token item
token minus
token greaterthan
token from
token minus
token greaterthan
token expression
token minus
token greaterthan
token type
token semicolon
token int
determiner equals
type declaration: ['int', 'tag', name {'name': 'equals'}]
token item
token minus
token greaterthan
token from
token minus
token greaterthan
token expression
token minus
token greaterthan
token tag
token semicolon
token printf
token openbracket
token quote
token Vertice
token is
token precoloured
token variable
token percent
token s
token percent
token d
token percent
token d
token backslash
token n
token quote
token comma
token item
token minus
token greaterthan
token from
token minus
token greaterthan
token variable
token comma
token type
token comma
token tag
token closebracket
token semicolon
token printf
token openbracket
token quote
token Vertice
token is
token precoloured
token register
token percent
token p
token backslash
token n
token quote
token comma
token item
token minus
token greaterthan
token from
token minus
token greaterthan
token chosen_register
token closebracket
token semicolon
found slash
/
token  item->from->expression->chosen_register = item->from->chosen_register;

token int
determiner equals
type declaration: ['int', 'removed_pos', name {'name': 'equals'}]
token minus
token 1
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token available_len
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token if
token openbracket
token available
token opensquare
token x
token closesquare
token exclamation
token equals
token NULL
token closebracket
token opencurly
token if
token openbracket
token strcmp
token openbracket
token item
token minus
token greaterthan
token from
token minus
token greaterthan
token chosen_register
token comma
token available
token opensquare
token x
token closesquare
token closebracket
token equals
token equals
token 0
token closebracket
token opencurly
token printf
token openbracket
token quote
token Found
token removed
token register
token in
token percent
token d
token backslash
token n
token quote
token comma
token x
token closebracket
token semicolon
token removed_pos
token equals
token x
token semicolon
token closecurly
token closecurly
token closecurly
token if
token openbracket
token removed_pos
token exclamation
token equals
token minus
token 1
token closebracket
token opencurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token removed_pos
token semicolon
token x
token lessthan
token register_count
token minus
token 1
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token available
token opensquare
token x
token closesquare
token equals
token available
token opensquare
token x
token plus
token 1
token closesquare
token semicolon
token closecurly
token available
token opensquare
token register_count
token minus
token 1
token closesquare
token equals
token NULL
token semicolon
token closecurly
token closecurly
token closecurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token assignment_pair
token minus
token greaterthan
token assignment_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token printf
token openbracket
token quote
token percent
token s
token register
token equals
token percent
token s
token percent
token s
token backslash
token n
token quote
token comma
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token variable
token comma
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token chosen_register
token comma
token assignment_pair
token minus
token greaterthan
token assignments
token opensquare
token x
token closesquare
token stop
token text
token closebracket
token semicolon
token closecurly
token printf
token openbracket
token quote
token hash
token hash
token GRAPH
token COLOURING
token backslash
token n
token quote
token closebracket
token semicolon
token closecurly
token int
Found function, return type: ['int', 'machine_code']
token struct
determiner asterisk
type declaration: [struct {}, 'ANF', pointer {}]
determiner anfs
type declaration: [struct {}, 'ANF', pointer {}, name {'name': 'anfs'}]
[struct {}, 'ANF', pointer {}, name {'name': 'anfs'}]
token comma
token char
is a pointer ['char', '*']
determiner real_registers
type declaration: ['char', '*', 'asterisk', name {'name': 'real_registers'}]
token comma
token int
determiner closebracket
type declaration: ['int', 'register_count', name {'name': 'closebracket'}]
token opencurly
token int
determiner equals
type declaration: ['int', 'pc', name {'name': 'equals'}]
token 0
token semicolon
token assign_all_registers
token openbracket
token anfs
token minus
token greaterthan
token anf
token comma
token anfs
token minus
token greaterthan
token anf
token minus
token greaterthan
token assignment_pair
token comma
token real_registers
token comma
token register_count
token closebracket
token semicolon
token do_graph_colouring
token openbracket
token anfs
token minus
token greaterthan
token anf
token comma
token anfs
token minus
token greaterthan
token anf
token minus
token greaterthan
token assignment_pair
token comma
token real_registers
token comma
token register_count
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token anfs
token minus
token greaterthan
token function_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token assign_all_registers
token openbracket
token anfs
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token anf
token comma
token anfs
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token anf
token minus
token greaterthan
token assignment_pair
token comma
token real_registers
token comma
token register_count
token closebracket
token semicolon
token do_graph_colouring
token openbracket
token anfs
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token anf
token comma
token anfs
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token anf
token minus
token greaterthan
token assignment_pair
token comma
token real_registers
token comma
token register_count
token closebracket
token semicolon
token closecurly
token printf
token openbracket
token quote
token Codegen
token for
token main
token backslash
token n
token quote
token closebracket
token semicolon
token codegen
token openbracket
token anfs
token closebracket
token semicolon
token closecurly
token int
Found function, return type: ['int', 'dump']
token struct
determiner asterisk
type declaration: [struct {}, 'ParseResult', pointer {}]
determiner parse_result
type declaration: [struct {}, 'ParseResult', pointer {}, name {'name': 'parse_result'}]
[struct {}, 'ParseResult', pointer {}, name {'name': 'parse_result'}]
token closebracket
token opencurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token parse_result
token minus
token greaterthan
token function_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token dump_function
token openbracket
token parse_result
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token closebracket
token semicolon
token closecurly
token closecurly
token int
Found function, return type: ['int', 'dump_anf']
token struct
determiner asterisk
type declaration: [struct {}, 'NormalForm', pointer {}]
determiner anf
type declaration: [struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
[struct {}, 'NormalForm', pointer {}, name {'name': 'anf'}]
token closebracket
token opencurly
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token anf
token minus
token greaterthan
token count
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token switch
token openbracket
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token type
token closebracket
token opencurly
token case
token MEMBER_ACCESS
token colon
token printf
token openbracket
token quote
token member
token access
token backslash
token n
token quote
token closebracket
token semicolon
token break
token semicolon
token case
token IDENTIFIER
token colon
token printf
token openbracket
token quote
token identifier
token percent
token s
token percent
token d
token backslash
token n
token quote
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token stringvalue
token comma
token anf
token minus
token greaterthan
token expressions
token opensquare
token x
token closesquare
token minus
token greaterthan
token numbervalue
token closebracket
token semicolon
token break
token semicolon
token case
token METHOD_CALL
token colon
token printf
token openbracket
token quote
token method
token call
token backslash
token n
token quote
token closebracket
token semicolon
token break
token semicolon
token case
token ADD
token colon
token printf
token openbracket
token quote
token add
token backslash
token n
token quote
token closebracket
token semicolon
token break
token semicolon
token case
token RETURN
token colon
token printf
token openbracket
token quote
token return
token backslash
token n
token quote
token closebracket
token semicolon
token break
token semicolon
token closecurly
token closecurly
token closecurly
token int
Found function, return type: ['int', 'main']
token int
determiner comma
type declaration: ['int', 'argc', name {'name': 'comma'}]
token char
is a pointer ['char', '*']
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}]
determiner opensquare
found slash
/
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'asterisk'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'int'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'int'}, array-constant {'constant': 'equals'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'int'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'int'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'opensquare'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'int'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'plus'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'int'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closesquare'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'int'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'int'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'int'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'real_registers'}]
determiner opensquare
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'int'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'real_registers'}, array-constant {'constant': 'register_count'}]
determiner opensquare
end of array
type declaration: ['char', '*', 'argv', array-constant {'constant': 'closesquare'}, array-constant {'constant': 'opencurly'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'amd64'}, array-constant {'constant': 'by'}, array-constant {'constant': 'Michael'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'backslash'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'colon'}, array-constant {'constant': 'd'}, array-constant {'constant': 'n'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'printf'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'n'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'char'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'comma'}, array-constant {'constant': 'openbracket'}, array-constant {'constant': 'asterisk'}, array-constant {'constant': 'closebracket'}, array-constant {'constant': 'int'}, array-constant {'constant': 'equals'}, array-constant {'constant': 'semicolon'}, array-constant {'constant': 'opensquare'}, array-constant {'constant': 'plus'}, array-constant {'constant': 'closesquare'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'quote'}, array-constant {'constant': 'real_registers'}, array-constant {'constant': 'register_count'}, array-constant {'constant': 'plus'}]
token equals
token quote
token rsi
token quote
token semicolon
token real_registers
token opensquare
token register_count
token plus
token plus
token closesquare
token equals
token quote
token rdx
token quote
token semicolon
token real_registers
token opensquare
token register_count
token plus
token plus
token closesquare
token equals
token quote
token rcx
token quote
token semicolon
token real_registers
token opensquare
token register_count
token plus
token plus
token closesquare
token equals
token quote
token rbx
token quote
token semicolon
token real_registers
token opensquare
token register_count
token plus
token plus
token closesquare
token equals
token quote
token rax
token quote
token semicolon
found slash
/
token  fgets(buffer, sizeof(buffer), stdin);

token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'buffer', name {'name': 'equals'}]
token 0
token semicolon
token long
token length
token semicolon
token FILE
token asterisk
token f
token equals
token fopen
token openbracket
token argv
token opensquare
token 1
token closesquare
token comma
token quote
token rb
token quote
token closebracket
token semicolon
token if
token openbracket
token f
token closebracket
token opencurly
token fseek
token openbracket
token f
token comma
token 0
token comma
token SEEK_END
token closebracket
token semicolon
token length
token equals
token ftell
token openbracket
token f
token closebracket
token semicolon
token fseek
token openbracket
token f
token comma
token 0
token comma
token SEEK_SET
token closebracket
token semicolon
token buffer
token equals
token malloc
token openbracket
token sizeof
token openbracket
token char
determiner asterisk
type declaration: ['char', 'closebracket', pointer {}]
determiner length
type declaration: ['char', 'closebracket', pointer {}, name {'name': 'length'}]
token plus
token 1
token closebracket
token semicolon
token memset
token openbracket
token buffer
token comma
token singlequote
token backslash
token 0
token singlequote
token comma
token length
token plus
token 1
token closebracket
token semicolon
token if
token openbracket
token buffer
token closebracket
token opencurly
token fread
token openbracket
token buffer
token comma
token 1
token comma
token length
token comma
token f
token closebracket
token semicolon
token closecurly
token fclose
token openbracket
token f
token closebracket
token semicolon
token closecurly
token if
token openbracket
token buffer
token closebracket
token opencurly
token printf
token openbracket
token quote
token Parsing
token code
token backslash
token n
token percent
token s
token quote
token comma
token buffer
token closebracket
token semicolon
found slash
/
token  start to process your data / extract strings here...

token struct
determiner asterisk
type declaration: [struct {}, 'ParseResult', pointer {}]
determiner ast
type declaration: [struct {}, 'ParseResult', pointer {}, name {'name': 'ast'}]
[struct {}, 'ParseResult', pointer {}, name {'name': 'ast'}]
token equals
token parse
token openbracket
token length
token comma
token buffer
token closebracket
token semicolon
token printf
token openbracket
token quote
token hash
token hash
token Code
token colon
token backslash
token n
token quote
token closebracket
token semicolon
token printf
token openbracket
token quote
token percent
token s
token quote
token comma
token ast
token minus
token greaterthan
token program_body
token closebracket
token semicolon
token printf
token openbracket
token quote
token Dumping
token AST
token backslash
token n
token quote
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token ast
token minus
token greaterthan
token statements
token minus
token greaterthan
token statements
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token dump_expressions
token openbracket
token 1
token comma
token ast
token minus
token greaterthan
token exps
token opensquare
token x
token closesquare
token closebracket
token semicolon
token closecurly
token dump
token openbracket
token ast
token closebracket
token semicolon
token struct
determiner asterisk
type declaration: [struct {}, 'ANF', pointer {}]
determiner anfs
type declaration: [struct {}, 'ANF', pointer {}, name {'name': 'anfs'}]
[struct {}, 'ANF', pointer {}, name {'name': 'anfs'}]
token equals
token normalform
token openbracket
token ast
token closebracket
token semicolon
token printf
token openbracket
token quote
token Dumping
token ANF
token backslash
token n
token quote
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token anfs
token minus
token greaterthan
token function_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
token printf
token openbracket
token quote
token ANF
token for
token function
token percent
token s
token backslash
token n
token quote
token comma
token anfs
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token name
token closebracket
token semicolon
token dump_anf
token openbracket
token anfs
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token anf
token closebracket
token semicolon
token closecurly
token printf
token openbracket
token quote
token ANF
token for
token main
token backslash
token n
token quote
token closebracket
token semicolon
token dump_anf
token openbracket
token anfs
token minus
token greaterthan
token anf
token closebracket
token semicolon
token printf
token openbracket
token quote
token Assigning
token registers
token backslash
token n
token quote
token closebracket
token semicolon
found slash
/
token  coalesce_registers(anfs->anf);

token precolour_anf
token openbracket
token anfs
token minus
token greaterthan
token anf
token comma
token real_registers
token comma
token register_count
token closebracket
token semicolon
token assignregisters
token openbracket
token anfs
token minus
token greaterthan
token anf
token closebracket
token semicolon
token for
token openbracket
token int
determiner equals
type declaration: ['int', 'x', name {'name': 'equals'}]
token 0
token semicolon
token x
token lessthan
token anfs
token minus
token greaterthan
token function_length
token semicolon
token x
token plus
token plus
token closebracket
token opencurly
found slash
/
token  coalesce_registers(anfs->functions[x]->anf);

token precolour_anf
token openbracket
token anfs
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token anf
token comma
token real_registers
token comma
token register_count
token closebracket
token semicolon
token assignregisters
token openbracket
token anfs
token minus
token greaterthan
token functions
token opensquare
token x
token closesquare
token minus
token greaterthan
token anf
token closebracket
token semicolon
token closecurly
token FILE
token asterisk
token mapsfd
token equals
token fopen
token openbracket
token quote
found slash
p
token divide
token proc
found slash
s
token divide
token self
found slash
m
token divide
token maps
token quote
token comma
token quote
token r
token quote
token closebracket
token semicolon
token if
token openbracket
token mapsfd
token equals
token equals
token NULL
token closebracket
token opencurly
token fprintf
token openbracket
token stderr
token comma
token quote
token open
token openbracket
token closebracket
token failed
token colon
token percent
token s
token stop
token backslash
token n
token quote
token comma
token strerror
token openbracket
token errno
token closebracket
token closebracket
token semicolon
token exit
token openbracket
token 1
token closebracket
token semicolon
token closecurly
token char
determiner opensquare
end of array
type declaration: ['char', 'maps', array-constant {'constant': 'BUFSIZ'}]
token equals
token quote
token quote
token semicolon
token if
token openbracket
token read
token openbracket
token fileno
token openbracket
token mapsfd
token closebracket
token comma
token maps
token comma
token BUFSIZ
token closebracket
token equals
token equals
token minus
token 1
token closebracket
token opencurly
token fprintf
token openbracket
token stderr
token comma
token quote
token read
token openbracket
token closebracket
token failed
token colon
token percent
token s
token stop
token backslash
token n
token quote
token comma
token strerror
token openbracket
token errno
token closebracket
token closebracket
token semicolon
token exit
token openbracket
token 1
token closebracket
token semicolon
token closecurly
token if
token openbracket
token close
token openbracket
token fileno
token openbracket
token mapsfd
token closebracket
token closebracket
token equals
token equals
token minus
token 1
token closebracket
token opencurly
token fprintf
token openbracket
token stderr
token comma
token quote
token close
token openbracket
token closebracket
token failed
token colon
token percent
token s
token stop
token backslash
token n
token quote
token comma
token strerror
token openbracket
token errno
token closebracket
token closebracket
token semicolon
token exit
token openbracket
token 1
token closebracket
token semicolon
token closecurly
token long
token long
token heap_start
token equals
token 0
token semicolon
token char
is a pointer ['char', '*']
determiner equals
type declaration: ['char', '*', 'line', name {'name': 'equals'}]
token strtok
token openbracket
token maps
token comma
token quote
token backslash
token n
token quote
token closebracket
token semicolon
token while
token openbracket
token openbracket
token line
token equals
token strtok
token openbracket
token NULL
token comma
token quote
token backslash
token n
token quote
token closebracket
token closebracket
token exclamation
token equals
token NULL
token closebracket
token opencurly
token if
token openbracket
token strstr
token openbracket
token line
token comma
token quote
token heap
token quote
token closebracket
token exclamation
token equals
token NULL
token closebracket
token opencurly
token printf
token openbracket
token quote
token backslash
token n
token backslash
token nfrom
found slash
p
token divide
token proc
found slash
s
token divide
token self
found slash
m
token divide
token maps
token colon
token backslash
token n
token percent
token s
token backslash
token n
token quote
token comma
token line
token closebracket
token semicolon
token sscanf
token openbracket
token line
token comma
token quote
token percent
token llx
token quote
token comma
token amper
token heap_start
token closebracket
token semicolon
token break
token semicolon
token closecurly
token closecurly
token printf
token openbracket
token quote
token heap
token start
token is
token percent
token llx
token backslash
token n
token quote
token comma
token heap_start
token closebracket
token semicolon
token anfs
token minus
token greaterthan
token heap_start
token equals
token heap_start
token semicolon
token machine_code
token openbracket
token anfs
token comma
token real_registers
token comma
token register_count
token closebracket
token semicolon
token int
determiner asterisk
type declaration: ['int', 'openbracket', pointer {}]
determiner jmp_func
type declaration: ['int', 'openbracket', pointer {}, name {'name': 'jmp_func'}]
token closebracket
token openbracket
token void
determiner equals
type declaration: ['void', 'closebracket', name {'name': 'equals'}]
token openbracket
token void
is a pointer ['void', '*']
determiner anfs
type declaration: ['void', '*', 'closebracket', name {'name': 'anfs'}]
token minus
token greaterthan
token codegen_context
token minus
token greaterthan
token main_function_context
token minus
token greaterthan
token code
token semicolon
token printf
token openbracket
token quote
token Executing
token machine
token code
token at
token percent
token p
token backslash
token n
token quote
token comma
token jmp_func
token closebracket
token semicolon
token printf
token openbracket
token quote
token percent
token x
token backslash
token n
token quote
token comma
token jmp_func
token openbracket
token closebracket
token closebracket
token semicolon
token closecurly
found slash
*
token for (size_t i = 0; buffer[i * 2 + 1] != '\0'; i++) {
    write_region[i] = 16 * convert_to_hex(buffer[i*2]) + convert_to_hex(buffer[i*2 + 1]);
  }


  int (*jmp_func)(void) = (void *) write_region;

  printf("%x\n", jmp_func());
  *
found slash


token divide
token return
token 0
token semicolon
token closecurly
[/* 
JIT Compiler by Samuel Squire (https://github.com/samsquire/compiler)
with JIT code from Jacob Martin (https://gist.github.com/martinjacobd)

This C program executes a language that is superficially similar to Javascript.
It is barebones and a toy.

Copyright (c) 2023 Samuel Michael Squire
https://samsquire.com/

It is under MIT licence.
You can email me at sam@samsquire.com

 */, /* 
 * Copyright (c) 2023 Jacob Martin
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * */, /*  Takes hexadecimal bytes from stdin and executes them as machine code,
 */, /*  assuming they implement a function that takes no arguments
 */, /*  and returns an int
 */, /*  prints out the returned value as a hex number
 */, /*  Sample input on x86_64: echo b8ff000000c3 | ./jit
 */, /*  makes a function that returns 0xff
 */, /*  types
 */, /*  ast nodes
 */, /*  assignment nodes
 */, /*  tags
 */, /*  printf("Has %d expressions", expression_length);
 */, /*  printf("%d %p\n", y, expression->exps[y]);
 */, /*  reset whether token is a number or string
 */, /*  PCRE2_SPTR is a pointer to unsigned code units of * */, /*  the appropriate width (8, 16, or 32 bits). * */, /*  pcre2_code *pcre2_compile(PCRE2_SPTR pattern, PCRE2_SIZE length, uint32_t options, int *errorcode, PCRE2_SIZE *erroroffset, pcre2_compile_context *ccontext);
 */, /*  the pattern * */, /*  indicates pattern is zero-terminated * */, /*  default options * */, /*  for error number * */, /*  for error offset * */, /*  use default compile context * */, /*  the compiled pattern * */, /*  the subject string * */, /*  the length of the subject * */, /*  start at offset 0 in the subject * */, /*  default options * */, /*  block for storing the result * */, /*  use default match context * */, /*  free(parse_result->last_char); 
 */, /*  identifier[count++] = parse_result->last_char[0];
 */, /*  parse_result->last_char = charget(parse_result);
 */, /*  identifier[count++] = parse_result->last_char[0];
 */, /*  the compiled pattern * */, /*  the subject string * */, /*  the length of the subject * */, /*  start at offset 0 in the subject * */, /*  default options * */, /*  block for storing the result * */, /*  use default match context * */, /*  printf("\n%s Match succeeded at offset %d\n", caller, (int)ovector[0]);   
 */, /*  printf("%2d: [%.*s]\n", i, (int)substring_length, (char *)substring_start);
 */, /*  printf("%s [%s] Matched pattern for identifier [%s] %s\n", regex, parse_result->last_char, identifier, subject); 
 */, /*  free(parse_result->last_char); 
 */, /*  Release memory used for the match * */, /*  when finished looping
 */, /*  pcre2_match_data_free(match_data);   /* Release memory used for the match */
 */, /*  the pattern * */, /*  indicates pattern is zero-terminated * */, /*  default options * */, /*  for error number * */, /*  for error offset * */, /*  use default compile context * */, /*  the compiled pattern * */, /*  the subject string * */, /*  the length of the subject * */, /*  start at offset 0 in the subject * */, /*  default options * */, /*  block for storing the result * */, /*  use default match context * */, /*  free(parse_result->last_char); 
 */, /*  identifier[count++] = parse_result->last_char[0];
 */, /*  parse_result->last_char = charget(parse_result);
 */, /*  identifier[count++] = parse_result->last_char[0];
 */, /*  Release memory used for the match * */, /*  the compiled pattern * */, /*  the subject string * */, /*  the length of the subject * */, /*  start at offset 0 in the subject * */, /*  default options * */, /*  block for storing the result * */, /*  use default match context * */, /*  printf("\n%s Match succeeded at offset %d\n", caller, (int)ovector[0]);   
 */, /*  printf("%2d: [%.*s]\n", i, (int)substring_length, (char *)substring_start);
 */, /*  printf("quote %s %s [%s] Matched pattern for identifier [%s] %s\n", caller, pattern, parse_result->last_char, identifier, subject); 
 */, /*  free(parse_result->last_char); 
 */, /*  when finished looping
 */, /*  pcre2_match_data_free(match_data);   /* Release memory used for the match */
 */, /* 
  if re.match("[a-zA-Z0-9\.\_\-]+", self.last_char):
      identifier = ""
      while self.end == False and re.match("[a-zA-Z0-9\.\_\-]+", self.last_char):
          
          identifier = identifier + self.last_char
          self.last_char = self.charget()
      
      if self.end and self.last_char != ")" and self.last_char != "\n":
          identifier += self.last_char
      
      return identifier.lower() 
  * */, /* 
add 193486030
subtract 7572940974490733
multiply 7572685654880005

  * */, /*  case return 
 */, /*  subsume(statements, statementsource, RETURN, parse_result);
 */, /*  case add
 */, /*  case . case member
 */, /*  case ) case close  parameterlistend
 */, /*  case ; case semicolon
 */, /*  case ( case open
 */, /*  the identifier of a method call is metadata and doesn't need to be evaluated
 */, /*  struct Expression ** expressions = calloc(100, sizeof(struct Expression*)); 
 */, /*  statements[statementsource->statements - 1]->expression_length = 1;
 */, /* && strcmp(gettok(parse_result, "commacheck"), "comma") != 0 * */, /*  free(parse_result->last_char);
 */, /* if (strcmp(parse_result->last_token, "comma") == 0) {
              parse_result->pos = parse_result->pos + 1;
            }* */, /*  parse_result->pos = parse_result->pos + 1;
 */, /*  case , case comma
 */, /*  identifier 
 */, /*  case function
 */, /*  free(parse_result->last_char);
 */, /*  case (
 */, /*  case .
 */, /*  case identifier
 */, /*  rootparse
 */, /* 
int descendanf(struct NormalForm * anf, struct ExpressionSource *expressions) {
  for (int x = expressions->expression_length - 1; x >= 0 ; x--) {
    for (int y = expressions->expressions[x]->statements->statements - 1 ; y >= 0 ; y--) {
      descendanf(anf, expressions->expressions[x]->exps[y]);
    }
    anf->expressions[anf->count++] = expressions->expressions[x];
  }
}* */, /*  for (int x = 0; x < expressions->expression_length ; x++) {
 */, /*  for (int y = 0 ; y < expressions->expressions[x]->statements->statements ; y++) {
 */, /*  case rax 
 */, /*  case rbx 
 */, /*  case rcx 
 */, /*  case rdx 
 */, /*  case rsi 
 */, /*  case rdi 
 */, /*  case rbx 
 */, /*  case rax 
 */, /*  case rcx 
 */, /*  case rdx 
 */, /*  case rsi 
 */, /*  case rdi 
 */, /*  case rcx 
 */, /*  case rax 
 */, /*  case rbx 
 */, /*  case rdx 
 */, /*  case rsi 
 */, /*  case rdi 
 */, /*  case rdx 
 */, /*  case rax 
 */, /*  case rbx 
 */, /*  case rcx 
 */, /*  case rsi 
 */, /*  case rdi 
 */, /*  case rsi 
 */, /*  case rax 
 */, /*  case rbx 
 */, /*  case rcx 
 */, /*  case rdx 
 */, /*  case rdi 
 */, /*  case rdi 
 */, /*  case rax 
 */, /*  case rbx 
 */, /*  case rcx 
 */, /*  case rdx 
 */, /*  case rsi 
 */, /*  case rax 
 */, /*  case rbx 
 */, /*  case rcx 
 */, /*  case rdx 
 */, /*  case rsi 
 */, /*  case rdi 
 */, /*  push rsp rbp
 */, /*  function_context->code[function_context->pc++] = 0x48; 
 */, /* function_context->code[function_context->pc++] = 0x89; 
 */, /*  function_context->code[function_context->pc++] = 0xe5; 
 */, /*  load string
 */, /*  jump location, mov $abs, %r11
 */, /*  method_address[method_address_count++] = function->code[n];
 */, /*  function_context->code[function_context->pc++] = 0x48; 
 */, /*  prepare_bytes[prepare_bytes_count++] = 0x48; 
 */, /*  prepare_bytes[prepare_bytes_count++] = 0x01; 
 */, /* 
  rax 193504464
  rbx 193504497
  rcx 193504530
  rdx 193504563
  rsi 193505043
  rdi 193504548

             * */, /*  emit_mov_constant(anfs-> 
 */, /* * Set up address of codegen context so we can find function to compile * */, /*  we need no longer skip rdi for it is used for function stub identifier since thats in r12
 */, /*  printf("Found expression type %d\n", expression->type);
 */, /*  comma separated expressions are statements 
 */, /*  printf("%s\n", method_call_text);
 */, /* char key[50];
      memset(key, '\0', 50);
      sprintf(key, "%d", anfs->anf->expressions[x]->id);* */, /* printf("%p %d %d\n", (char*)lookup->value, instruction, range_pair->ranges[r]->end_position);
 */, /*  assignrealregisters(anf, range_pair, assignment_pair, real_registers, register_count);
 */, /*  dump_expressions(0, edges->edges[y]->assignment->exps);
 */, /*  set_hashmap(forward_links, range_pair->ranges[x]->variable, (uintptr_t) 0, range_pair->ranges[x]->variable_length);
 */, /*  available_index++;
 */, /*  item->from->expression->chosen_register = item->from->chosen_register;
 */, /*  fgets(buffer, sizeof(buffer), stdin);
 */, /*  start to process your data / extract strings here...
 */, /*  coalesce_registers(anfs->anf);
 */, /*  coalesce_registers(anfs->functions[x]->anf);
 */, /* for (size_t i = 0; buffer[i * 2 + 1] != '\0'; i++) {
    write_region[i] = 16 * convert_to_hex(buffer[i*2]) + convert_to_hex(buffer[i*2 + 1]);
  }


  int (*jmp_func)(void) = (void *) write_region;

  printf("%x\n", jmp_func());
  * */]
